[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [satsie](https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1233646763) |\n| Approach ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/25909#pullrequestreview-1082819802) |\n| Stale ACK | [aureleoules](https://github.com/bitcoin/bitcoin/pull/25909#pullrequestreview-1167130870) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "created_at" : "2022-08-23T15:29:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1224236117",
      "id" : 1224236117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585I-FxV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1224236117/reactions"
      },
      "updated_at" : "2023-07-20T21:32:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1224236117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r953094777"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953094777"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`include_private` parameter is not being used.\r\n\r\n```suggestion\r\n    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script, bool include_private) const { return GetSigningProvider(script, include_private); }\r\n```",
      "commit_id" : "9024059e9e805620514744b8cdca6dd677793234",
      "created_at" : "2022-08-23T20:47:37Z",
      "diff_hunk" : "@@ -609,6 +609,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool CanGetAddresses(bool internal = false) const override;\n \n     std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const override;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script, bool include_private) const { return GetSigningProvider(script, true); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r953094777",
      "id" : 953094777,
      "line" : 612,
      "node_id" : "PRRC_kwDOABII5844zxJ5",
      "original_commit_id" : "9024059e9e805620514744b8cdca6dd677793234",
      "original_line" : 612,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 4,
      "pull_request_review_id" : 1082819802,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953094777/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-23T20:47:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953094777",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r953838926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953838926"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ups, thanks. Pushed.",
      "commit_id" : "587c0750367f0f6e68d5981d4cf755b2912cd7f0",
      "created_at" : "2022-08-24T13:57:43Z",
      "diff_hunk" : "@@ -609,6 +609,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool CanGetAddresses(bool internal = false) const override;\n \n     std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const override;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script, bool include_private) const { return GetSigningProvider(script, true); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r953838926",
      "id" : 953838926,
      "in_reply_to_id" : 953094777,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58442m1O",
      "original_commit_id" : "9024059e9e805620514744b8cdca6dd677793234",
      "original_line" : 612,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 1083867253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953838926/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-24T13:57:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/953838926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r960156515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960156515"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In the other test case with the two p2wpkh transactions, there is a step at the end to reload the wallet from disk. Is there any value in doing the same here?\r\n\r\n```\r\n        // Reload the wallet as it would be reloaded from disk and check that the witness data from the first transaction is still there.\r\n        // (flush the previous wallet first)\r\n        wallet->Flush();\r\n        DatabaseOptions options;\r\n        std::unique_ptr<CWallet> wallet_reloaded = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args,\r\n                                                                             DuplicateMockDatabase(wallet->GetDatabase(),options));\r\n        BOOST_ASSERT(wallet_reloaded->LoadWallet() == DBErrors::LOAD_OK);\r\n        const CWalletTx* reloaded_wtx_with_original_witness = WITH_LOCK(wallet_reloaded->cs_wallet, return wallet_reloaded->GetWalletTx(wtx->GetHash()));\r\n        BOOST_CHECK_EQUAL(reloaded_wtx_with_original_witness->GetWitnessHash(), MakeTransactionRef(signed_tx_1)->GetWitnessHash());\r\n\r\n```",
      "commit_id" : "312f3673618c83ddfcbc5e2c23722029bed47eb4",
      "created_at" : "2022-09-01T02:03:17Z",
      "diff_hunk" : "@@ -4,12 +4,187 @@\n \n #include <wallet/transaction.h>\n \n+#include <wallet/coincontrol.h>\n+#include <kernel/chain.h>\n+#include <validation.h>\n+#include <wallet/receive.h>\n+#include <wallet/spend.h>\n+#include <wallet/test/util.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n \n namespace wallet {\n-BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, WalletTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, BasicTestingSetup)\n+\n+const CWalletTx* GenBlockAndRetrieveMinedTx(TestChain100Setup& context, const CMutableTransaction& tx_to_mine, const CScript& coinbase_script, CWallet& wallet)\n+{\n+    const CBlock& block = context.CreateAndProcessBlock({tx_to_mine}, coinbase_script);\n+    wallet.blockConnected(kernel::MakeBlockInfo(WITH_LOCK(cs_main, return context.m_node.chainman->ActiveChain().Tip()), &block));\n+    return Assert(WITH_LOCK(wallet.cs_wallet, return wallet.GetWalletTx(tx_to_mine.GetHash())));\n+}\n+\n+const CWalletTx* SendCoinsAndGenBlock(TestChain100Setup& context, const CScript& scriptpubkey, CAmount amount, CWallet& from_wallet, const CScript& coinbase_script)\n+{\n+    CCoinControl coin_control;\n+    auto op_tx = Assert(CreateTransaction(from_wallet, {{scriptpubkey, amount, true}}, 1, coin_control));\n+    return GenBlockAndRetrieveMinedTx(context, CMutableTransaction(*op_tx->tx), GetScriptForDestination(PKHash(context.coinbaseKey.GetPubKey().GetID())), from_wallet);\n+}\n+\n+void CreateMultisigScriptAndImportDescriptor(CWallet& wallet, CScript& multisig_script_out, std::vector<CKey>& priv_keys)\n+{\n+    auto spkm = static_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, false));\n+    std::vector<CPubKey> pks;\n+    std::string pks_str; // descriptor data\n+    for (int i=0; i < 5; i++) {\n+        CTxDestination multi_dest = *Assert(spkm->GetNewDestination(OutputType::BECH32));\n+        auto provider = Assert(spkm->GetSolvingProvider(GetScriptForDestination(multi_dest), /*include_private=*/ true));\n+        CKeyID witness_id = ToKeyID(*Assert(std::get_if<WitnessV0KeyHash>(&multi_dest)));\n+        CPubKey pubkey;\n+        BOOST_CHECK(provider->GetPubKey(witness_id, pubkey));\n+        CKey priv_key;\n+        BOOST_CHECK(provider->GetKey(witness_id, priv_key));\n+        pks.emplace_back(pubkey);\n+        priv_keys.emplace_back(priv_key);\n+        pks_str += HexStr(pubkey) + ((i < 4) ? \",\" : \"\");\n+    }\n+\n+    // Import descriptor to watch the multisig script\n+    std::string descriptor = \"wsh(multi(3,\" + pks_str + \"))\";\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> parsed_desc = Parse(descriptor, keys, error, /*require_checksum=*/false);\n+    WalletDescriptor w_desc(std::move(parsed_desc), 0, 0, 0, 0);\n+    Assert(WITH_LOCK(wallet.cs_wallet, return wallet.AddWalletDescriptor(w_desc, keys, \"multisig_descriptor\", false)));\n+    multisig_script_out = GetScriptForMultisig(3, pks);\n+}\n+\n+// Test wallet receiving txes with the same id and different witness data.\n+// The following cases are covered:\n+//\n+//   1) Two p2wpkh transactions with the same hash are received:\n+//      The first one with segwit data stripped, and the second one with segwit data.\n+//      The wallet must update the stored tx, saving the witness data.\n+//\n+//   2) Two p2wsh multisig spending txes with the same hash but a different witness are received:\n+//      The first is added to the wallet by the mempool acceptance flow.\n+//      while the second one, is added to the wallet by the block connection flow.\n+//\n+//      Note: Right now, the wallet will NOT update the stored transaction, the first received\n+//            transaction will take precedence over any following-up transaction. Don't care\n+//            if the first transaction didn't get into a block and the second did.\n+//\n+BOOST_FIXTURE_TEST_CASE(store_segwit_tx_data, TestChain100Setup)\n+{\n+    // Create wallet and generate few more blocks to confirm balance\n+    std::unique_ptr<CWallet> wallet = CreateSyncedWallet(*m_node.chain, WITH_LOCK(cs_main, return m_node.chainman->ActiveChain()), m_args, coinbaseKey);\n+    const auto& coinbase_dest_script = GetScriptForDestination(*Assert(wallet->GetNewDestination(OutputType::BECH32, \"coinbase\")));\n+    for (int i=0; i<10; i++) {\n+        const CBlock& block = CreateAndProcessBlock({}, coinbase_dest_script);\n+        wallet->blockConnected(kernel::MakeBlockInfo(WITH_LOCK(cs_main, return m_node.chainman->ActiveChain().Tip()), &block));\n+    }\n+    BOOST_ASSERT(GetBalance(*wallet).m_mine_trusted == COIN * 50 * 10);\n+\n+    // create the P2WPKH output that will later be spent\n+    const auto& dest_script = GetScriptForDestination(*Assert(wallet->GetNewDestination(OutputType::BECH32, \"\")));\n+    uint256 recv_tx_hash = SendCoinsAndGenBlock(*this, dest_script, 10 * COIN, *wallet, coinbase_dest_script)->GetHash();\n+\n+    //   1) Two p2wpkh transactions with the same hash are received:\n+    //      The first one with segwit data stripped, and the second one with segwit data.\n+    //      The wallet must update the stored tx, saving the witness data.\n+    {\n+        // Create the spending tx, strip the witness data and verify that the wallet accepts it\n+        CCoinControl coin_control;\n+        coin_control.m_allow_other_inputs = false;\n+        coin_control.Select({recv_tx_hash, 0});\n+        auto op_spend_tx = Assert(CreateTransaction(*wallet, {{dest_script, 10 * COIN, true}}, 1, coin_control));\n+        BOOST_ASSERT(op_spend_tx->tx->HasWitness());\n+        const uint256& txid = op_spend_tx->tx->GetHash();\n+\n+        CMutableTransaction mtx(*op_spend_tx->tx);\n+        CScriptWitness witness_copy = mtx.vin[0].scriptWitness;\n+        mtx.vin[0].scriptWitness.SetNull();\n+        wallet->transactionAddedToMempool(MakeTransactionRef(mtx), /*mempool_sequence=*/0);\n+        const CWalletTx* wtx_no_witness = Assert(WITH_LOCK(wallet->cs_wallet, return wallet->GetWalletTx(txid)));\n+        BOOST_CHECK(wtx_no_witness->GetWitnessHash() == txid);\n+\n+        // Re-set the witness and verify that the wallet updates the tx witness data by including the tx in a block\n+        mtx.vin[0].scriptWitness = witness_copy;\n+        const CWalletTx* wtx_with_witness = GenBlockAndRetrieveMinedTx(*this, mtx, coinbase_dest_script, *wallet);\n+        BOOST_CHECK(wtx_with_witness->GetWitnessHash() != txid);\n+\n+        // Reload the wallet as it would be reloaded from disk and check that the witness data is still there.\n+        // (flush the previous wallet first)\n+        wallet->Flush();\n+        DatabaseOptions options;\n+        std::unique_ptr<CWallet> wallet_reloaded = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args,\n+                                                                             DuplicateMockDatabase(wallet->GetDatabase(),options));\n+        BOOST_ASSERT(wallet_reloaded->LoadWallet() == DBErrors::LOAD_OK);\n+        const CWalletTx* reloaded_wtx_with_witness = WITH_LOCK(wallet_reloaded->cs_wallet, return wallet_reloaded->GetWalletTx(txid));\n+        BOOST_CHECK_EQUAL(reloaded_wtx_with_witness->GetWitnessHash(), wtx_with_witness->GetWitnessHash());\n+    }\n+\n+\n+    //   2) Two p2wsh multisig transactions with the same hash but a different witness are received:\n+    //      The first is added to the wallet by the mempool acceptance flow.\n+    //      while the second one, is added to the wallet by the block connection flow.\n+    //\n+    //      Note: Right now, the wallet will NOT update the stored transaction, the first received\n+    //            transaction will take precedence over any following-up transaction. Don't care\n+    //            if the first transaction didn't get into a block and the second did.\n+    {\n+        // Setup context: Create the 3-of-5 multisig script and add the descriptor to the wallet\n+        CScript multisig_script;\n+        std::vector<CKey> priv_keys;\n+        CreateMultisigScriptAndImportDescriptor(*wallet, multisig_script, priv_keys);\n+\n+        // Lock coins in the multisig script\n+        const CWalletTx* multisig_tx = SendCoinsAndGenBlock(*this, GetScriptForDestination(WitnessV0ScriptHash(multisig_script)), 3 * COIN, *wallet, coinbase_dest_script);\n+\n+        // Now create a transaction that spends the funds locked in the multisig script\n+        CCoinControl coin_control;\n+        coin_control.m_allow_other_inputs = false;\n+        coin_control.Select({multisig_tx->GetHash(), 0});\n+        auto op_spend_tx = Assert(CreateTransaction(*wallet, {{dest_script, 2 * COIN, true}}, 1, coin_control, /*sign=*/false));\n+\n+        // Now the real test begins, create unsigned tx\n+        CMutableTransaction unsigned_tx(*op_spend_tx->tx);\n+        std::map<COutPoint, Coin> coins;\n+        coins[unsigned_tx.vin[0].prevout] = Coin(multisig_tx->tx->vout[unsigned_tx.vin[0].prevout.n], /*nHeightIn=*/113, /*fCoinBaseIn=*/false);\n+\n+        // 1) Use the first three keys and add tx to wallet via mempool acceptance:\n+        FillableSigningProvider keystore_1;\n+        for (int i=0; i<3; i++) BOOST_ASSERT(keystore_1.AddKey(priv_keys[i]));\n+        BOOST_ASSERT(keystore_1.AddCScript(multisig_script));\n+        std::map<int, bilingual_str> input_errors;\n+        CMutableTransaction signed_tx_1 = unsigned_tx;\n+        Assert(SignTransaction(signed_tx_1, &keystore_1, coins, SIGHASH_DEFAULT, input_errors));\n+\n+        const CTransactionRef& spend_from_multisig_tx_1 = MakeTransactionRef(signed_tx_1);\n+        wallet->transactionAddedToMempool(spend_from_multisig_tx_1, /*mempool_sequence=*/0);\n+        const CWalletTx* wtx_spending_multisig_1 = Assert(WITH_LOCK(wallet->cs_wallet, return wallet->GetWalletTx(signed_tx_1.GetHash())));\n+        BOOST_CHECK(wtx_spending_multisig_1->GetWitnessHash() == spend_from_multisig_tx_1->GetWitnessHash());\n+\n+        // 2) Use the last keys and try to add tx to wallet via block connection:\n+        FillableSigningProvider keystore_2;\n+        for (int i=priv_keys.size()-1; i>=2; i--) keystore_2.AddKey(priv_keys[i]);\n+        BOOST_ASSERT(keystore_2.AddCScript(multisig_script));\n+        CMutableTransaction signed_tx_2 = unsigned_tx;\n+        Assert(SignTransaction(signed_tx_2, &keystore_2, coins, SIGHASH_DEFAULT, input_errors));\n+\n+        // Assert that the tx id is equal to the other tx but the witness data is different\n+        BOOST_ASSERT(signed_tx_1.GetHash() == signed_tx_2.GetHash());\n+        BOOST_ASSERT(signed_tx_1.vin[0].scriptWitness.stack != signed_tx_2.vin[0].scriptWitness.stack);\n+\n+        // Now connect the block and verify current behavior\n+        const CWalletTx* wtx = GenBlockAndRetrieveMinedTx(*this, signed_tx_2, coinbase_dest_script, *wallet);\n+\n+        // Important: current wallet behavior will NOT update the input witness data.\n+        // The wallet will only see the witness data of the first seen tx.\n+        BOOST_CHECK(wtx->GetHash() == signed_tx_2.GetHash());\n+        BOOST_CHECK(wtx->GetWitnessHash() != MakeTransactionRef(signed_tx_2)->GetWitnessHash());\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r960156515",
      "id" : 960156515,
      "line" : 186,
      "node_id" : "PRRC_kwDOABII5845OtNj",
      "original_commit_id" : "398e2476657a761d47942936c8832ec7229291e3",
      "original_line" : 186,
      "original_position" : 184,
      "original_start_line" : null,
      "path" : "src/wallet/test/wallet_transaction_tests.cpp",
      "position" : 184,
      "pull_request_review_id" : 1092685575,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960156515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-01T02:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/960156515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1823216?v=4",
         "events_url" : "https://api.github.com/users/satsie/events{/privacy}",
         "followers_url" : "https://api.github.com/users/satsie/followers",
         "following_url" : "https://api.github.com/users/satsie/following{/other_user}",
         "gists_url" : "https://api.github.com/users/satsie/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/satsie",
         "id" : 1823216,
         "login" : "satsie",
         "node_id" : "MDQ6VXNlcjE4MjMyMTY=",
         "organizations_url" : "https://api.github.com/users/satsie/orgs",
         "received_events_url" : "https://api.github.com/users/satsie/received_events",
         "repos_url" : "https://api.github.com/users/satsie/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/satsie/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/satsie/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/satsie"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I've reviewed the diff (398e2476657a761d47942936c8832ec7229291e3), checked out the code and run the tests (using `./src/test/test_bitcoin --log_level=all --run_test=wallet_transaction_tests`). As an extremely new (aspiring) contributor with limited knowledge, this all looks fine to me. However I don't feel comfortable enough in my own abilities to give it a real ACK.\r\n\r\nI added extra assertions locally for my own learning. Didn't want to clutter the diff with individual code comments, so I will share them here. I don't know if they are even useful or just redundant. For me, the main thing is it is not immediately obvious that the existing assertions cover the expected presence/absence of witness data. \r\n\r\nThe assertions on the transaction IDs (like `txid` in the first test with the two p2wpkh transactions) make sense to anyone who understands that when there is no witness data, the witness hash is the same as the tx hash (per `transaction.cpp.ComputeWitnessHash()`). I'm not sure how obvious this is others reading the code, or if there are inefficiencies related to explicitly checking the witness data. It could be a non issue for those that spend more time here than me.\r\n\r\nApologies in advance if there are any C++ gotchas with pointers and references that I am not aware of :)\r\n\r\n```\r\n\t// From the first transaction in the first test case:\r\n        BOOST_CHECK(wtx_no_witness->GetWitnessHash() == txid);\r\n        BOOST_CHECK(wtx_no_witness->tx->HasWitness() == 0); // additional assertion to verify that the transaction in the wallet has no witness data\r\n```\r\n\r\n```\r\n\t// From the second transaction in the first test case:\r\n        BOOST_CHECK(wtx_with_witness->GetWitnessHash() != txid);\r\n        BOOST_CHECK(wtx_with_witness->tx->HasWitness() == 1); // additional assertion to verify that the transaction in the wallet now has witness data\r\n\r\n```\r\n\r\nAside from that I had a few questions to help me understand the PR better:\r\n\r\n1. `wallet_transaction_tests.CreateMultisigScriptAndImportDescriptor`: Is there any reason why this test code creates a 3-of-5 multisig instead of a 2-of-3?\r\n2. Was the removal of `src/test/util/wallet.h` and `src/test/util.wallet.cpp` part of routine cleanup? Because there is a `src/wallet/test` folder with way more in it and it doesn't make sense to have wallet unit tests in two places?",
      "created_at" : "2022-09-01T02:05:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1233646763",
      "id" : 1233646763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585Jh_Sr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233646763/reactions"
      },
      "updated_at" : "2022-09-01T02:05:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233646763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1823216?v=4",
         "events_url" : "https://api.github.com/users/satsie/events{/privacy}",
         "followers_url" : "https://api.github.com/users/satsie/followers",
         "following_url" : "https://api.github.com/users/satsie/following{/other_user}",
         "gists_url" : "https://api.github.com/users/satsie/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/satsie",
         "id" : 1823216,
         "login" : "satsie",
         "node_id" : "MDQ6VXNlcjE4MjMyMTY=",
         "organizations_url" : "https://api.github.com/users/satsie/orgs",
         "received_events_url" : "https://api.github.com/users/satsie/received_events",
         "repos_url" : "https://api.github.com/users/satsie/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/satsie/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/satsie/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/satsie"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r961665380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/961665380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nop, there is no value doing that here.\r\nThe test here validates the current limitation of not updating the existent transaction. As there is no wtx update, there is no write to disk, there by there is no reason to test a reload.\r\n\r\nAnd even if the wallet limitation wouldn't exist, the first reload test case is enough to verify the record durability. Sources flow wise, replace a tx with no witness is exactly the same as replacing a tx with witness.",
      "commit_id" : "312f3673618c83ddfcbc5e2c23722029bed47eb4",
      "created_at" : "2022-09-02T13:12:22Z",
      "diff_hunk" : "@@ -4,12 +4,187 @@\n \n #include <wallet/transaction.h>\n \n+#include <wallet/coincontrol.h>\n+#include <kernel/chain.h>\n+#include <validation.h>\n+#include <wallet/receive.h>\n+#include <wallet/spend.h>\n+#include <wallet/test/util.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n \n namespace wallet {\n-BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, WalletTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, BasicTestingSetup)\n+\n+const CWalletTx* GenBlockAndRetrieveMinedTx(TestChain100Setup& context, const CMutableTransaction& tx_to_mine, const CScript& coinbase_script, CWallet& wallet)\n+{\n+    const CBlock& block = context.CreateAndProcessBlock({tx_to_mine}, coinbase_script);\n+    wallet.blockConnected(kernel::MakeBlockInfo(WITH_LOCK(cs_main, return context.m_node.chainman->ActiveChain().Tip()), &block));\n+    return Assert(WITH_LOCK(wallet.cs_wallet, return wallet.GetWalletTx(tx_to_mine.GetHash())));\n+}\n+\n+const CWalletTx* SendCoinsAndGenBlock(TestChain100Setup& context, const CScript& scriptpubkey, CAmount amount, CWallet& from_wallet, const CScript& coinbase_script)\n+{\n+    CCoinControl coin_control;\n+    auto op_tx = Assert(CreateTransaction(from_wallet, {{scriptpubkey, amount, true}}, 1, coin_control));\n+    return GenBlockAndRetrieveMinedTx(context, CMutableTransaction(*op_tx->tx), GetScriptForDestination(PKHash(context.coinbaseKey.GetPubKey().GetID())), from_wallet);\n+}\n+\n+void CreateMultisigScriptAndImportDescriptor(CWallet& wallet, CScript& multisig_script_out, std::vector<CKey>& priv_keys)\n+{\n+    auto spkm = static_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, false));\n+    std::vector<CPubKey> pks;\n+    std::string pks_str; // descriptor data\n+    for (int i=0; i < 5; i++) {\n+        CTxDestination multi_dest = *Assert(spkm->GetNewDestination(OutputType::BECH32));\n+        auto provider = Assert(spkm->GetSolvingProvider(GetScriptForDestination(multi_dest), /*include_private=*/ true));\n+        CKeyID witness_id = ToKeyID(*Assert(std::get_if<WitnessV0KeyHash>(&multi_dest)));\n+        CPubKey pubkey;\n+        BOOST_CHECK(provider->GetPubKey(witness_id, pubkey));\n+        CKey priv_key;\n+        BOOST_CHECK(provider->GetKey(witness_id, priv_key));\n+        pks.emplace_back(pubkey);\n+        priv_keys.emplace_back(priv_key);\n+        pks_str += HexStr(pubkey) + ((i < 4) ? \",\" : \"\");\n+    }\n+\n+    // Import descriptor to watch the multisig script\n+    std::string descriptor = \"wsh(multi(3,\" + pks_str + \"))\";\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> parsed_desc = Parse(descriptor, keys, error, /*require_checksum=*/false);\n+    WalletDescriptor w_desc(std::move(parsed_desc), 0, 0, 0, 0);\n+    Assert(WITH_LOCK(wallet.cs_wallet, return wallet.AddWalletDescriptor(w_desc, keys, \"multisig_descriptor\", false)));\n+    multisig_script_out = GetScriptForMultisig(3, pks);\n+}\n+\n+// Test wallet receiving txes with the same id and different witness data.\n+// The following cases are covered:\n+//\n+//   1) Two p2wpkh transactions with the same hash are received:\n+//      The first one with segwit data stripped, and the second one with segwit data.\n+//      The wallet must update the stored tx, saving the witness data.\n+//\n+//   2) Two p2wsh multisig spending txes with the same hash but a different witness are received:\n+//      The first is added to the wallet by the mempool acceptance flow.\n+//      while the second one, is added to the wallet by the block connection flow.\n+//\n+//      Note: Right now, the wallet will NOT update the stored transaction, the first received\n+//            transaction will take precedence over any following-up transaction. Don't care\n+//            if the first transaction didn't get into a block and the second did.\n+//\n+BOOST_FIXTURE_TEST_CASE(store_segwit_tx_data, TestChain100Setup)\n+{\n+    // Create wallet and generate few more blocks to confirm balance\n+    std::unique_ptr<CWallet> wallet = CreateSyncedWallet(*m_node.chain, WITH_LOCK(cs_main, return m_node.chainman->ActiveChain()), m_args, coinbaseKey);\n+    const auto& coinbase_dest_script = GetScriptForDestination(*Assert(wallet->GetNewDestination(OutputType::BECH32, \"coinbase\")));\n+    for (int i=0; i<10; i++) {\n+        const CBlock& block = CreateAndProcessBlock({}, coinbase_dest_script);\n+        wallet->blockConnected(kernel::MakeBlockInfo(WITH_LOCK(cs_main, return m_node.chainman->ActiveChain().Tip()), &block));\n+    }\n+    BOOST_ASSERT(GetBalance(*wallet).m_mine_trusted == COIN * 50 * 10);\n+\n+    // create the P2WPKH output that will later be spent\n+    const auto& dest_script = GetScriptForDestination(*Assert(wallet->GetNewDestination(OutputType::BECH32, \"\")));\n+    uint256 recv_tx_hash = SendCoinsAndGenBlock(*this, dest_script, 10 * COIN, *wallet, coinbase_dest_script)->GetHash();\n+\n+    //   1) Two p2wpkh transactions with the same hash are received:\n+    //      The first one with segwit data stripped, and the second one with segwit data.\n+    //      The wallet must update the stored tx, saving the witness data.\n+    {\n+        // Create the spending tx, strip the witness data and verify that the wallet accepts it\n+        CCoinControl coin_control;\n+        coin_control.m_allow_other_inputs = false;\n+        coin_control.Select({recv_tx_hash, 0});\n+        auto op_spend_tx = Assert(CreateTransaction(*wallet, {{dest_script, 10 * COIN, true}}, 1, coin_control));\n+        BOOST_ASSERT(op_spend_tx->tx->HasWitness());\n+        const uint256& txid = op_spend_tx->tx->GetHash();\n+\n+        CMutableTransaction mtx(*op_spend_tx->tx);\n+        CScriptWitness witness_copy = mtx.vin[0].scriptWitness;\n+        mtx.vin[0].scriptWitness.SetNull();\n+        wallet->transactionAddedToMempool(MakeTransactionRef(mtx), /*mempool_sequence=*/0);\n+        const CWalletTx* wtx_no_witness = Assert(WITH_LOCK(wallet->cs_wallet, return wallet->GetWalletTx(txid)));\n+        BOOST_CHECK(wtx_no_witness->GetWitnessHash() == txid);\n+\n+        // Re-set the witness and verify that the wallet updates the tx witness data by including the tx in a block\n+        mtx.vin[0].scriptWitness = witness_copy;\n+        const CWalletTx* wtx_with_witness = GenBlockAndRetrieveMinedTx(*this, mtx, coinbase_dest_script, *wallet);\n+        BOOST_CHECK(wtx_with_witness->GetWitnessHash() != txid);\n+\n+        // Reload the wallet as it would be reloaded from disk and check that the witness data is still there.\n+        // (flush the previous wallet first)\n+        wallet->Flush();\n+        DatabaseOptions options;\n+        std::unique_ptr<CWallet> wallet_reloaded = std::make_unique<CWallet>(m_node.chain.get(), \"\", m_args,\n+                                                                             DuplicateMockDatabase(wallet->GetDatabase(),options));\n+        BOOST_ASSERT(wallet_reloaded->LoadWallet() == DBErrors::LOAD_OK);\n+        const CWalletTx* reloaded_wtx_with_witness = WITH_LOCK(wallet_reloaded->cs_wallet, return wallet_reloaded->GetWalletTx(txid));\n+        BOOST_CHECK_EQUAL(reloaded_wtx_with_witness->GetWitnessHash(), wtx_with_witness->GetWitnessHash());\n+    }\n+\n+\n+    //   2) Two p2wsh multisig transactions with the same hash but a different witness are received:\n+    //      The first is added to the wallet by the mempool acceptance flow.\n+    //      while the second one, is added to the wallet by the block connection flow.\n+    //\n+    //      Note: Right now, the wallet will NOT update the stored transaction, the first received\n+    //            transaction will take precedence over any following-up transaction. Don't care\n+    //            if the first transaction didn't get into a block and the second did.\n+    {\n+        // Setup context: Create the 3-of-5 multisig script and add the descriptor to the wallet\n+        CScript multisig_script;\n+        std::vector<CKey> priv_keys;\n+        CreateMultisigScriptAndImportDescriptor(*wallet, multisig_script, priv_keys);\n+\n+        // Lock coins in the multisig script\n+        const CWalletTx* multisig_tx = SendCoinsAndGenBlock(*this, GetScriptForDestination(WitnessV0ScriptHash(multisig_script)), 3 * COIN, *wallet, coinbase_dest_script);\n+\n+        // Now create a transaction that spends the funds locked in the multisig script\n+        CCoinControl coin_control;\n+        coin_control.m_allow_other_inputs = false;\n+        coin_control.Select({multisig_tx->GetHash(), 0});\n+        auto op_spend_tx = Assert(CreateTransaction(*wallet, {{dest_script, 2 * COIN, true}}, 1, coin_control, /*sign=*/false));\n+\n+        // Now the real test begins, create unsigned tx\n+        CMutableTransaction unsigned_tx(*op_spend_tx->tx);\n+        std::map<COutPoint, Coin> coins;\n+        coins[unsigned_tx.vin[0].prevout] = Coin(multisig_tx->tx->vout[unsigned_tx.vin[0].prevout.n], /*nHeightIn=*/113, /*fCoinBaseIn=*/false);\n+\n+        // 1) Use the first three keys and add tx to wallet via mempool acceptance:\n+        FillableSigningProvider keystore_1;\n+        for (int i=0; i<3; i++) BOOST_ASSERT(keystore_1.AddKey(priv_keys[i]));\n+        BOOST_ASSERT(keystore_1.AddCScript(multisig_script));\n+        std::map<int, bilingual_str> input_errors;\n+        CMutableTransaction signed_tx_1 = unsigned_tx;\n+        Assert(SignTransaction(signed_tx_1, &keystore_1, coins, SIGHASH_DEFAULT, input_errors));\n+\n+        const CTransactionRef& spend_from_multisig_tx_1 = MakeTransactionRef(signed_tx_1);\n+        wallet->transactionAddedToMempool(spend_from_multisig_tx_1, /*mempool_sequence=*/0);\n+        const CWalletTx* wtx_spending_multisig_1 = Assert(WITH_LOCK(wallet->cs_wallet, return wallet->GetWalletTx(signed_tx_1.GetHash())));\n+        BOOST_CHECK(wtx_spending_multisig_1->GetWitnessHash() == spend_from_multisig_tx_1->GetWitnessHash());\n+\n+        // 2) Use the last keys and try to add tx to wallet via block connection:\n+        FillableSigningProvider keystore_2;\n+        for (int i=priv_keys.size()-1; i>=2; i--) keystore_2.AddKey(priv_keys[i]);\n+        BOOST_ASSERT(keystore_2.AddCScript(multisig_script));\n+        CMutableTransaction signed_tx_2 = unsigned_tx;\n+        Assert(SignTransaction(signed_tx_2, &keystore_2, coins, SIGHASH_DEFAULT, input_errors));\n+\n+        // Assert that the tx id is equal to the other tx but the witness data is different\n+        BOOST_ASSERT(signed_tx_1.GetHash() == signed_tx_2.GetHash());\n+        BOOST_ASSERT(signed_tx_1.vin[0].scriptWitness.stack != signed_tx_2.vin[0].scriptWitness.stack);\n+\n+        // Now connect the block and verify current behavior\n+        const CWalletTx* wtx = GenBlockAndRetrieveMinedTx(*this, signed_tx_2, coinbase_dest_script, *wallet);\n+\n+        // Important: current wallet behavior will NOT update the input witness data.\n+        // The wallet will only see the witness data of the first seen tx.\n+        BOOST_CHECK(wtx->GetHash() == signed_tx_2.GetHash());\n+        BOOST_CHECK(wtx->GetWitnessHash() != MakeTransactionRef(signed_tx_2)->GetWitnessHash());\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r961665380",
      "id" : 961665380,
      "in_reply_to_id" : 960156515,
      "line" : 186,
      "node_id" : "PRRC_kwDOABII5845Udlk",
      "original_commit_id" : "398e2476657a761d47942936c8832ec7229291e3",
      "original_line" : 186,
      "original_position" : 184,
      "original_start_line" : null,
      "path" : "src/wallet/test/wallet_transaction_tests.cpp",
      "position" : 184,
      "pull_request_review_id" : 1094849022,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/961665380/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-02T13:12:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/961665380",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The assertions on the transaction IDs (like txid in the first test with the two p2wpkh transactions) make sense to anyone who understands that when there is no witness data, the witness hash is the same as the tx hash (per transaction.cpp.ComputeWitnessHash()). I'm not sure how obvious this is others reading the code, or if there are inefficiencies related to explicitly checking the witness data. It could be a non issue for those that spend more time here than me.\r\n\r\nYep, non-issue. It comes from the segwit definitions (BIP141).\r\nThe transaction id is the hash of the transaction data serialized. The witness transaction id is the hash of the transaction data serialized + a marker, flag and witness data.\r\n\r\nif the witness data doesn't exist (or isn't there), then you are serializing only the regular transaction fields, thus why the tx id is equal to the witness id.\r\n\r\n> wallet_transaction_tests.CreateMultisigScriptAndImportDescriptor: Is there any reason why this test code creates a 3-of-5 multisig instead of a 2-of-3?\r\n\r\nNot really. For the test purposes, it could had been a 1-of-2 as well. I just liked more to present a scenario where the user looses data that is hard to re-do if keys are spread across different devices/places.\r\n\r\n> Was the removal of src/test/util/wallet.h and src/test/util.wallet.cpp part of routine cleanup? Because there is a src/wallet/test folder with way more in it and it doesn't make sense to have wallet unit tests in two places?\r\n\r\nBoth files were just containing utility functions to interact with the wallet. None of them are unit tests.\r\nThey were sharing the same purpose and the wallet code should be placed inside the wallet directory.\r\n\r\nPlus, as `wallet/test/util.h` and `wallet/test/util.cpp` were not part of the util library, we weren't able to use the functions on the bench and unit test modules (them are on different units). Which would had forced me to duplicate the `DuplicateMockDatabase` function that was inside of one of benchmarks to be able to use it in the new unit test case.",
      "created_at" : "2022-09-02T14:21:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1235565173",
      "id" : 1235565173,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585JpTp1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1235565173/reactions"
      },
      "updated_at" : "2022-09-02T17:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1235565173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-10-19T09:30:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1283706875",
      "id" : 1283706875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585Mg8_7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1283706875/reactions"
      },
      "updated_at" : "2022-10-19T09:30:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1283706875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased, conflicts solved.",
      "created_at" : "2022-10-27T14:12:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1293587259",
      "id" : 1293587259,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585NGpM7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293587259/reactions"
      },
      "updated_at" : "2022-10-27T14:12:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293587259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-10-27T22:56:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1294211261",
      "id" : 1294211261,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585NJBi9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294211261/reactions"
      },
      "updated_at" : "2022-10-27T22:56:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294211261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r1011849338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011849338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`coinbase_script` is unused",
      "commit_id" : "312f3673618c83ddfcbc5e2c23722029bed47eb4",
      "created_at" : "2022-11-02T14:28:55Z",
      "diff_hunk" : "@@ -4,12 +4,187 @@\n \n #include <wallet/transaction.h>\n \n+#include <wallet/coincontrol.h>\n+#include <kernel/chain.h>\n+#include <validation.h>\n+#include <wallet/receive.h>\n+#include <wallet/spend.h>\n+#include <wallet/test/util.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n \n namespace wallet {\n-BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, WalletTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, BasicTestingSetup)\n+\n+const CWalletTx* GenBlockAndRetrieveMinedTx(TestChain100Setup& context, const CMutableTransaction& tx_to_mine, const CScript& coinbase_script, CWallet& wallet)\n+{\n+    const CBlock& block = context.CreateAndProcessBlock({tx_to_mine}, coinbase_script);\n+    wallet.blockConnected(kernel::MakeBlockInfo(WITH_LOCK(cs_main, return context.m_node.chainman->ActiveChain().Tip()), &block));\n+    return Assert(WITH_LOCK(wallet.cs_wallet, return wallet.GetWalletTx(tx_to_mine.GetHash())));\n+}\n+\n+const CWalletTx* SendCoinsAndGenBlock(TestChain100Setup& context, const CScript& scriptpubkey, CAmount amount, CWallet& from_wallet, const CScript& coinbase_script)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r1011849338",
      "id" : 1011849338,
      "line" : 27,
      "node_id" : "PRRC_kwDOABII5848T5h6",
      "original_commit_id" : "326d03085a2e41d021d42f8ce324df235c907b19",
      "original_line" : 27,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/test/wallet_transaction_tests.cpp",
      "position" : 25,
      "pull_request_review_id" : 1165360702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011849338/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-03T09:56:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011849338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r1013049794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013049794"
         }
      },
      "author_association" : "MEMBER",
      "body" : "pushed, thanks",
      "commit_id" : "312f3673618c83ddfcbc5e2c23722029bed47eb4",
      "created_at" : "2022-11-03T15:20:24Z",
      "diff_hunk" : "@@ -4,12 +4,187 @@\n \n #include <wallet/transaction.h>\n \n+#include <wallet/coincontrol.h>\n+#include <kernel/chain.h>\n+#include <validation.h>\n+#include <wallet/receive.h>\n+#include <wallet/spend.h>\n+#include <wallet/test/util.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n \n namespace wallet {\n-BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, WalletTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, BasicTestingSetup)\n+\n+const CWalletTx* GenBlockAndRetrieveMinedTx(TestChain100Setup& context, const CMutableTransaction& tx_to_mine, const CScript& coinbase_script, CWallet& wallet)\n+{\n+    const CBlock& block = context.CreateAndProcessBlock({tx_to_mine}, coinbase_script);\n+    wallet.blockConnected(kernel::MakeBlockInfo(WITH_LOCK(cs_main, return context.m_node.chainman->ActiveChain().Tip()), &block));\n+    return Assert(WITH_LOCK(wallet.cs_wallet, return wallet.GetWalletTx(tx_to_mine.GetHash())));\n+}\n+\n+const CWalletTx* SendCoinsAndGenBlock(TestChain100Setup& context, const CScript& scriptpubkey, CAmount amount, CWallet& from_wallet, const CScript& coinbase_script)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r1013049794",
      "id" : 1013049794,
      "in_reply_to_id" : 1011849338,
      "line" : 27,
      "node_id" : "PRRC_kwDOABII5848YenC",
      "original_commit_id" : "326d03085a2e41d021d42f8ce324df235c907b19",
      "original_line" : 27,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/test/wallet_transaction_tests.cpp",
      "position" : 25,
      "pull_request_review_id" : 1167123734,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013049794/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-03T15:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013049794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated per @aureleoules feedback, thanks!\r\n\r\nTiny [diff](https://github.com/bitcoin/bitcoin/compare/326d03085a2e41d021d42f8ce324df235c907b19..312f3673618c83ddfcbc5e2c23722029bed47eb4). Only moved from using the test coinbase key to use the custom one, no functional changes.",
      "created_at" : "2022-11-03T15:21:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1302274957",
      "id" : 1302274957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585NnyON",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302274957/reactions"
      },
      "updated_at" : "2022-11-03T15:21:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302274957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2022-11-30T01:20:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1331524708",
      "id" : 1331524708,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585PXXRk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331524708/reactions"
      },
      "updated_at" : "2022-11-30T01:20:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331524708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r1085810309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085810309"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would strongly prefer that we don't have to add new methods to DescSPKM that can export individual keys. This test could just as easily work with generating new random CKeys for the private keys.",
      "commit_id" : "d811ec8fb6c545a137751d35669563b7ee2e6d2f",
      "created_at" : "2023-01-24T19:22:05Z",
      "diff_hunk" : "@@ -4,12 +4,187 @@\n \n #include <wallet/transaction.h>\n \n+#include <wallet/coincontrol.h>\n+#include <kernel/chain.h>\n+#include <validation.h>\n+#include <wallet/receive.h>\n+#include <wallet/spend.h>\n+#include <wallet/test/util.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n \n namespace wallet {\n-BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, WalletTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(wallet_transaction_tests, BasicTestingSetup)\n+\n+const CWalletTx* GenBlockAndRetrieveMinedTx(TestChain100Setup& context, const CMutableTransaction& tx_to_mine, const CScript& coinbase_script, CWallet& wallet)\n+{\n+    const CBlock& block = context.CreateAndProcessBlock({tx_to_mine}, coinbase_script);\n+    wallet.blockConnected(kernel::MakeBlockInfo(WITH_LOCK(cs_main, return context.m_node.chainman->ActiveChain().Tip()), &block));\n+    return Assert(WITH_LOCK(wallet.cs_wallet, return wallet.GetWalletTx(tx_to_mine.GetHash())));\n+}\n+\n+const CWalletTx* SendCoinsAndGenBlock(TestChain100Setup& context, const CScript& scriptpubkey, CAmount amount, CWallet& from_wallet, const CScript& coinbase_script)\n+{\n+    CCoinControl coin_control;\n+    auto op_tx = Assert(CreateTransaction(from_wallet, {{scriptpubkey, amount, true}}, 1, coin_control));\n+    return GenBlockAndRetrieveMinedTx(context, CMutableTransaction(*op_tx->tx), coinbase_script, from_wallet);\n+}\n+\n+void CreateMultisigScriptAndImportDescriptor(CWallet& wallet, CScript& multisig_script_out, std::vector<CKey>& priv_keys)\n+{\n+    auto spkm = static_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, false));\n+    std::vector<CPubKey> pks;\n+    std::string pks_str; // descriptor data\n+    for (int i=0; i < 5; i++) {\n+        CTxDestination multi_dest = *Assert(spkm->GetNewDestination(OutputType::BECH32));\n+        auto provider = Assert(spkm->GetSolvingProvider(GetScriptForDestination(multi_dest), /*include_private=*/ true));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#discussion_r1085810309",
      "id" : 1085810309,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII585AuCaF",
      "original_commit_id" : "d811ec8fb6c545a137751d35669563b7ee2e6d2f",
      "original_line" : 41,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/wallet/test/wallet_transaction_tests.cpp",
      "position" : 39,
      "pull_request_review_id" : 1268146166,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25909",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085810309/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-24T19:24:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085810309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are you still working on this?",
      "created_at" : "2023-09-20T17:38:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1728173331",
      "id" : 1728173331,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585nAdUT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728173331/reactions"
      },
      "updated_at" : "2023-09-20T17:38:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728173331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Are you still working on this?\r\n\r\nnot really. Closing for now.",
      "created_at" : "2023-09-21T10:42:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25909#issuecomment-1729314675",
      "id" : 1729314675,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25909",
      "node_id" : "IC_kwDOABII585nEz9z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729314675/reactions"
      },
      "updated_at" : "2023-09-21T10:42:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729314675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   }
]
