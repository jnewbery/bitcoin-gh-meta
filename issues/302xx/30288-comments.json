[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This is not what currently happens, but simplest approach might be for the original chainstate to be unaffected by the snapshot chainstate, and to continue to download and attach the same blocks it otherwise would have if no snapshot were loaded. It would just do it more slowly due to a reduced cache size and lower priority for block requests compared to the snapshot chainstate.\r\n\r\nI think that the concept of the Active Chainstate / Active Tip is important for this this discussion. Currently, it is tied to the snapshot chainstate until the background sync has finished.\r\nIf we keep that logic, having the background chainstate target the most-work block doesn't really achieve anything - if that chain turns out to be valid, we would still never use it for anything meaningful because the snapshot chainstate will remain the active one.\r\nSo in order for targeting the most-work chain to make any sense, we'd also need to introduce the possibility of switching the active chainstate to it without the requirement that the background sync has to finish. Which would lead to other questions: I we don't prioritize syncing the background chainstate towards it anymore, should we keep the now-unused snapshot chainstate around indefinitely and just ignore it exists? Should we be able to switch the active chainstate back to the snapshot chain in case we receive more blocks building on top of it, so that it becomes the most-work chain again?\r\n\r\nConsidering that AssumeUtxo sync is meant to be an optional and temporary optimization, and that large reorgs should be very infrequent, it could also make sense to abandon the AssumeUtxo sync, delete the snapshot chainstate and revert to normal sync as soon as we accept a header on a different chain that has more work than the best header of the snapshot chain.\r\n\r\nI think that pragmatically we shouldn't accept a snapshot in the first place if it's not an ancestor of the most-work header `m_best_header` (I plan on opening a PR for that soon), but that doesn't solve the problem completely because we might only learn about another chain after having loaded the snapshot successfully.",
      "created_at" : "2024-06-14T17:10:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/30288#issuecomment-2168444052",
      "id" : 2168444052,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30288",
      "node_id" : "IC_kwDOABII586BP9SU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2168444052/reactions"
      },
      "updated_at" : "2024-06-14T17:10:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2168444052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think that the concept of the Active Chainstate / Active Tip is important for this this discussion\r\n\r\nAgree it's worth mentioning. I think decisions about how chainstates are synced are mostly separate from decisions about how they are used and prioritized. But for completeness, I was assuming that if the original chainstate ever had more work than the snapshot chainstate, the snapshot chainstate would be unused and could be deleted, and the original chainstate would become the \"active\" chainstate again. Also, cache and download priority would be shifted to whichever chainstate had headers showing the most-work.\r\n\r\n(Somewhat related to this: I don't think the concept of an \"active\" chainstate is useful, and in #30214 I eliminate many uses of that designation. Right now when a snapshot is loaded, indexes treat the original chainstate as active, while wallets treat the snapshot chainstate as active. RPCs mostly treat the snapshot chainstate as active, but sometimes show information about both chainstates. I think it's better to refer to chainstates as current vs historical, or validated vs. assumed-valid instead of referring more nebulously to an \"active\" chainstate.)\r\n\r\n> it could also make sense to abandon the AssumeUtxo sync, delete the snapshot chainstate and revert to normal sync as soon as we accept a header on a different chain that has more work than the best header of the snapshot chain.\r\n\r\nThat would be a third approach. Keeping the \"Original chainstate targets the snapshot block\" logic, but then abandoning the snapshot and switching back to \"Original chainstate targets the most-work chain\" logic when some condition is detected. I'm not sure this approach has advantages over always targeting the most-work chain, but it could, depending on the implementation details.\r\n\r\nI'm also not sure just the existence of headers with the most work not including the snapshot block is a good enough reason to refuse loading the snapshot, or to delete the snapshot chainstate after a snapshot is loaded. It could be weird if the other chain that seemed to have more work turned out to be invalid, or more headers were received later that actually included the snapshot block allowed loading the snapshot again after it had previously been discarded or refused.\r\n\r\nIn general, just letting original chainstate sync to most-work chain, regardless of whether a snapshot chainstate is loaded seems like the simplest approach with the fewest special cases, and doesn't seem to have significant drawbacks?",
      "created_at" : "2024-06-14T20:23:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/30288#issuecomment-2168713360",
      "id" : 2168713360,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30288",
      "node_id" : "IC_kwDOABII586BQ_CQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2168713360/reactions"
      },
      "updated_at" : "2024-06-14T20:23:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2168713360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
