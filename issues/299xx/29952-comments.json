[
   {
      "author_association" : "MEMBER",
      "body" : "Possibly. Someone will first need to test it on FreeBSD and mingw-w64. Given we still assume those implementations to be broken.",
      "created_at" : "2024-04-24T13:21:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2074938316",
      "id" : 2074938316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5857rQvM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2074938316/reactions"
      },
      "updated_at" : "2024-04-24T13:21:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2074938316",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I couldn't get wine running locally, so my testing failed. But given that we require a C++20 compiler, I'd be surprised if there is still a platform out there that hasn't correctly implemented C++11 at this point.\r\n\r\nI presume, at least for the mingw issue, the existing unit tests should detect the issue, as I presume the `RenameEnMasse` unit test is equivalent to the C++ shared in the linked gist?",
      "created_at" : "2024-04-24T13:31:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2074959708",
      "id" : 2074959708,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5857rV9c",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2074959708/reactions"
      },
      "updated_at" : "2024-04-24T13:31:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2074959708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK (if indeed all platforms we care about can do this now, including mingw)",
      "created_at" : "2024-04-25T11:43:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2076987731",
      "id" : 2076987731,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5857zFFT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2076987731/reactions"
      },
      "updated_at" : "2024-04-25T11:43:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2076987731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I couldn't get wine running locally\r\n\r\nI hopped into the win64 CI container and ran https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605 there. It passed.\r\n\r\nBut given that the previous test was done on Trusty (14.04?), it will probably be hard to check when it started passing.",
      "created_at" : "2024-04-25T12:29:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2077068853",
      "id" : 2077068853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5857zY41",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2077068853/reactions"
      },
      "updated_at" : "2024-04-25T12:29:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2077068853",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@vasild Do you know if C++11 thread-local storage is still broken on FreeBSD?",
      "created_at" : "2024-04-26T12:35:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2079302092",
      "id" : 2079302092,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII585776HM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079302092/reactions"
      },
      "updated_at" : "2024-04-26T12:35:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079302092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> FreeBSD\r\n\r\nI am not familiar with the *BSD, but is there indication that OpenBSD or NetBSD are unaffected? What are the steps to test this?",
      "created_at" : "2024-04-26T12:39:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2079308571",
      "id" : 2079308571,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII585777sb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079308571/reactions"
      },
      "updated_at" : "2024-04-26T12:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079308571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/blob/7973a670915632b75a6aa16f24f98b936865c48f/configure.ac#L1054-L1057\r\n\r\nThe file https://github.com/freebsd/freebsd-src/blob/master/lib/libc/stdlib/cxa_thread_atexit_impl.c has not been changed since 2017.\r\n\r\nRunning the unit tests on FreeBSD with thread_local enabled (had to edit `configure.ac`) prints a bunch of those:\r\n```\r\n__cxa_thread_call_dtors: dtr 0x375164b2d70 from unloaded dso, skipping\r\n```\r\nwhich is at least annoying and scary.\r\n\r\nWe only use `thread_local` for storing the thread name in `std::string`. Can use dumb `char` array for this:\r\n\r\n<details>\r\n<summary>[patch] avoid thread_local with std::string</summary>\r\n\r\n```diff\r\ndiff --git i/configure.ac w/configure.ac\r\nindex febb352cdb..3eb58e2558 100644\r\n--- i/configure.ac\r\n+++ w/configure.ac\r\n@@ -1047,17 +1047,12 @@ if test \"$use_thread_local\" = \"yes\" || test \"$use_thread_local\" = \"auto\"; then\r\n        *mingw*)\r\n           dnl mingw32's implementation of thread_local has also been shown to behave\r\n           dnl erroneously under concurrent usage; see:\r\n           dnl https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\r\n           AC_MSG_RESULT([no])\r\n           ;;\r\n-        *freebsd*)\r\n-          dnl FreeBSD's implementation of thread_local is also buggy (per\r\n-          dnl https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\r\n-          AC_MSG_RESULT([no])\r\n-          ;;\r\n         *)\r\n           AC_DEFINE([HAVE_THREAD_LOCAL], [1], [Define if thread_local is supported.])\r\n           AC_MSG_RESULT([yes])\r\n           ;;\r\n       esac\r\n     ],\r\ndiff --git i/src/logging.cpp w/src/logging.cpp\r\nindex 578650f856..1582bc1a17 100644\r\n--- i/src/logging.cpp\r\n+++ w/src/logging.cpp\r\n@@ -358,13 +358,13 @@ void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& loggi\r\n     if (m_log_sourcelocations && m_started_new_line) {\r\n         str_prefixed.insert(0, \"[\" + RemovePrefix(source_file, \"./\") + \":\" + ToString(source_line) + \"] [\" + logging_function + \"] \");\r\n     }\r\n \r\n     if (m_log_threadnames && m_started_new_line) {\r\n         const auto& threadname = util::ThreadGetInternalName();\r\n-        str_prefixed.insert(0, \"[\" + (threadname.empty() ? \"unknown\" : threadname) + \"] \");\r\n+        str_prefixed.insert(0, std::string{\"[\"} + (std::strlen(threadname) == 0 ? \"unknown\" : threadname) + \"] \");\r\n     }\r\n \r\n     str_prefixed = LogTimestampStr(str_prefixed);\r\n \r\n     m_started_new_line = !str.empty() && str[str.size()-1] == '\\n';\r\n \r\ndiff --git i/src/sync.cpp w/src/sync.cpp\r\nindex a8bdfc1dea..5fa9fbb7c0 100644\r\n--- i/src/sync.cpp\r\n+++ w/src/sync.cpp\r\n@@ -34,13 +34,13 @@\r\n struct CLockLocation {\r\n     CLockLocation(\r\n         const char* pszName,\r\n         const char* pszFile,\r\n         int nLine,\r\n         bool fTryIn,\r\n-        const std::string& thread_name)\r\n+        const char* thread_name)\r\n         : fTry(fTryIn),\r\n           mutexName(pszName),\r\n           sourceFile(pszFile),\r\n           m_thread_name(thread_name),\r\n           sourceLine(nLine) {}\r\n \r\n@@ -57,13 +57,13 @@ struct CLockLocation {\r\n     }\r\n \r\n private:\r\n     bool fTry;\r\n     std::string mutexName;\r\n     std::string sourceFile;\r\n-    const std::string& m_thread_name;\r\n+    const std::string m_thread_name;\r\n     int sourceLine;\r\n };\r\n \r\n using LockStackItem = std::pair<void*, CLockLocation>;\r\n using LockStack = std::vector<LockStackItem>;\r\n using LockStacks = std::unordered_map<std::thread::id, LockStack>;\r\ndiff --git i/src/util/threadnames.cpp w/src/util/threadnames.cpp\r\nindex 91883fe4ff..2bb12f9da1 100644\r\n--- i/src/util/threadnames.cpp\r\n+++ w/src/util/threadnames.cpp\r\n@@ -39,23 +39,26 @@ static void SetThreadName(const char* name)\r\n }\r\n \r\n // If we have thread_local, just keep thread ID and name in a thread_local\r\n // global.\r\n #if defined(HAVE_THREAD_LOCAL)\r\n \r\n-static thread_local std::string g_thread_name;\r\n-const std::string& util::ThreadGetInternalName() { return g_thread_name; }\r\n+static thread_local char g_thread_name[128] = {'\\0'};\r\n+const char* util::ThreadGetInternalName() { return g_thread_name; }\r\n //! Set the in-memory internal name for this thread. Does not affect the process\r\n //! name.\r\n-static void SetInternalName(std::string name) { g_thread_name = std::move(name); }\r\n+static void SetInternalName(std::string name)\r\n+{\r\n+    std::memcpy(g_thread_name, name.c_str(), std::min(sizeof(g_thread_name), name.length() + 1));\r\n+    g_thread_name[sizeof(g_thread_name) - 1] = '\\0';\r\n+}\r\n \r\n // Without thread_local available, don't handle internal name at all.\r\n #else\r\n \r\n-static const std::string empty_string;\r\n-const std::string& util::ThreadGetInternalName() { return empty_string; }\r\n+const char* util::ThreadGetInternalName() { return \"\"; }\r\n static void SetInternalName(std::string name) { }\r\n #endif\r\n \r\n void util::ThreadRename(std::string&& name)\r\n {\r\n     SetThreadName((\"b-\" + name).c_str());\r\ndiff --git i/src/util/threadnames.h w/src/util/threadnames.h\r\nindex 64b2689cf1..a5b7581e99 100644\r\n--- i/src/util/threadnames.h\r\n+++ w/src/util/threadnames.h\r\n@@ -16,11 +16,11 @@ void ThreadRename(std::string&&);\r\n \r\n //! Set the internal (in-memory) name of the current thread only.\r\n void ThreadSetInternalName(std::string&&);\r\n \r\n //! Get the thread's internal (in-memory) name; used e.g. for identification in\r\n //! logging.\r\n-const std::string& ThreadGetInternalName();\r\n+const char* ThreadGetInternalName();\r\n \r\n } // namespace util\r\n \r\n #endif // BITCOIN_UTIL_THREADNAMES_H\r\n```\r\n</details>",
      "created_at" : "2024-04-26T17:12:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2079776241",
      "id" : 2079776241,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII58579t3x",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079776241/reactions"
      },
      "updated_at" : "2024-04-26T17:12:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079776241",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> We only use `thread_local` for storing the thread name in `std::string`. Can use dumb `char` array for this:\r\n\r\nIf this works, then string_view may also work? Yet another alternative may be to just completely nuke thread_local with a map from id to $obj (See https://github.com/bitcoin/bitcoin/issues/18678#issuecomment-621717592)",
      "created_at" : "2024-04-27T08:08:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2080410522",
      "id" : 2080410522,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5858AIua",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080410522/reactions"
      },
      "updated_at" : "2024-04-27T08:08:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080410522",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "i think the main problem with the map approach is that it doesn't clean up data when threads disappear, this is something that TLS handles automatically, and also why it's so hard for platforms to get right",
      "created_at" : "2024-04-27T08:16:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2080412606",
      "id" : 2080412606,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5858AJO-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080412606/reactions"
      },
      "updated_at" : "2024-04-27T08:16:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2080412606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It just occurred to me on Friday evening and I forgot about this during the weekend - we may have a bug in our code and FreeBSD may just be the messenger - we return a reference to the `thread_local`, store it in `CLockLocation`, from there in the global `lockdata` / `lock_stack`. It looks like the reference in `lockdata` may still be existent after the thread has exited.\r\n\r\n@maflcko, thanks for the `string_view` hint!",
      "created_at" : "2024-04-30T06:52:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2084511638",
      "id" : 2084511638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5858Px-W",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2084511638/reactions"
      },
      "updated_at" : "2024-04-30T06:52:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2084511638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This is indeed some problem in FreeBSD's libc which I reported upstream with a minimal, reproducable test case:\r\n\r\nhttps://bugs.freebsd.org/bugzilla/show_bug.cgi?id=278701\r\n\r\nIs anybody interested in reviewing the patch I posted above if I PR it:\r\nhttps://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2079776241\r\nreworked to return `std::string_view` to the callers, but still storing the thread name in a `thread_local char []`? That would work around the FreeBSD weird message printout because the `thread_local` variable will not have a destructor.\r\n\r\nAs for storing a reference to `thread_local` in a global variable - that is dangerous and should be avoided IMO. I checked that there is no bug currently in the code but it looks fragile.",
      "created_at" : "2024-05-02T18:56:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2091280337",
      "id" : 2091280337,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5858pmfR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2091280337/reactions"
      },
      "updated_at" : "2024-05-02T18:57:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2091280337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> reworked to return std::string_view to the callers, but still storing the thread name in a thread_local char []?\r\n\r\nYes. i think (for this one very rare exception) it's acceptable to store a string in a fixed-size buffer. To not need a destructor and heap deallocation when a thread goes away, works around a large part of the complexity of handling thread-local data.\r\n\r\nAnd making it use `string_view` throughout the changed functions instead of `char*` is a good idea, a lot less ugly.\r\n\r\n> As for storing a reference to thread_local in a global variable - that is dangerous and should be avoided IMO. I checked that there is no bug currently in the code but it looks fragile.\r\n\r\nAgree. The memory can go away at any time when the thread goes away, and it will be a dangling reference. It's brittle.",
      "created_at" : "2024-05-02T19:18:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/29952#issuecomment-2091354481",
      "id" : 2091354481,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29952",
      "node_id" : "IC_kwDOABII5858p4lx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2091354481/reactions"
      },
      "updated_at" : "2024-05-02T19:28:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2091354481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
