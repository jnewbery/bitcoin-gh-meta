[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28423](https://github.com/bitcoin/bitcoin/pull/28423) (kernel: Remove protocol.h/netaddress.h/compat.h from kernel headers by TheCharlatan)\n* [#28246](https://github.com/bitcoin/bitcoin/pull/28246) (wallet: Use CTxDestination in CRecipient instead of just scriptPubKey by achow101)\n* [#28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#28122](https://github.com/bitcoin/bitcoin/pull/28122) (Silent Payments: Implement BIP352 by josibake)\n* [#27331](https://github.com/bitcoin/bitcoin/pull/27331) (refactor: extract CCheckQueue's data handling into a separate container \"Bag\" by martinus)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-03-15T10:17:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1469730255",
      "id" : 1469730255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585Xmk3P",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469730255/reactions"
      },
      "updated_at" : "2023-09-07T21:35:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469730255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1136867843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136867843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure why this is being removed",
      "commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "created_at" : "2023-03-15T10:53:03Z",
      "diff_hunk" : "@@ -1,4 +1,3 @@\n-#!/usr/bin/env python3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1136867843",
      "id" : 1136867843,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DwzoD",
      "original_commit_id" : "0b5cd1ef67fe497c8c61082e66d956ef74269e88",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "test/functional/rpc_invalid_address_message.py",
      "position" : null,
      "pull_request_review_id" : 1341174211,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136867843/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-15T10:54:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136867843",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Please keep your changes, and \"fixes\" commits squashed. Looks like your changing the file perms on at least one file, is that intentional?",
      "created_at" : "2023-03-15T10:54:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1469784160",
      "id" : 1469784160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585XmyBg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469784160/reactions"
      },
      "updated_at" : "2023-03-15T10:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469784160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1136873703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136873703"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This was removed because the linter was throwing on the file permissions and that was the suggestion. I never deliberately changed any perms or ran anything as sudo. \r\n\r\nEdit: I know exactly what happened. This will be resolved.\r\nEdit 2: This has been resolved a result of a scp command from one host to another.",
      "commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "created_at" : "2023-03-15T10:58:04Z",
      "diff_hunk" : "@@ -1,4 +1,3 @@\n-#!/usr/bin/env python3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1136873703",
      "id" : 1136873703,
      "in_reply_to_id" : 1136867843,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Dw1Dn",
      "original_commit_id" : "0b5cd1ef67fe497c8c61082e66d956ef74269e88",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "test/functional/rpc_invalid_address_message.py",
      "position" : null,
      "pull_request_review_id" : 1341187139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136873703/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-15T11:12:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1136873703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Please keep your changes, and \"fixes\" commits squashed. Looks like your changing the file perms on at least one file, is that intentional?\r\n\r\nWill do. No it was not intentional but was a side effect of moving 3 files over scp to a different host. This has been resolved and commits squashed. ",
      "created_at" : "2023-03-15T11:14:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1469815375",
      "id" : 1469815375,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585Xm5pP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469815375/reactions"
      },
      "updated_at" : "2023-03-15T11:14:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469815375",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase on current master, if still relevant",
      "created_at" : "2023-05-18T14:19:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1553133965",
      "id" : 1553133965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585ckvGN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553133965/reactions"
      },
      "updated_at" : "2023-05-18T14:19:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553133965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Needs rebase on current master, if still relevant\r\n\r\nI believe this PR is still very relevant because it substantially improves the logic around address decoding and specifically the displaying of errors in the GUI and RPC. With that said I have rebased and this code is passing all tests other than `Win64 native [vs2022]` which seems to be failing for the majority of PRs that are on master due to warnings.",
      "created_at" : "2023-05-19T06:21:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1554067822",
      "id" : 1554067822,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585coTFu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554067822/reactions"
      },
      "updated_at" : "2023-05-19T06:21:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554067822",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks, the reason I mentioned it was the silent merge conflict: `key_io.cpp:152:48: error: âconst class CChainParamsâ has no member named âNetworkIDStringâ`, which is now fixed",
      "created_at" : "2023-05-19T06:25:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1554070439",
      "id" : 1554070439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585coTun",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554070439/reactions"
      },
      "updated_at" : "2023-05-19T06:25:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554070439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Thanks, the reason I mentioned it was the silent merge conflict: `key_io.cpp:152:48: error: âconst class CChainParamsâ has no member named âNetworkIDStringâ`, which is now fixed\r\n\r\nIs there a good way to detect these silent conflicts earlier? Usually I get notified via email when there are issues that need rebased; this is the first time one has happened without a notification. \r\n\r\nThanks",
      "created_at" : "2023-05-19T06:30:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1554074157",
      "id" : 1554074157,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585coUot",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554074157/reactions"
      },
      "updated_at" : "2023-05-19T06:30:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1554074157",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239033958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239033958"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The prefix does not necessarily indicate a chain. The current error is more correct.",
      "commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "created_at" : "2023-06-22T21:09:54Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;\n+            if (!is_bech32) {\n+                auto [bech32ErrorStr, bech32ErrorLoc] = bech32DecodeErrors;\n+                bech32DecodeErrors = bech32::LocateErrors(str);\n+                is_validBech32Chars = (bech32ErrorStr != \"Invalid Base 32 character\" &&\n+                                       bech32ErrorStr != \"Invalid character or mixed case\" &&\n+                                       bech32ErrorStr != \"Invalid separator position\");\n+            } else {\n+                is_validBech32Chars = true;\n+            }\n+        }\n+    };\n+\n+    decodeState Decoded{str, params.GetChainTypeString()};\n+    // Direct bindings (alais) to members of Decoded\n+    auto& bech32Encoding = Decoded.bech32DecodeResult.encoding;\n+    auto& bech32Hrp = Decoded.bech32DecodeResult.hrp;\n+    auto& bech32Chars = Decoded.bech32DecodeResult.data;\n+    auto& bech32Error = Decoded.bech32DecodeErrors.first;\n+    auto& bech32ErrorLoc = Decoded.bech32DecodeErrors.second;\n+    auto& is_bech32 = Decoded.is_bech32;\n+    auto& is_base58 = Decoded.is_base58;\n+    auto& is_base58Check = Decoded.is_base58Check;\n+    auto& is_validBech32Chars = Decoded.is_validBech32Chars;\n+    auto& base58Data = Decoded.base58DataCheck;\n+    auto& bech32Data = Decoded.bech32Data;\n+    auto& networkLabel = Decoded.networkLabel;\n+\n+    // If this is not 'bech32(m)' attempt to decode why for error reporting\n+    if (!is_bech32 && is_base58Check) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        // The base58Data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + pubkey_prefix.size(), base58Data.end(), hash.begin());\n             return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        // The base58Data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + script_prefix.size(), base58Data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n-\n         // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n-        if ((data.size() >= script_prefix.size() &&\n-                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n-            (data.size() >= pubkey_prefix.size() &&\n-                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n+        if ((base58Data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) ||\n+            (base58Data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin()))) {\n             error_str = \"Invalid length for Base58 address (P2PKH or P2SH)\";\n         } else {\n-            error_str = \"Invalid or unsupported Base58-encoded address.\";\n+            std::string chainPrefixes = params.GetChainTypeString() == \"main\" ? \"1 or 3\" : \"m, n, or 2\";\n+            error_str = strprintf(\"Invalid or unsupported Base58 %s address. Expected prefix %s\", networkLabel, chainPrefixes);\n         }\n         return CNoDestination();\n     } else if (!is_bech32) {\n-        // Try Base58 decoding without the checksum, using a much larger max length\n-        if (!DecodeBase58(str, data, 100)) {\n-            error_str = \"Invalid or unsupported Segwit (Bech32) or Base58 encoding.\";\n-        } else {\n-            error_str = \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+        if (!is_base58) {\n+            error_str = is_validBech32Chars ? \"Bech32(m) address decoded with error: \" + bech32Error : \"Address is not valid Base58 or Bech32\";\n+            if (error_locations) *error_locations = std::move(bech32ErrorLoc);\n+        }\n+        else {\n+            error_str = is_validBech32Chars\n+                ? \"Invalid address encoded as Base58 and Bech32(m) provided\"\n+                : \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+            if (is_validBech32Chars && error_locations) {\n+                *error_locations = std::move(bech32ErrorLoc);\n+            }\n         }\n         return CNoDestination();\n     }\n \n-    data.clear();\n-    const auto dec = bech32::Decode(str);\n-    if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0) {\n+    if ((bech32Encoding == bech32::Encoding::BECH32 || bech32Encoding == bech32::Encoding::BECH32M) && bech32Chars.size() > 0) {\n         // Bech32 decoding\n-        if (dec.hrp != params.Bech32HRP()) {\n-            error_str = strprintf(\"Invalid or unsupported prefix for Segwit (Bech32) address (expected %s, got %s).\", params.Bech32HRP(), dec.hrp);\n+        if (bech32Hrp != params.Bech32HRP()) {\n+            error_str = strprintf(\"Invalid chain prefix for %s. Expected %s got %s\", networkLabel, params.Bech32HRP(), bech32Hrp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239033958",
      "id" : 1239033958,
      "line" : 176,
      "node_id" : "PRRC_kwDOABII585J2ihm",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 176,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : 126,
      "pull_request_review_id" : 1494002400,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239033958/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-22T21:12:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239033958",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239034595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239034595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Bitcoin shouldn't be called \"mainnet\" in user-facing errors.",
      "commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "created_at" : "2023-06-22T21:10:47Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239034595",
      "id" : 1239034595,
      "line" : 101,
      "node_id" : "PRRC_kwDOABII585J2irj",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 101,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : 29,
      "pull_request_review_id" : 1494002400,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239034595/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-22T21:12:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239034595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239035489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239035489"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Feels kind of ugly to hard-code the prefixes here.",
      "commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "created_at" : "2023-06-22T21:12:08Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;\n+            if (!is_bech32) {\n+                auto [bech32ErrorStr, bech32ErrorLoc] = bech32DecodeErrors;\n+                bech32DecodeErrors = bech32::LocateErrors(str);\n+                is_validBech32Chars = (bech32ErrorStr != \"Invalid Base 32 character\" &&\n+                                       bech32ErrorStr != \"Invalid character or mixed case\" &&\n+                                       bech32ErrorStr != \"Invalid separator position\");\n+            } else {\n+                is_validBech32Chars = true;\n+            }\n+        }\n+    };\n+\n+    decodeState Decoded{str, params.GetChainTypeString()};\n+    // Direct bindings (alais) to members of Decoded\n+    auto& bech32Encoding = Decoded.bech32DecodeResult.encoding;\n+    auto& bech32Hrp = Decoded.bech32DecodeResult.hrp;\n+    auto& bech32Chars = Decoded.bech32DecodeResult.data;\n+    auto& bech32Error = Decoded.bech32DecodeErrors.first;\n+    auto& bech32ErrorLoc = Decoded.bech32DecodeErrors.second;\n+    auto& is_bech32 = Decoded.is_bech32;\n+    auto& is_base58 = Decoded.is_base58;\n+    auto& is_base58Check = Decoded.is_base58Check;\n+    auto& is_validBech32Chars = Decoded.is_validBech32Chars;\n+    auto& base58Data = Decoded.base58DataCheck;\n+    auto& bech32Data = Decoded.bech32Data;\n+    auto& networkLabel = Decoded.networkLabel;\n+\n+    // If this is not 'bech32(m)' attempt to decode why for error reporting\n+    if (!is_bech32 && is_base58Check) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        // The base58Data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + pubkey_prefix.size(), base58Data.end(), hash.begin());\n             return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        // The base58Data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + script_prefix.size(), base58Data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n-\n         // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n-        if ((data.size() >= script_prefix.size() &&\n-                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n-            (data.size() >= pubkey_prefix.size() &&\n-                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n+        if ((base58Data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) ||\n+            (base58Data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin()))) {\n             error_str = \"Invalid length for Base58 address (P2PKH or P2SH)\";\n         } else {\n-            error_str = \"Invalid or unsupported Base58-encoded address.\";\n+            std::string chainPrefixes = params.GetChainTypeString() == \"main\" ? \"1 or 3\" : \"m, n, or 2\";\n+            error_str = strprintf(\"Invalid or unsupported Base58 %s address. Expected prefix %s\", networkLabel, chainPrefixes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239035489",
      "id" : 1239035489,
      "line" : 154,
      "node_id" : "PRRC_kwDOABII585J2i5h",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 154,
      "original_position" : 94,
      "original_start_line" : 153,
      "path" : "src/key_io.cpp",
      "position" : 94,
      "pull_request_review_id" : 1494002400,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239035489/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 153,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-22T21:12:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239035489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239531230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239531230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This has been resolved by adding a function to chaintype.cpp called ChainTypeToDisplayString. This decodes the ChainType Enum into user-facing strings. Including using 'Bitcoin' to reference mainnet\r\n\r\nImpoper chain errors are now displayed  for example \r\n```\"error\": \"Invalid chain prefix for Bitcoin. Expected bc got tb\"```",
      "commit_id" : "b5374c029e885c43e0a20d318aed5bdf20c671bc",
      "created_at" : "2023-06-23T08:31:39Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239531230",
      "id" : 1239531230,
      "in_reply_to_id" : 1239034595,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585J4b7e",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 101,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1494703571,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239531230/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-23T08:31:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239531230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239533282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239533282"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This has been resolved by rewording the error message since you are correct addresses have prefixes not chains. \r\n\r\n```Invalid prefix for regtest address (expected bcrt, got bc)```",
      "commit_id" : "b5374c029e885c43e0a20d318aed5bdf20c671bc",
      "created_at" : "2023-06-23T08:33:39Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;\n+            if (!is_bech32) {\n+                auto [bech32ErrorStr, bech32ErrorLoc] = bech32DecodeErrors;\n+                bech32DecodeErrors = bech32::LocateErrors(str);\n+                is_validBech32Chars = (bech32ErrorStr != \"Invalid Base 32 character\" &&\n+                                       bech32ErrorStr != \"Invalid character or mixed case\" &&\n+                                       bech32ErrorStr != \"Invalid separator position\");\n+            } else {\n+                is_validBech32Chars = true;\n+            }\n+        }\n+    };\n+\n+    decodeState Decoded{str, params.GetChainTypeString()};\n+    // Direct bindings (alais) to members of Decoded\n+    auto& bech32Encoding = Decoded.bech32DecodeResult.encoding;\n+    auto& bech32Hrp = Decoded.bech32DecodeResult.hrp;\n+    auto& bech32Chars = Decoded.bech32DecodeResult.data;\n+    auto& bech32Error = Decoded.bech32DecodeErrors.first;\n+    auto& bech32ErrorLoc = Decoded.bech32DecodeErrors.second;\n+    auto& is_bech32 = Decoded.is_bech32;\n+    auto& is_base58 = Decoded.is_base58;\n+    auto& is_base58Check = Decoded.is_base58Check;\n+    auto& is_validBech32Chars = Decoded.is_validBech32Chars;\n+    auto& base58Data = Decoded.base58DataCheck;\n+    auto& bech32Data = Decoded.bech32Data;\n+    auto& networkLabel = Decoded.networkLabel;\n+\n+    // If this is not 'bech32(m)' attempt to decode why for error reporting\n+    if (!is_bech32 && is_base58Check) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        // The base58Data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + pubkey_prefix.size(), base58Data.end(), hash.begin());\n             return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        // The base58Data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + script_prefix.size(), base58Data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n-\n         // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n-        if ((data.size() >= script_prefix.size() &&\n-                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n-            (data.size() >= pubkey_prefix.size() &&\n-                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n+        if ((base58Data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) ||\n+            (base58Data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin()))) {\n             error_str = \"Invalid length for Base58 address (P2PKH or P2SH)\";\n         } else {\n-            error_str = \"Invalid or unsupported Base58-encoded address.\";\n+            std::string chainPrefixes = params.GetChainTypeString() == \"main\" ? \"1 or 3\" : \"m, n, or 2\";\n+            error_str = strprintf(\"Invalid or unsupported Base58 %s address. Expected prefix %s\", networkLabel, chainPrefixes);\n         }\n         return CNoDestination();\n     } else if (!is_bech32) {\n-        // Try Base58 decoding without the checksum, using a much larger max length\n-        if (!DecodeBase58(str, data, 100)) {\n-            error_str = \"Invalid or unsupported Segwit (Bech32) or Base58 encoding.\";\n-        } else {\n-            error_str = \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+        if (!is_base58) {\n+            error_str = is_validBech32Chars ? \"Bech32(m) address decoded with error: \" + bech32Error : \"Address is not valid Base58 or Bech32\";\n+            if (error_locations) *error_locations = std::move(bech32ErrorLoc);\n+        }\n+        else {\n+            error_str = is_validBech32Chars\n+                ? \"Invalid address encoded as Base58 and Bech32(m) provided\"\n+                : \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+            if (is_validBech32Chars && error_locations) {\n+                *error_locations = std::move(bech32ErrorLoc);\n+            }\n         }\n         return CNoDestination();\n     }\n \n-    data.clear();\n-    const auto dec = bech32::Decode(str);\n-    if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0) {\n+    if ((bech32Encoding == bech32::Encoding::BECH32 || bech32Encoding == bech32::Encoding::BECH32M) && bech32Chars.size() > 0) {\n         // Bech32 decoding\n-        if (dec.hrp != params.Bech32HRP()) {\n-            error_str = strprintf(\"Invalid or unsupported prefix for Segwit (Bech32) address (expected %s, got %s).\", params.Bech32HRP(), dec.hrp);\n+        if (bech32Hrp != params.Bech32HRP()) {\n+            error_str = strprintf(\"Invalid chain prefix for %s. Expected %s got %s\", networkLabel, params.Bech32HRP(), bech32Hrp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1239533282",
      "id" : 1239533282,
      "in_reply_to_id" : 1239033958,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585J4cbi",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 176,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1494706560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239533282/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-23T08:33:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1239533282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1257799964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257799964"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "8f2e548f6276386c27a60336cf12665d5e316fb7 solves this via the addition of a function to deterministically calculate the range set of  encoded base58 prefixes that result from a version byte(s). The requirements are the length of bytes that are encoded and the desired prefix bytes as a vector.\r\n\r\nAs a side note thanks for suggesting this as a review item, it was quite a fun problem to think about and implement a solution for.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/8f2e548f6276386c27a60336cf12665d5e316fb7/src/util/base58address.cpp#L10\r\n\r\n",
      "commit_id" : "8f2e548f6276386c27a60336cf12665d5e316fb7",
      "created_at" : "2023-07-10T06:55:28Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;\n+            if (!is_bech32) {\n+                auto [bech32ErrorStr, bech32ErrorLoc] = bech32DecodeErrors;\n+                bech32DecodeErrors = bech32::LocateErrors(str);\n+                is_validBech32Chars = (bech32ErrorStr != \"Invalid Base 32 character\" &&\n+                                       bech32ErrorStr != \"Invalid character or mixed case\" &&\n+                                       bech32ErrorStr != \"Invalid separator position\");\n+            } else {\n+                is_validBech32Chars = true;\n+            }\n+        }\n+    };\n+\n+    decodeState Decoded{str, params.GetChainTypeString()};\n+    // Direct bindings (alais) to members of Decoded\n+    auto& bech32Encoding = Decoded.bech32DecodeResult.encoding;\n+    auto& bech32Hrp = Decoded.bech32DecodeResult.hrp;\n+    auto& bech32Chars = Decoded.bech32DecodeResult.data;\n+    auto& bech32Error = Decoded.bech32DecodeErrors.first;\n+    auto& bech32ErrorLoc = Decoded.bech32DecodeErrors.second;\n+    auto& is_bech32 = Decoded.is_bech32;\n+    auto& is_base58 = Decoded.is_base58;\n+    auto& is_base58Check = Decoded.is_base58Check;\n+    auto& is_validBech32Chars = Decoded.is_validBech32Chars;\n+    auto& base58Data = Decoded.base58DataCheck;\n+    auto& bech32Data = Decoded.bech32Data;\n+    auto& networkLabel = Decoded.networkLabel;\n+\n+    // If this is not 'bech32(m)' attempt to decode why for error reporting\n+    if (!is_bech32 && is_base58Check) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        // The base58Data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + pubkey_prefix.size(), base58Data.end(), hash.begin());\n             return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        // The base58Data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + script_prefix.size(), base58Data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n-\n         // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n-        if ((data.size() >= script_prefix.size() &&\n-                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n-            (data.size() >= pubkey_prefix.size() &&\n-                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n+        if ((base58Data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) ||\n+            (base58Data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin()))) {\n             error_str = \"Invalid length for Base58 address (P2PKH or P2SH)\";\n         } else {\n-            error_str = \"Invalid or unsupported Base58-encoded address.\";\n+            std::string chainPrefixes = params.GetChainTypeString() == \"main\" ? \"1 or 3\" : \"m, n, or 2\";\n+            error_str = strprintf(\"Invalid or unsupported Base58 %s address. Expected prefix %s\", networkLabel, chainPrefixes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1257799964",
      "id" : 1257799964,
      "in_reply_to_id" : 1239035489,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585K-IEc",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 154,
      "original_position" : 94,
      "original_start_line" : 153,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1521371671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257799964/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-10T06:55:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257799964",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR has had some substantial updates applied since it's first inception. \r\n\r\n1. Deterministically calculated base58 prefixes with the function ```EncodedPrefixesFromBase58Prefix```\r\n\r\n3. This PR now greatly improves the accuracy of error reporting as seen in the updates to 3d0a5c37e9ccedfa4ecfaa48eeeca1ada5b4eec1 where many valid bech32 tests are fed through the base58 section of the `DecodeDestination` function. This line gives a great example of how this PR addresses this from the current\r\nhttps://github.com/bitcoin/bitcoin/blob/79e8247ddb166f9b980f40249b7372a502402a4d/test/functional/rpc_validateaddress.py#L11-L17 Into a much more accurate representaion.\r\nhttps://github.com/bitcoin/bitcoin/blob/8f2e548f6276386c27a60336cf12665d5e316fb7/test/functional/rpc_validateaddress.py#L11-L17 This follows up even further to the changes made in https://github.com/bitcoin/bitcoin/pull/27727\r\n\r\n4. A function `ChainTypeToDisplayString(ChainType chain)` has been added to give user facing display names for the various chains a Bitcoin client can attach themselves to. \r\nhttps://github.com/bitcoin/bitcoin/blob/8f2e548f6276386c27a60336cf12665d5e316fb7/src/util/chaintype.cpp#L11-L23\r\n\r\nAs a note this PR solves a fundamental issue in the current address validation scheme that if a user inputs anything bech32 with the wrong hrp it's immediately treated as base58 even though it is valid bech32.\r\n",
      "created_at" : "2023-07-10T07:15:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1628375439",
      "id" : 1628375439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585hDwmP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1628375439/reactions"
      },
      "updated_at" : "2023-07-10T07:26:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1628375439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1276765179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1276765179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could just as well still be unsupported,  not invalid.",
      "commit_id" : "658d77d642a027f0a523529339f2f663b7d8b1a5",
      "created_at" : "2023-07-27T20:01:49Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;\n+            if (!is_bech32) {\n+                auto [bech32ErrorStr, bech32ErrorLoc] = bech32DecodeErrors;\n+                bech32DecodeErrors = bech32::LocateErrors(str);\n+                is_validBech32Chars = (bech32ErrorStr != \"Invalid Base 32 character\" &&\n+                                       bech32ErrorStr != \"Invalid character or mixed case\" &&\n+                                       bech32ErrorStr != \"Invalid separator position\");\n+            } else {\n+                is_validBech32Chars = true;\n+            }\n+        }\n+    };\n+\n+    decodeState Decoded{str, params.GetChainTypeString()};\n+    // Direct bindings (alais) to members of Decoded\n+    auto& bech32Encoding = Decoded.bech32DecodeResult.encoding;\n+    auto& bech32Hrp = Decoded.bech32DecodeResult.hrp;\n+    auto& bech32Chars = Decoded.bech32DecodeResult.data;\n+    auto& bech32Error = Decoded.bech32DecodeErrors.first;\n+    auto& bech32ErrorLoc = Decoded.bech32DecodeErrors.second;\n+    auto& is_bech32 = Decoded.is_bech32;\n+    auto& is_base58 = Decoded.is_base58;\n+    auto& is_base58Check = Decoded.is_base58Check;\n+    auto& is_validBech32Chars = Decoded.is_validBech32Chars;\n+    auto& base58Data = Decoded.base58DataCheck;\n+    auto& bech32Data = Decoded.bech32Data;\n+    auto& networkLabel = Decoded.networkLabel;\n+\n+    // If this is not 'bech32(m)' attempt to decode why for error reporting\n+    if (!is_bech32 && is_base58Check) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        // The base58Data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + pubkey_prefix.size(), base58Data.end(), hash.begin());\n             return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        // The base58Data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + script_prefix.size(), base58Data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n-\n         // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n-        if ((data.size() >= script_prefix.size() &&\n-                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n-            (data.size() >= pubkey_prefix.size() &&\n-                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n+        if ((base58Data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) ||\n+            (base58Data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin()))) {\n             error_str = \"Invalid length for Base58 address (P2PKH or P2SH)\";\n         } else {\n-            error_str = \"Invalid or unsupported Base58-encoded address.\";\n+            std::string chainPrefixes = params.GetChainTypeString() == \"main\" ? \"1 or 3\" : \"m, n, or 2\";\n+            error_str = strprintf(\"Invalid or unsupported Base58 %s address. Expected prefix %s\", networkLabel, chainPrefixes);\n         }\n         return CNoDestination();\n     } else if (!is_bech32) {\n-        // Try Base58 decoding without the checksum, using a much larger max length\n-        if (!DecodeBase58(str, data, 100)) {\n-            error_str = \"Invalid or unsupported Segwit (Bech32) or Base58 encoding.\";\n-        } else {\n-            error_str = \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+        if (!is_base58) {\n+            error_str = is_validBech32Chars ? \"Bech32(m) address decoded with error: \" + bech32Error : \"Address is not valid Base58 or Bech32\";\n+            if (error_locations) *error_locations = std::move(bech32ErrorLoc);\n+        }\n+        else {\n+            error_str = is_validBech32Chars\n+                ? \"Invalid address encoded as Base58 and Bech32(m) provided\"\n+                : \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+            if (is_validBech32Chars && error_locations) {\n+                *error_locations = std::move(bech32ErrorLoc);\n+            }\n         }\n         return CNoDestination();\n     }\n \n-    data.clear();\n-    const auto dec = bech32::Decode(str);\n-    if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0) {\n+    if ((bech32Encoding == bech32::Encoding::BECH32 || bech32Encoding == bech32::Encoding::BECH32M) && bech32Chars.size() > 0) {\n         // Bech32 decoding\n-        if (dec.hrp != params.Bech32HRP()) {\n-            error_str = strprintf(\"Invalid or unsupported prefix for Segwit (Bech32) address (expected %s, got %s).\", params.Bech32HRP(), dec.hrp);\n+        if (bech32Hrp != params.Bech32HRP()) {\n+            error_str = strprintf(\"Invalid chain prefix for %s. Expected %s got %s\", networkLabel, params.Bech32HRP(), bech32Hrp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1276765179",
      "id" : 1276765179,
      "in_reply_to_id" : 1239033958,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MGeP7",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 176,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1550680170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1276765179/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-27T20:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1276765179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1277194218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277194218"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have changed this to read ```Invalid or unsupported prefix```... testing my own knowledge; The reason you can have an unsupported but still technically valid address would be in the event of a softfork to a new SegWit version? e.x. _a segwit client interpreting a taproot address would say \"invalid\"_ but that is not completely true because the address is valid. Just not supported by the client?\r\n\r\nThis has been resolved in b66e974ac8f21971602051c08df830d14cf3df7e",
      "commit_id" : "b66e974ac8f21971602051c08df830d14cf3df7e",
      "created_at" : "2023-07-28T07:13:02Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;\n+            if (!is_bech32) {\n+                auto [bech32ErrorStr, bech32ErrorLoc] = bech32DecodeErrors;\n+                bech32DecodeErrors = bech32::LocateErrors(str);\n+                is_validBech32Chars = (bech32ErrorStr != \"Invalid Base 32 character\" &&\n+                                       bech32ErrorStr != \"Invalid character or mixed case\" &&\n+                                       bech32ErrorStr != \"Invalid separator position\");\n+            } else {\n+                is_validBech32Chars = true;\n+            }\n+        }\n+    };\n+\n+    decodeState Decoded{str, params.GetChainTypeString()};\n+    // Direct bindings (alais) to members of Decoded\n+    auto& bech32Encoding = Decoded.bech32DecodeResult.encoding;\n+    auto& bech32Hrp = Decoded.bech32DecodeResult.hrp;\n+    auto& bech32Chars = Decoded.bech32DecodeResult.data;\n+    auto& bech32Error = Decoded.bech32DecodeErrors.first;\n+    auto& bech32ErrorLoc = Decoded.bech32DecodeErrors.second;\n+    auto& is_bech32 = Decoded.is_bech32;\n+    auto& is_base58 = Decoded.is_base58;\n+    auto& is_base58Check = Decoded.is_base58Check;\n+    auto& is_validBech32Chars = Decoded.is_validBech32Chars;\n+    auto& base58Data = Decoded.base58DataCheck;\n+    auto& bech32Data = Decoded.bech32Data;\n+    auto& networkLabel = Decoded.networkLabel;\n+\n+    // If this is not 'bech32(m)' attempt to decode why for error reporting\n+    if (!is_bech32 && is_base58Check) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        // The base58Data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + pubkey_prefix.size(), base58Data.end(), hash.begin());\n             return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        // The base58Data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + script_prefix.size(), base58Data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n-\n         // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n-        if ((data.size() >= script_prefix.size() &&\n-                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n-            (data.size() >= pubkey_prefix.size() &&\n-                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n+        if ((base58Data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) ||\n+            (base58Data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin()))) {\n             error_str = \"Invalid length for Base58 address (P2PKH or P2SH)\";\n         } else {\n-            error_str = \"Invalid or unsupported Base58-encoded address.\";\n+            std::string chainPrefixes = params.GetChainTypeString() == \"main\" ? \"1 or 3\" : \"m, n, or 2\";\n+            error_str = strprintf(\"Invalid or unsupported Base58 %s address. Expected prefix %s\", networkLabel, chainPrefixes);\n         }\n         return CNoDestination();\n     } else if (!is_bech32) {\n-        // Try Base58 decoding without the checksum, using a much larger max length\n-        if (!DecodeBase58(str, data, 100)) {\n-            error_str = \"Invalid or unsupported Segwit (Bech32) or Base58 encoding.\";\n-        } else {\n-            error_str = \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+        if (!is_base58) {\n+            error_str = is_validBech32Chars ? \"Bech32(m) address decoded with error: \" + bech32Error : \"Address is not valid Base58 or Bech32\";\n+            if (error_locations) *error_locations = std::move(bech32ErrorLoc);\n+        }\n+        else {\n+            error_str = is_validBech32Chars\n+                ? \"Invalid address encoded as Base58 and Bech32(m) provided\"\n+                : \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+            if (is_validBech32Chars && error_locations) {\n+                *error_locations = std::move(bech32ErrorLoc);\n+            }\n         }\n         return CNoDestination();\n     }\n \n-    data.clear();\n-    const auto dec = bech32::Decode(str);\n-    if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0) {\n+    if ((bech32Encoding == bech32::Encoding::BECH32 || bech32Encoding == bech32::Encoding::BECH32M) && bech32Chars.size() > 0) {\n         // Bech32 decoding\n-        if (dec.hrp != params.Bech32HRP()) {\n-            error_str = strprintf(\"Invalid or unsupported prefix for Segwit (Bech32) address (expected %s, got %s).\", params.Bech32HRP(), dec.hrp);\n+        if (bech32Hrp != params.Bech32HRP()) {\n+            error_str = strprintf(\"Invalid chain prefix for %s. Expected %s got %s\", networkLabel, params.Bech32HRP(), bech32Hrp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1277194218",
      "id" : 1277194218,
      "in_reply_to_id" : 1239033958,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MIG_q",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 176,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1551504554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277194218/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-28T07:13:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277194218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318735685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318735685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "89139d6b51a544d041a2783526c4744eeca7bc0f: nit, I prefer adding an underscore for new files, i.e. `base58_address.h`, but I don't think there's a rule for that.",
      "commit_id" : "5dbe9dc1a56d5505bee751fa63a0ac1d983a4a7c",
      "created_at" : "2023-09-07T14:52:55Z",
      "diff_hunk" : "@@ -0,0 +1,13 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BASE58ADDRESS_H",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318735685",
      "id" : 1318735685,
      "line" : 5,
      "node_id" : "PRRC_kwDOABII585Omk9F",
      "original_commit_id" : "89139d6b51a544d041a2783526c4744eeca7bc0f",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/util/base58address.h",
      "position" : 5,
      "pull_request_review_id" : 1615640495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318735685/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T15:05:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318735685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318741154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318741154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "89139d6b51a544d041a2783526c4744eeca7bc0f: can you add a Doxygen comment here? See e.g. [here](https://github.com/bitcoin/bitcoin/blob/b097a689ed4cdc9fb3e6fb08d22a25a73f5552b3/src/script/descriptor.h#L48-L54) for inspiration. \r\n\r\nAlso I assume this returns 1 prefix, so maybe call it `Base58PrefixFromVersionBytes`. Without reading the implementation I'm confused, because the function name suggests `base58Prefix` is an output, but the parameter suggests it's an input.",
      "commit_id" : "5dbe9dc1a56d5505bee751fa63a0ac1d983a4a7c",
      "created_at" : "2023-09-07T14:56:47Z",
      "diff_hunk" : "@@ -0,0 +1,13 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BASE58ADDRESS_H\n+#define BITCOIN_UTIL_BASE58ADDRESS_H\n+\n+#include <cstddef>\n+#include <vector>\n+\n+std::vector<char> Base58PrefixesFromVersionBytes(size_t length, std::vector<unsigned char> base58Prefix);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318741154",
      "id" : 1318741154,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII585OmmSi",
      "original_commit_id" : "89139d6b51a544d041a2783526c4744eeca7bc0f",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/util/base58address.h",
      "position" : 11,
      "pull_request_review_id" : 1615640495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318741154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T15:05:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318741154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318746384"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318746384"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fa0ed7796fb9553c0458c7bc534f73441a991b0d: nit, don't touch unrelated things (may need to adjust your editor to not automatically do that).",
      "commit_id" : "5dbe9dc1a56d5505bee751fa63a0ac1d983a4a7c",
      "created_at" : "2023-09-07T15:00:42Z",
      "diff_hunk" : "@@ -109,10 +109,12 @@ class CChainParams\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Minimum free space (in GB) needed for data directory */\n     uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n-    /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target*/\n+    /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318746384",
      "id" : 1318746384,
      "line" : 112,
      "node_id" : "PRRC_kwDOABII585OmnkQ",
      "original_commit_id" : "fa0ed7796fb9553c0458c7bc534f73441a991b0d",
      "original_line" : 112,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/kernel/chainparams.h",
      "position" : 5,
      "pull_request_review_id" : 1615640495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318746384/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T15:05:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318746384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318755828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318755828"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Doesn't even have to be a soft fork. E.g. a silent payment address (#27827) has a prefix we don't support (yet), but it's not a soft fork. It's also not a different network.",
      "commit_id" : "5dbe9dc1a56d5505bee751fa63a0ac1d983a4a7c",
      "created_at" : "2023-09-07T15:07:55Z",
      "diff_hunk" : "@@ -78,82 +78,128 @@ class DestinationEncoder\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n-    std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n \n-    // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n-\n-    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n+    struct decodeState {\n+        const bech32::DecodeResult bech32DecodeResult;\n+        uint8_t maxBase58CheckChars = 21;\n+        uint8_t maxBase58Chars = 100;\n+        bool is_base58 = false;\n+        bool is_base58Check = false;\n+        bool is_bech32 = false;\n+        bool is_validBech32Chars = false;\n+        std::pair<std::string, std::vector<int>> bech32DecodeErrors;\n+        std::vector<unsigned char> base58DataRaw, base58DataCheck, bech32Data;\n+        std::string networkLabel;\n+        // Perform base58/bech32 decoding on the input string\n+        decodeState(std::string str, std::string chainName) : bech32DecodeResult(bech32::Decode(str))\n+        {\n+            is_base58 = DecodeBase58(str, base58DataRaw, maxBase58Chars);\n+            is_base58Check = DecodeBase58Check(str, base58DataCheck, maxBase58CheckChars);\n+            is_bech32 = bech32DecodeResult.encoding != bech32::Encoding::INVALID;\n+            networkLabel = (chainName == \"main\" || chainName == \"test\") ? chainName + \"net\" : chainName;\n+            if (!is_bech32) {\n+                auto [bech32ErrorStr, bech32ErrorLoc] = bech32DecodeErrors;\n+                bech32DecodeErrors = bech32::LocateErrors(str);\n+                is_validBech32Chars = (bech32ErrorStr != \"Invalid Base 32 character\" &&\n+                                       bech32ErrorStr != \"Invalid character or mixed case\" &&\n+                                       bech32ErrorStr != \"Invalid separator position\");\n+            } else {\n+                is_validBech32Chars = true;\n+            }\n+        }\n+    };\n+\n+    decodeState Decoded{str, params.GetChainTypeString()};\n+    // Direct bindings (alais) to members of Decoded\n+    auto& bech32Encoding = Decoded.bech32DecodeResult.encoding;\n+    auto& bech32Hrp = Decoded.bech32DecodeResult.hrp;\n+    auto& bech32Chars = Decoded.bech32DecodeResult.data;\n+    auto& bech32Error = Decoded.bech32DecodeErrors.first;\n+    auto& bech32ErrorLoc = Decoded.bech32DecodeErrors.second;\n+    auto& is_bech32 = Decoded.is_bech32;\n+    auto& is_base58 = Decoded.is_base58;\n+    auto& is_base58Check = Decoded.is_base58Check;\n+    auto& is_validBech32Chars = Decoded.is_validBech32Chars;\n+    auto& base58Data = Decoded.base58DataCheck;\n+    auto& bech32Data = Decoded.bech32Data;\n+    auto& networkLabel = Decoded.networkLabel;\n+\n+    // If this is not 'bech32(m)' attempt to decode why for error reporting\n+    if (!is_bech32 && is_base58Check) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        // The base58Data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n         const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + pubkey_prefix.size(), base58Data.end(), hash.begin());\n             return PKHash(hash);\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        // The base58Data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n         const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+        if (base58Data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) {\n+            std::copy(base58Data.begin() + script_prefix.size(), base58Data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n-\n         // If the prefix of data matches either the script or pubkey prefix, the length must have been wrong\n-        if ((data.size() >= script_prefix.size() &&\n-                std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) ||\n-            (data.size() >= pubkey_prefix.size() &&\n-                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin()))) {\n+        if ((base58Data.size() >= script_prefix.size() &&\n+                std::equal(script_prefix.begin(), script_prefix.end(), base58Data.begin())) ||\n+            (base58Data.size() >= pubkey_prefix.size() &&\n+                std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), base58Data.begin()))) {\n             error_str = \"Invalid length for Base58 address (P2PKH or P2SH)\";\n         } else {\n-            error_str = \"Invalid or unsupported Base58-encoded address.\";\n+            std::string chainPrefixes = params.GetChainTypeString() == \"main\" ? \"1 or 3\" : \"m, n, or 2\";\n+            error_str = strprintf(\"Invalid or unsupported Base58 %s address. Expected prefix %s\", networkLabel, chainPrefixes);\n         }\n         return CNoDestination();\n     } else if (!is_bech32) {\n-        // Try Base58 decoding without the checksum, using a much larger max length\n-        if (!DecodeBase58(str, data, 100)) {\n-            error_str = \"Invalid or unsupported Segwit (Bech32) or Base58 encoding.\";\n-        } else {\n-            error_str = \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+        if (!is_base58) {\n+            error_str = is_validBech32Chars ? \"Bech32(m) address decoded with error: \" + bech32Error : \"Address is not valid Base58 or Bech32\";\n+            if (error_locations) *error_locations = std::move(bech32ErrorLoc);\n+        }\n+        else {\n+            error_str = is_validBech32Chars\n+                ? \"Invalid address encoded as Base58 and Bech32(m) provided\"\n+                : \"Invalid checksum or length of Base58 address (P2PKH or P2SH)\";\n+            if (is_validBech32Chars && error_locations) {\n+                *error_locations = std::move(bech32ErrorLoc);\n+            }\n         }\n         return CNoDestination();\n     }\n \n-    data.clear();\n-    const auto dec = bech32::Decode(str);\n-    if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0) {\n+    if ((bech32Encoding == bech32::Encoding::BECH32 || bech32Encoding == bech32::Encoding::BECH32M) && bech32Chars.size() > 0) {\n         // Bech32 decoding\n-        if (dec.hrp != params.Bech32HRP()) {\n-            error_str = strprintf(\"Invalid or unsupported prefix for Segwit (Bech32) address (expected %s, got %s).\", params.Bech32HRP(), dec.hrp);\n+        if (bech32Hrp != params.Bech32HRP()) {\n+            error_str = strprintf(\"Invalid chain prefix for %s. Expected %s got %s\", networkLabel, params.Bech32HRP(), bech32Hrp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1318755828",
      "id" : 1318755828,
      "in_reply_to_id" : 1239033958,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Omp30",
      "original_commit_id" : "b7e27c61abcfc98032beb5372b2770fb9b17a7ce",
      "original_line" : 176,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1615671247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318755828/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-07T15:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1318755828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "You may also want to check if #28246 gets in the way of anything you're doing here.",
      "created_at" : "2023-09-07T16:50:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1710485607",
      "id" : 1710485607,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585l8_Bn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1710485607/reactions"
      },
      "updated_at" : "2023-09-07T16:50:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1710485607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1320486089"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320486089"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This returns all possible address prefixes given a version byte .\r\n\r\nExample: A testnet address uses a version byte of 0x6F prepended to 24 bytes of of data. That data when base58 encoded will generate 2 possible prefixes ```['m','n']``` \r\n\r\nI have created unit tests that should show and demonstrate how this function works.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/303308e3fcf4ba6b5e10fc516bdf591415f80d99/src/test/base58_prefix_decoder_tests.cpp#L13-L31",
      "commit_id" : "d75fe6bda6df4ca31e9cafa645d7b98e87251bce",
      "created_at" : "2023-09-09T05:18:45Z",
      "diff_hunk" : "@@ -0,0 +1,13 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BASE58ADDRESS_H\n+#define BITCOIN_UTIL_BASE58ADDRESS_H\n+\n+#include <cstddef>\n+#include <vector>\n+\n+std::vector<char> Base58PrefixesFromVersionBytes(size_t length, std::vector<unsigned char> base58Prefix);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1320486089",
      "id" : 1320486089,
      "in_reply_to_id" : 1318741154,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585OtQTJ",
      "original_commit_id" : "89139d6b51a544d041a2783526c4744eeca7bc0f",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/util/base58address.h",
      "position" : null,
      "pull_request_review_id" : 1618563369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320486089/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-09T05:18:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320486089",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1320487077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320487077"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This was deliberate. The rest of the file has comments in the form of ```/** Alice Bob Carol */``` and this line didn't since I was working in the area I decided to make it consistent with the rest of the file.",
      "commit_id" : "d75fe6bda6df4ca31e9cafa645d7b98e87251bce",
      "created_at" : "2023-09-09T05:26:27Z",
      "diff_hunk" : "@@ -109,10 +109,12 @@ class CChainParams\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Minimum free space (in GB) needed for data directory */\n     uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n-    /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target*/\n+    /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1320487077",
      "id" : 1320487077,
      "in_reply_to_id" : 1318746384,
      "line" : 112,
      "node_id" : "PRRC_kwDOABII585OtQil",
      "original_commit_id" : "fa0ed7796fb9553c0458c7bc534f73441a991b0d",
      "original_line" : 112,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/kernel/chainparams.h",
      "position" : 5,
      "pull_request_review_id" : 1618564078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320487077/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-09T05:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320487077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> You may also want to check if #28246 gets in the way of anything you're doing here.\r\n\r\nThere is a case in #28246 DecodeDestination that is modified, but this pr does not modify any logic that is being replaced. As such should not be a problem.",
      "created_at" : "2023-09-09T06:21:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1712430393",
      "id" : 1712430393,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585mEZ05",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1712430393/reactions"
      },
      "updated_at" : "2023-09-09T06:21:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1712430393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Can you add a test for `Base58PrefixesFromVersionBytes`?\r\n\r\nI have added unit tests for Base58PrefixesFromVersionByte. Coverage includes all mainnet and testnet address types. And the the longest continuous segment of unchanging outputs.  ",
      "created_at" : "2023-09-09T07:12:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#issuecomment-1712441730",
      "id" : 1712441730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
      "node_id" : "IC_kwDOABII585mEcmC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1712441730/reactions"
      },
      "updated_at" : "2023-09-09T07:12:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1712441730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1320574881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320574881"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Completed in 7458d034917fa0bfe060a24731b6f22cc2c6db9e",
      "commit_id" : "7397518101fc0f8f56afe41b2d7b9f44946ebb70",
      "created_at" : "2023-09-09T14:12:40Z",
      "diff_hunk" : "@@ -0,0 +1,13 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BASE58ADDRESS_H",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260#discussion_r1320574881",
      "id" : 1320574881,
      "in_reply_to_id" : 1318735685,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Otl-h",
      "original_commit_id" : "89139d6b51a544d041a2783526c4744eeca7bc0f",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/util/base58address.h",
      "position" : null,
      "pull_request_review_id" : 1618647298,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320574881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-09T14:12:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1320574881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
         "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
         "followers_url" : "https://api.github.com/users/russeree/followers",
         "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
         "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/russeree",
         "id" : 3104223,
         "login" : "russeree",
         "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
         "organizations_url" : "https://api.github.com/users/russeree/orgs",
         "received_events_url" : "https://api.github.com/users/russeree/received_events",
         "repos_url" : "https://api.github.com/users/russeree/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/russeree"
      }
   }
]
