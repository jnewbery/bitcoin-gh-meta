[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [fanquake](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1116611222), [glozow](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1117618586), [jonatack](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118062799), [t-bast](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1118109036), [ishaanam](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1122523189), [andrewtoth](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1187092079), [stickies-v](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1188589097), [LarryRuane](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1198255084), [josibake](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1206585147) |\n| Stale ACK | [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/26152#pullrequestreview-1537066023) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#27385](https://github.com/bitcoin/bitcoin/pull/27385) (net, refactor: extract Network and BIP155Network logic to node/network by jonatack)\n* [#27286](https://github.com/bitcoin/bitcoin/pull/27286) (wallet: Keep track of the wallet's own transaction outputs in memory by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2022-09-21T23:24:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1254331602",
      "id" : 1254331602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585Kw5TS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1254331602/reactions"
      },
      "updated_at" : "2023-08-11T18:08:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1254331602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977356049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\r\n```",
      "commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "created_at" : "2022-09-22T08:30:02Z",
      "diff_hunk" : "@@ -0,0 +1,219 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else if (mempool.isSpent(outpoint) || !mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist wihout its ancestor MockMempoolEntry, so these sets won't be invalidated.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977356049",
      "id" : 977356049,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII5846QUUR",
      "original_commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 75,
      "pull_request_review_id" : 1116611222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-22T08:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977356049",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977359612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```bash\r\nFile \"test/functional/wallet_spend_unconfirmed.py\" contains a shebang line, but has the file permission 644 instead of the expected executable permission 755. Do \"chmod 755 test/functional/wallet_spend_unconfirmed.py\" (or remove the shebang line).\r\nERROR: There were 1 failed tests in the lint-files.py lint test. Please resolve the above errors.\r\n```\r\n\r\nThis also needs to be added to the list of tests in `test_runner.py`. Which should deal with:\r\n```bash\r\nï¿½[1mWARNING!ï¿½[0m The following scripts are not being run: ['wallet_spend_unconfirmed.py']. Check the test lists in test_runner.py.\r\n```",
      "commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "created_at" : "2022-09-22T08:32:06Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+#!/usr/bin/env python3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r977359612",
      "id" : 977359612,
      "line" : 1,
      "node_id" : "PRRC_kwDOABII5846QVL8",
      "original_commit_id" : "54fd46be525961c2fe0e9cc02549584aaaad571b",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 1,
      "pull_request_review_id" : 1116611222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-22T08:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/977359612",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks @fanquake, I fixed the two issues.\r\n\r\nI also added a test for a transaction using `subtractfeefromamount`",
      "created_at" : "2022-09-22T19:56:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1255484595",
      "id" : 1255484595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585K1Syz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255484595/reactions"
      },
      "updated_at" : "2022-09-22T19:56:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255484595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978344744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry, lint error is my fault here\r\n\r\n```suggestion\r\n                        ++i;\r\n```",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T07:37:55Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978344744",
      "id" : 978344744,
      "line" : 1245,
      "node_id" : "PRRC_kwDOABII5846UFso",
      "original_commit_id" : "26f96f0e13ab801993cd7b95282230d45ee8ce65",
      "original_line" : 1245,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 63,
      "pull_request_review_id" : 1118029972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T07:37:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978344744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978355993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993"
         }
      },
      "author_association" : "MEMBER",
      "body" : "whitespace linter\r\n```suggestion\r\n                        // we still need to process this\r\n```\r\n\r\n------\r\n\r\nEdit (you can set up your editor to highlight these or run `test/lint/lint-whitespace.py` as part of your local scripted prechecks before pushing, with clang-format, etc.):\r\n\r\n```diff\r\n--- a/src/txmempool.cpp\r\n+++ b/src/txmempool.cpp\r\n@@ -1242,10 +1242,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = parent_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(parent_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n@@ -1259,10 +1259,10 @@ std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<u\r\n                         // transactions and skip.\r\n                         std::swap(cluster[i+1], cluster.back());\r\n                         cluster[i+1] = child_it;\r\n-                        ++i; \r\n+                        ++i;\r\n                     } else {\r\n                         cluster.push_back(child_it);\r\n-                        // we still need to process this \r\n+                        // we still need to process this\r\n                         ++unprocessed_count;\r\n                     }\r\n                 }\r\n```\r\n",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T07:52:01Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i; \n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978355993",
      "id" : 978355993,
      "line" : 1248,
      "node_id" : "PRRC_kwDOABII5846UIcZ",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 1248,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 66,
      "pull_request_review_id" : 1118045668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T07:58:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978355993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978380196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "All struct members are public by default, so can either drop `public` here (and removed the getters), or make the struct a class if any of the data members above are intended to be private (for instance, `tx` and `fee_individual` have public getters and could be private, or just be public and drop the getter).\r\n\r\nAt first look it seems some of the data members need to be public, in which case their getters should be used or removed. This builds:\r\n\r\n```diff\r\n-struct MockMempoolEntry {\r\n+class MockMempoolEntry\r\n+{\r\n     CAmount fee_individual;\r\n-    CAmount fee_with_ancestors;\r\n-    int64_t vsize_individual;\r\n-    int64_t vsize_with_ancestors;\r\n     const CTransaction& tx;\r\n \r\n public:\r\n+    CAmount fee_with_ancestors;\r\n+    int64_t vsize_individual;\r\n+    int64_t vsize_with_ancestors;\r\n     explicit MockMempoolEntry(CTxMemPool::txiter entry) :\r\n         fee_individual{entry->GetModifiedFee()},\r\n         fee_with_ancestors{entry->GetModFeesWithAncestors()},\r\n```\r\n",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T08:16:33Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978380196",
      "id" : 978380196,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII5846UOWk",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 24,
      "pull_request_review_id" : 1118076665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:16:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978380196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978402242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\r\n```",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T08:42:28Z",
      "diff_hunk" : "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978402242",
      "id" : 978402242,
      "line" : 226,
      "node_id" : "PRRC_kwDOABII5846UTvC",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 226,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 22,
      "pull_request_review_id" : 1118109036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:47:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978402242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978403663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    //  it means the transaction has multiple change outputs or paid the same wallet using multiple\r\n```",
      "commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "created_at" : "2022-09-23T08:43:28Z",
      "diff_hunk" : "@@ -205,6 +205,33 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (this should be very rare because\n+    //  the transaction essentially multiple change outputs or paid the same wallet using multiple",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978403663",
      "id" : 978403663,
      "line" : 230,
      "node_id" : "PRRC_kwDOABII5846UUFP",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 230,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 26,
      "pull_request_review_id" : 1118109036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:47:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978403663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978501186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd say just remove the getters, it's fine to keep these public. This struct is only used by `MiniMiner`.\r\nFor background, I originally was trying to align the interface with `CTxMemPoolEntry` like `CTxMemPoolModifiedEntry` to reuse the `CompareTxMemPoolEntryByAncestorFee` comparator in a multi index container, but then realized using simple `std::map`s was enough.",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-23T10:41:12Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+struct MockMempoolEntry {\n+    CAmount fee_individual;\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    const CTransaction& tx;\n+\n+public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r978501186",
      "id" : 978501186,
      "in_reply_to_id" : 978380196,
      "line" : 22,
      "node_id" : "PRRC_kwDOABII5846Ur5C",
      "original_commit_id" : "a07ac02d2bc6500a03c29a0413bb913735dca46f",
      "original_line" : 22,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 22,
      "pull_request_review_id" : 1118249028,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T10:41:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I ran a first set of tests from within eclair against https://github.com/bitcoin/bitcoin/pull/26152/commits/a07ac02d2bc6500a03c29a0413bb913735dca46f, and everything is looking good :+1: ",
      "created_at" : "2022-09-23T15:49:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1256381127",
      "id" : 1256381127,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585K4trH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256381127/reactions"
      },
      "updated_at" : "2022-09-23T15:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256381127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack, @t-bast: Thanks for the review and testing. I made an attempt of getting rid of the getters on MockMempoolEntry, but what I did interfered with the calls made on properties of actual mempool entries. Will have to shift my approach.",
      "created_at" : "2022-09-27T19:19:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1259945661",
      "id" : 1259945661,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585LGT69",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259945661/reactions"
      },
      "updated_at" : "2022-09-27T20:25:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259945661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@glozow: Maybe for\r\n\r\n> This needs to obey -maxtxfee\r\n\r\nMaybe we can add a `maxtxfee` check to the filter introduced in #25729 for max weight after input sets are produced for different subsets of the available coins. Perhaps a separate PR that builds both on this one here and #25729.\r\n\r\n@jonatack, @t-bast:\r\nFixed whitespace issues, applied the propose change to a class for the `struct MockMempoolEntry`, amended comments in Chain interface. Thanks!\r\n",
      "created_at" : "2022-09-27T20:25:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1260008562",
      "id" : 1260008562,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585LGjRy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260008562/reactions"
      },
      "updated_at" : "2022-09-27T20:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260008562",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982428810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 9b33f5db095c232ac83304c91524f48bf799802f\r\n\r\nThese need to match the order of the members, CI -Wreorder-ctor says",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T13:45:55Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors()),\n+        tx{entry->GetTx()}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982428810",
      "id" : 982428810,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846jqyK",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 31,
      "original_position" : 31,
      "original_start_line" : 27,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982428810",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in f40b9fe6a83b6668a625e28520456350f2cd98f0\r\n\r\nAs discussed offline, this case can be deleted since it will never be hit (and is also incorrect).",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T13:46:58Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430051",
      "id" : 982430051,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846jrFj",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 1245,
      "original_position" : 63,
      "original_start_line" : 1239,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this as well in f40b9fe6a83b6668a625e28520456350f2cd98f0",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T13:47:06Z",
      "diff_hunk" : "@@ -1197,3 +1216,58 @@ void CTxMemPool::SetLoadTried(bool load_tried)\n     LOCK(cs);\n     m_load_tried = load_tried;\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    if (parent_entry.GetCountWithAncestors() == 1 &&\n+                        parent_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = parent_it;\n+                        ++i;\n+                    } else {\n+                        cluster.push_back(parent_it);\n+                        // we still need to process this\n+                        ++unprocessed_count;\n+                    }\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    if (child_entry.GetCountWithAncestors() == 1 &&\n+                        child_entry.GetCountWithDescendants() == 1) {\n+                        // We don't need to process this entry. Just add it to the processed\n+                        // transactions and skip.\n+                        std::swap(cluster[i+1], cluster.back());\n+                        cluster[i+1] = child_it;\n+                        ++i;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982430211",
      "id" : 982430211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846jrID",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 1262,
      "original_position" : 80,
      "original_start_line" : 1256,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982430211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982470036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have 2 concerns with this approach, please let me know what you think:\r\n\r\n(1) The `COutput` constructor really shouldn't need to have a reference the chain interface; it smells a bit weird that coinselection (which I interpret to be a relatively well-modularized component thus far since it doesn't even depend on wallet) has a new dependency on interfaces/chain.h. It's unclear to me why `CalculateBumpFees()` needs to be called *inside* the constructor instead of just having `CAmount ancestor_bump_fees` be a parameter?\r\n\r\n(2) This means `CalculateBumpFees()` will be called over and over again for each `COutput` constructed within the `AvailableCoins` loop. There's not a lot of duplicated work if all the outputs are from independent transactions, but it would definitely be faster to call it once with all the outpoints at once.\r\n\r\nApproach-wise, I think it makes more sense to call `CalculateBumpFees()` just once, with the full list of outpoints. It should be fairly straightforward with preset inputs since you have the list already. For `AvailableCoins`, since they're constructed as you iterate through `mapWallet`, you could populate each output's `ancestor_bump_fees` values at the end. If you want to construct them as-is and then not mutate afterwards, then maybe do 2 passes for filtering and constructing?",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T14:19:24Z",
      "diff_hunk" : "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982470036",
      "id" : 982470036,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846j02U",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 77,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T14:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982470036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982473716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0\r\n\r\nMissing a test for `bumpfee` RPC?",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-09-28T14:22:24Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(resulting_fee_rate_funding, self.target_fee_rate)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        resulting_fee_rate_parent_one = self.calc_fee_rate(p_one_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_one)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        resulting_fee_rate_parent_two = self.calc_fee_rate(p_two_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_two)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        resulting_fee_rate_high_parent = self.calc_fee_rate(p_high_tx)\n+\n+        # This time the parent is greater than the child\n+        assert_greater_than(resulting_fee_rate_high_parent, self.target_fee_rate)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        resulting_fee_rate_parent_low = self.calc_fee_rate(p_low_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_low)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(resulting_fee_rate_grandparent, self.target_fee_rate)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold\n+        self.test_target_feerate_confirmed()\n+\n+        # Spend unconfirmed input with feerate higher than target feerate\n+        self.test_target_feerate_unconfirmed_high()\n+\n+        # Actual test: Spend unconfirmed input with feerate lower than target feerate. Expect that parent gets bumped to target feerate.\n+        self.test_target_feerate_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed input with unconfirmed parent both of which have a feerate lower than target feerate. Expect that both ancestors get bumped to target feerate.\n+        self.test_chain_of_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with low feerates\n+        self.test_two_low_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with mixed feerates\n+        self.test_mixed_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend chain with high grandparent low parent\n+        self.test_chain_of_high_low()\n+\n+        # Actual test: Spend chain with low grandparent lower parent\n+        self.test_chain_of_high_low_below_target_feerate()\n+\n+        # Actual test: Check that fee is calculated correctly when bumping while subtracting fee from output\n+        self.test_target_feerate_unconfirmed_low_sffo()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r982473716",
      "id" : 982473716,
      "line" : 318,
      "node_id" : "PRRC_kwDOABII5846j1v0",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 318,
      "original_position" : 318,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 318,
      "pull_request_review_id" : 1123725020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-28T14:24:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/982473716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1007251469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now applying the bumpfees to each output after constructing the output.",
      "commit_id" : "f9979efb77471d6979f5b0d46bbf5db7c8fc1f04",
      "created_at" : "2022-10-27T18:55:00Z",
      "diff_hunk" : "@@ -66,7 +71,10 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n-    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)\n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n+    COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt, const std::optional<std::reference_wrapper<interfaces::Chain>> chain_interface = std::nullopt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1007251469",
      "id" : 1007251469,
      "in_reply_to_id" : 982470036,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848CXAN",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 77,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 1158885486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-27T18:55:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007251469",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "- Reordered members vs initialization\r\n- Removed special casing of UTXOs without relatives in CalculateBumpFee\r\n- Call CalculateBumpFee once for the whole UTXO pool instead of introducing chain-interface dependency on every UTXO\r\n\r\nTodos:\r\n- Prevent exceeding `maxtxfee`\r\n- Add test for bumpfee RPC\r\n- Add secondary modus for CalculateBumpFee that treats the provided UTXOs as being spent together. This allows us to recalculate the bumpfee of all inputs together to resolve our overpayment caveat. ",
      "created_at" : "2022-10-27T19:08:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1293951299",
      "id" : 1293951299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NICFD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293951299/reactions"
      },
      "updated_at" : "2022-10-27T19:08:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1293951299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-10-27T22:56:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1294211012",
      "id" : 1294211012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NJBfE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294211012/reactions"
      },
      "updated_at" : "2022-10-27T22:56:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294211012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@glozow: looking more into this, I realized that the `maxtxfee` refers to an absolute fee, not a feerate. `maxtxfee` is checked after a transaction is built, so I don't see how ancestor aware funding changes anything in regard to `maxtxfee`âwe still check at the end whether the amount of fee is allowed, regardless how we calculated the fee. If you meant `maxtxfeerate`, that is used to check raw transactions on submission in `sendrawtx`, so it doesn't apply here either.",
      "created_at" : "2022-11-02T16:19:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1300814643",
      "id" : 1300814643,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NiNsz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300814643/reactions"
      },
      "updated_at" : "2022-11-02T16:19:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300814643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> maxtxfee refers to an absolute fee, not a feerate. maxtxfee is checked after a transaction is built, so I don't see how ancestor aware funding changes anything in regard to maxtxfee\r\n\r\nAh for some reason I thought it was a feerate, apologies. Question: is it better to only enforce `-maxtxfee` on the fees paid for the tx itself and not on the fees used to bump its ancestors? Or would the user expect that it's applied to any tx, bumping or not?",
      "created_at" : "2022-11-02T17:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301002778",
      "id" : 1301002778,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585Ni7oa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301002778/reactions"
      },
      "updated_at" : "2022-11-02T17:42:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301002778",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Question: is it better to only enforce `-maxtxfee` on the fees paid for the tx itself and not on the fees used to bump its ancestors? Or would the user expect that it's applied to any tx, bumping or not?\r\n\r\nI think that `-maxtxfee` should be expected to behave the same regardless of bumping, it's a context-free check.",
      "created_at" : "2022-11-02T18:38:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301062904",
      "id" : 1301062904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NjKT4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301062904/reactions"
      },
      "updated_at" : "2022-11-02T18:38:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301062904",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Latest changes:\r\n- Fixed bug where the outpoints spent by a transaction to be replaced got set to a bumpfee of 0\r\n- Added a test for preset inputs and the `bumpfee` RPC\r\n- Rebased\r\n\r\nRemaining Todo:\r\n- Add secondary modus for CalculateBumpFee that treats the provided UTXOs as being spent together. This allows us to recalculate the bumpfee of all inputs together to resolve our overpayment caveat.",
      "created_at" : "2022-11-02T19:26:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1301111044",
      "id" : 1301111044,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NjWEE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301111044/reactions"
      },
      "updated_at" : "2022-11-02T19:26:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301111044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2022-11-05T09:47:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1304463067",
      "id" : 1304463067,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NwIbb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304463067/reactions"
      },
      "updated_at" : "2022-11-05T09:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304463067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Update:\r\n\r\n<s>Caveat: If multiple UTXOs share ancestry, this implementation will overpay by bumping shared ancestors once per descendant.</s>\r\n\r\nAfter calculating an input set candidate, we recalculate the bumpfee for the collective set of inputs and correct our fee estimation if there was an overestimate due to overlapping ancestries.\r\n\r\nLeft to do:\r\nâ¢ rebase\r\nâ¢ clean up tests\r\nâ¢ clean up commits\r\nâ¢ touch up commit messages",
      "created_at" : "2022-11-05T14:09:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1304553544",
      "id" : 1304553544,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585NwehI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304553544/reactions"
      },
      "updated_at" : "2022-11-05T14:09:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304553544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1015784610"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015784610"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added!",
      "commit_id" : "4d2bf384bd838a83b2c4be2cfa63a41adc9de313",
      "created_at" : "2022-11-07T18:51:47Z",
      "diff_hunk" : "@@ -0,0 +1,321 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(resulting_fee_rate_funding, self.target_fee_rate)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        resulting_fee_rate_parent_one = self.calc_fee_rate(p_one_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_one)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        resulting_fee_rate_parent_two = self.calc_fee_rate(p_two_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_two)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        resulting_fee_rate_high_parent = self.calc_fee_rate(p_high_tx)\n+\n+        # This time the parent is greater than the child\n+        assert_greater_than(resulting_fee_rate_high_parent, self.target_fee_rate)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        resulting_fee_rate_parent_low = self.calc_fee_rate(p_low_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent_low)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(resulting_fee_rate_grandparent, self.target_fee_rate)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        resulting_fee_rate_grandparent = self.calc_fee_rate(gp_tx)\n+\n+        # grandparent has higher feerate\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_grandparent)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        resulting_fee_rate_parent = self.calc_fee_rate(p_tx)\n+\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_parent)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold\n+        self.test_target_feerate_confirmed()\n+\n+        # Spend unconfirmed input with feerate higher than target feerate\n+        self.test_target_feerate_unconfirmed_high()\n+\n+        # Actual test: Spend unconfirmed input with feerate lower than target feerate. Expect that parent gets bumped to target feerate.\n+        self.test_target_feerate_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed input with unconfirmed parent both of which have a feerate lower than target feerate. Expect that both ancestors get bumped to target feerate.\n+        self.test_chain_of_unconfirmed_low()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with low feerates\n+        self.test_two_low_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend unconfirmed inputs from two parents with mixed feerates\n+        self.test_mixed_feerate_unconfirmed_parents()\n+\n+        # Actual test: Spend chain with high grandparent low parent\n+        self.test_chain_of_high_low()\n+\n+        # Actual test: Spend chain with low grandparent lower parent\n+        self.test_chain_of_high_low_below_target_feerate()\n+\n+        # Actual test: Check that fee is calculated correctly when bumping while subtracting fee from output\n+        self.test_target_feerate_unconfirmed_low_sffo()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1015784610",
      "id" : 1015784610,
      "in_reply_to_id" : 982473716,
      "line" : 443,
      "node_id" : "PRRC_kwDOABII5848i6Si",
      "original_commit_id" : "337a24e6e4fd77d2fc3bf94e87c2a172c39a8fb0",
      "original_line" : 443,
      "original_position" : 318,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 443,
      "pull_request_review_id" : 1170926116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015784610/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-07T18:51:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1015784610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Cleaned up tests, redrew commits, touched up commit messages, rebased.\r\n\r\n**Ready for review.** :partying_face:",
      "created_at" : "2022-11-07T19:22:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1306080540",
      "id" : 1306080540,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585N2TUc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1306080540/reactions"
      },
      "updated_at" : "2022-11-07T19:22:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1306080540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017405596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017405596"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 8a474b7675d552a9f2951d7cbc59ca36d3a10f11 \"Add CalculateTotalBumpFee for overlapping ancestry\"\r\nI think the following change might make sense because that way even a `MiniMiner` that was initialized with confirmed outpoints could run `CalculateTotalBumpFees`. I think it would be better if `CalculateTotalBumpFees` could handle unconfirmed outpoints for uniformity with `CalculateBumpFees`.\r\n```suggestion\r\n        if (iter == entries_by_txid.end()) continue;\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-09T04:04:50Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, â¦)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017405596",
      "id" : 1017405596,
      "line" : 237,
      "node_id" : "PRRC_kwDOABII5848pGCc",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 237,
      "original_position" : 237,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 237,
      "pull_request_review_id" : 1173244112,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017405596/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-09T05:11:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017405596",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017410299"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017410299"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    // Cache which outpoints are needed for each tx so we don't have to look up all the outputs.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-09T04:14:32Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1017410299",
      "id" : 1017410299,
      "line" : 66,
      "node_id" : "PRRC_kwDOABII5848pHL7",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 63,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 63,
      "pull_request_review_id" : 1173244112,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017410299/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-09T14:06:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1017410299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1024976309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1024976309"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Where does the 1.5 come from here (and in later tests e.g. `test_two_low_feerate_unconfirmed_parents()` 1.1)?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-17T09:56:12Z",
      "diff_hunk" : "@@ -0,0 +1,436 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1024976309",
      "id" : 1024976309,
      "line" : 107,
      "node_id" : "PRRC_kwDOABII5849F-W1",
      "original_commit_id" : "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "original_line" : 107,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 107,
      "pull_request_review_id" : 1183993011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1024976309/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-17T09:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1024976309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1026970423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026970423"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would it maybe make sense to use `CalculateTotalBumpFees()` instead of `CalculateBumpFees()` here, given that all these inputs are from the same transaction and thus most certainly overlap in ancestry?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-18T23:25:19Z",
      "diff_hunk" : "@@ -80,7 +80,18 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1026970423",
      "id" : 1026970423,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII5849NlM3",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 88,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/wallet/feebumper.cpp",
      "position" : 10,
      "pull_request_review_id" : 1186932380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026970423/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T17:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1026970423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027113476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027113476"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's unclear to me what the first sentence here is saying with `in RBFs`. Perhaps `This includes fee-bumping using RBF for any conflicting transactions.`?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-19T16:40:09Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027113476",
      "id" : 1027113476,
      "line" : 228,
      "node_id" : "PRRC_kwDOABII5849OIIE",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 228,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 16,
      "pull_request_review_id" : 1187092079,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027113476/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-19T17:45:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027113476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027114058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027114058"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should this function start with `AssertLockHeld(cs)`?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-19T16:45:33Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027114058",
      "id" : 1027114058,
      "line" : 958,
      "node_id" : "PRRC_kwDOABII5849OIRK",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 958,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 14,
      "pull_request_review_id" : 1187092079,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027114058/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-19T17:45:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027114058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027127955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027127955"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's just to check that the fees are at least what was expected, but do not overshoot too far, e.g. because we selected more inputs than expected.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-11-19T18:46:29Z",
      "diff_hunk" : "@@ -0,0 +1,436 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1027127955",
      "id" : 1027127955,
      "in_reply_to_id" : 1024976309,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5849OLqT",
      "original_commit_id" : "ad8bffe548a2536f925e6911c7d50c1aaab1a59e",
      "original_line" : 107,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027127955/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1027127955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028280212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028280212"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "could be a bit more concise:\r\n```suggestion\r\n        if (!it) return {}; // return empty vector to let the caller know this failed\r\n        ret.push_back(*it);\r\n        }\r\n```\r\n\r\nI would also add a docstring to `assert(it)` that even though we're currently asserting this, the interface is that upon failure an empty vector is returned, so this assertion may be removed in the future without breaking the interface?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T16:39:08Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028280212",
      "id" : 1028280212,
      "line" : 969,
      "node_id" : "PRRC_kwDOABII5849Sk-U",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 969,
      "original_position" : 25,
      "original_start_line" : 963,
      "path" : "src/txmempool.cpp",
      "position" : 25,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028280212/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 963,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028280212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028283266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028283266"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n        const auto it{GetIter(txid)};\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T16:41:57Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028283266",
      "id" : 1028283266,
      "line" : 961,
      "node_id" : "PRRC_kwDOABII5849SluC",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 961,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 17,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028283266/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028283266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028296326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028296326"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `it->GetCountWithAncestors()` and `it->GetCountWithDescendants()` both include the current transaction, so in that case this should be decreased with 1?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T16:52:47Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028296326",
      "id" : 1028296326,
      "line" : 1224,
      "node_id" : "PRRC_kwDOABII5849So6G",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1224,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 52,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028296326/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028296326",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028322453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028322453"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I'm not sure it'd be a wortwhile improvement, but reserving before assigning could be a slight performance improvement so you only need to size the vector once instead of twice?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T17:09:26Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028322453",
      "id" : 1028322453,
      "line" : 1223,
      "node_id" : "PRRC_kwDOABII5849SvSV",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1223,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 51,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028322453/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028322453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028330615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028330615"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `unprocessed_count` is incorrect, shouldn't this be e.g. `to_process_count`?\r\n```suggestion\r\n        for (size_t i{0}, to_process_count{txids.size()}; i < to_process_count; ++i) {\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T17:17:46Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028330615",
      "id" : 1028330615,
      "line" : 1232,
      "node_id" : "PRRC_kwDOABII5849SxR3",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1232,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 60,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028330615/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028330615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028377597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028377597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think this is correct?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T18:07:29Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028377597",
      "id" : 1028377597,
      "line" : 1231,
      "node_id" : "PRRC_kwDOABII5849S8v9",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1231,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 59,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028377597/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028377597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028438751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028438751"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This can be deduplicated. Also, I think `curr` is not really more helpful than `cluster[i]`, so I'd just remove that varariable.\r\n```suggestion\r\n            auto family{cluster[i]->GetMemPoolParents()};\r\n            family.merge(cluster[i]->GetMemPoolChildren());\r\n            for (const CTxMemPoolEntry& entry : family) {\r\n                const auto tx_iter = mapTx.iterator_to(entry);\r\n                if (!visited(tx_iter)) {\r\n                    cluster.push_back(tx_iter);\r\n                    // we still need to process this\r\n                    ++unprocessed_count;\r\n                }\r\n            }\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:23:31Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028438751",
      "id" : 1028438751,
      "line" : 1249,
      "node_id" : "PRRC_kwDOABII5849TLrf",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1249,
      "original_position" : 77,
      "original_start_line" : 1233,
      "path" : "src/txmempool.cpp",
      "position" : 77,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028438751/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1233,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028438751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028440069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028440069"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be helpful to add a `@pre` indicating that all txids need to be in mempool?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:25:13Z",
      "diff_hunk" : "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028440069",
      "id" : 1028440069,
      "line" : 704,
      "node_id" : "PRRC_kwDOABII5849TMAF",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 704,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 22,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028440069/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028440069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028446649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028446649"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As per https://github.com/bitcoin/bitcoin/pull/23962, perhaps better to make these `int32_t`?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:33:49Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028446649",
      "id" : 1028446649,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII5849TNm5",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 24,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028446649/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028446649",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028448913"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028448913"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    const CTransaction& GetTx() const LIFETIMEBOUND { return tx; }\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:36:56Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028448913",
      "id" : 1028448913,
      "line" : 38,
      "node_id" : "PRRC_kwDOABII5849TOKR",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 38,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028448913/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028448913",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028449731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028449731"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should these be `private` instead?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:38:07Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028449731",
      "id" : 1028449731,
      "line" : 25,
      "node_id" : "PRRC_kwDOABII5849TOXD",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : 23,
      "path" : "src/node/mini_miner.h",
      "position" : 25,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028449731/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 23,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028449731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028451302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028451302"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If `tx` is `const` I think this should be too? And same for `vsize_individual`?\r\n```suggestion\r\n    const CAmount fee_individual;\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:40:05Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028451302",
      "id" : 1028451302,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII5849TOvm",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 19,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 19,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028451302/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-23T16:19:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028451302",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028460084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028460084"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since we're only using the `::iterator` attribute, could shorten it a bit more to\r\n```suggestion\r\n    using MockEntryMapIter = decltype(entries_by_txid)::iterator;\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:51:38Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;\n+\n+    // What we're trying to calculate.\n+    std::map<COutPoint, CAmount> bump_fees;\n+\n+    // The constructed block template\n+    std::set<uint256> in_block;\n+\n+    // Information on the current status of the block\n+    CAmount total_fees{0};\n+    int64_t total_vsize{0};\n+\n+    /** Main data structure holding the entries, can be indexed by txid */\n+    std::map<uint256, MockMempoolEntry> entries_by_txid;\n+    using MockEntryMap = decltype(entries_by_txid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028460084",
      "id" : 1028460084,
      "line" : 82,
      "node_id" : "PRRC_kwDOABII5849TQ40",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 82,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028460084/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028460084",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028461644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028461644"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Although `MiniMiner` sounds catchier, would `MiniBlockAssembler` be a more appropriate/accurate name?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T19:53:42Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028461644",
      "id" : 1028461644,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII5849TRRM",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 55,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 55,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028461644/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028461644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028482615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028482615"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "naming consistency\r\n```suggestion\r\n    std::map<uint256, std::vector<COutPoint>> requested_outpoints_by_txid;\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T20:21:18Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028482615",
      "id" : 1028482615,
      "line" : 68,
      "node_id" : "PRRC_kwDOABII5849TWY3",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 68,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 68,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028482615/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028482615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028491577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028491577"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps I'll answer my own question as I progress with my review, but do we need `requested_outpoints`? I think this overlaps entirely with the keys of `bump_fees`? Feel free to ignore/keep it very brief if it's a dumb remark, I don't fully understand the PR yet.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-21T20:33:23Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1028491577",
      "id" : 1028491577,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII5849TYk5",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 58,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 58,
      "pull_request_review_id" : 1188589097,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028491577/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-22T01:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1028491577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029817194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029817194"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd say we should either assert (and document that assumption) or return an empty vector, but not both. In the current form, this seems dangerous  - in the future someone might read the doc for the function, use the generic `GetIter` for some other usecase and introduce a crash bug in the worst case. ",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-22T21:02:49Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029817194",
      "id" : 1029817194,
      "in_reply_to_id" : 1028280212,
      "line" : 969,
      "node_id" : "PRRC_kwDOABII5849YcNq",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 969,
      "original_position" : 25,
      "original_start_line" : 963,
      "path" : "src/txmempool.cpp",
      "position" : 25,
      "pull_request_review_id" : 1190768828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029817194/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 963,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-23T17:57:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029817194",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029857746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029857746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, that makes sense, thank you",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-11-22T21:56:11Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, â¦)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029857746",
      "id" : 1029857746,
      "in_reply_to_id" : 1017405596,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5849YmHS",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 237,
      "original_position" : 237,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029857746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029857746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029858086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029858086"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks!",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-11-22T21:56:43Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029858086",
      "id" : 1029858086,
      "in_reply_to_id" : 1017410299,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5849YmMm",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 63,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029858086/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029858086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029977800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029977800"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "is that comment meant to be here? I can't see the relation to this else branch, and mapModifiedTx doesn't exist in the MiniMiner.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-23T02:41:21Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1029977800",
      "id" : 1029977800,
      "line" : 46,
      "node_id" : "PRRC_kwDOABII5849ZDbI",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 45,
      "pull_request_review_id" : 1190768828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029977800/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-23T17:57:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029977800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1030671435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1030671435"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, this should be part of its documentation. I think it means that the caller must ensure that nothing can get removed from the mempool in between preparing the list of txids and calling this function, which seems important.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-23T16:40:43Z",
      "diff_hunk" : "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1030671435",
      "id" : 1030671435,
      "in_reply_to_id" : 1028440069,
      "line" : 704,
      "node_id" : "PRRC_kwDOABII5849bsxL",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 704,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : 22,
      "pull_request_review_id" : 1190768828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1030671435/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-23T17:57:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1030671435",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase after 8597260872bbef86524996ec695ffb30ec596416",
      "created_at" : "2022-11-29T11:30:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1330485399",
      "id" : 1330485399,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585PTZiX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1330485399/reactions"
      },
      "updated_at" : "2022-11-29T11:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1330485399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035216664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035216664"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            bump_fees.emplace(outpoint, 0);\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T19:55:00Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035216664",
      "id" : 1035216664,
      "line" : 37,
      "node_id" : "PRRC_kwDOABII5849tCcY",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 37,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035216664/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035216664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035217598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035217598"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    return bump_fees;\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T19:56:03Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035217598",
      "id" : 1035217598,
      "line" : 219,
      "node_id" : "PRRC_kwDOABII5849tCq-",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 219,
      "original_position" : 219,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 219,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035217598/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035217598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035218401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035218401"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                outpoints_needed_by_txid.emplace(outpoint.hash, outpoints_of_tx);\r\n```\r\nCan make a similar change elsewhere in this file.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T19:56:59Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035218401",
      "id" : 1035218401,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII5849tC3h",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 45,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035218401/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035218401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035234823"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035234823"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\r\n        txids_needed.push_back(txid);\r\n    }\r\n```\r\n(nit, simpler)",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T20:13:21Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035234823",
      "id" : 1035234823,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII5849tG4H",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : 53,
      "path" : "src/node/mini_miner.cpp",
      "position" : 56,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035234823/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 53,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035234823",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035269211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035269211"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. (10-5) * mempooltx.vsize). If that\r\n```\r\nand / or maybe use 6 instead of 5. (It's slightly unclear as is because 10-5 == 5.)",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T20:47:21Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035269211",
      "id" : 1035269211,
      "line" : 219,
      "node_id" : "PRRC_kwDOABII5849tPRb",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 219,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 7,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035269211/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035269211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035318488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035318488"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // If multiple argument outpoints correspond to the same transaction, cache them together in\r\n    // a single entry indexed by txid. Then we can just work with txids since all outpoints from\r\n    // the same tx will have the same bumpfee. Excludes non-mempool transactions.\r\n```\r\nThis is how I read the code, but check my understanding!",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T21:49:19Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035318488",
      "id" : 1035318488,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII5849tbTY",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 64,
      "path" : "src/node/mini_miner.h",
      "position" : 67,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035318488/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 64,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035318488",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035330287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035330287"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    //  same strategy as in CalculateBumpFees(â¦). Unlike the above call,\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T22:05:26Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (which would be very rare because\n+    //  it means that one transaction has multiple change outputs or paid the same wallet using multiple\n+    //  outputs in the same transaction) or have shared ancestry, the bump fees are calculated\n+    //  independently, i.e. as if only one of them is spent. This may result in double-fee-bumping. This\n+    //  caveat can be rectified per use of the sister-function CalculateTotalBumpFees(â¦).\n+    virtual std::map<COutPoint, CAmount> CalculateBumpFees(const std::vector<COutPoint>& outpoints, const CFeeRate& target_feerate) = 0;\n+\n+    //! Calculate the shared bump fees for a given set of outpoints per the\n+    //  same strategy as in CalculateBumpFees(â¦).  Other than the above call,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035330287",
      "id" : 1035330287,
      "line" : 245,
      "node_id" : "PRRC_kwDOABII5849teLv",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 245,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 33,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035330287/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035330287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035335097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035335097"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> they are not included\r\n\r\nIs this true? IIUC, I don't think it works this way, or it shouldn't. If there are two outpoints sharing the same ancestor transaction, we don't know which of those two outpoints coin selection will choose if it chooses only one. If coin selection chooses the one for which we didn't bump to account for the ancestor, then our fee will be too low. I thought we bump both, and then _after_ coin selection, we make the adjustment.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T22:12:05Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035335097",
      "id" : 1035335097,
      "line" : 226,
      "node_id" : "PRRC_kwDOABII5849tfW5",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 226,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : 14,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035335097/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035335097",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035354396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035354396"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                for (const auto& outpoint : outpoints_it->second) {\r\n                    bump_fees.emplace(outpoint, 0);\r\n                }\r\n                outpoints_needed_by_txid.erase(outpoints_it);\r\n```\r\nI'm not sure about this, but doing the `erase` here would be consistent with the `!mempool.exists()` case above (an entry for this transaction, none of whose outpoints we will use, is _not_ added to `outpoints_needed_by_txid`).",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T22:40:11Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035354396",
      "id" : 1035354396,
      "line" : 68,
      "node_id" : "PRRC_kwDOABII5849tkEc",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 68,
      "original_position" : 68,
      "original_start_line" : 66,
      "path" : "src/node/mini_miner.cpp",
      "position" : 68,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035354396/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 66,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-29T22:59:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035354396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035363601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035363601"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, std::move(cached_descendants)));\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-29T22:53:50Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035363601",
      "id" : 1035363601,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII5849tmUR",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 97,
      "pull_request_review_id" : 1198255084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035363601/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-29T22:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035363601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035575327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035575327"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "suggest adding:\r\n```\r\n// This class must be constructed while holding mempool.cs. After construction, the object's\r\n// methods can be called without holding that lock.\r\n```\r\nOr maybe a better place for this comment would be just before the constructor itself.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-30T06:32:54Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035575327",
      "id" : 1035575327,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII5849uaAf",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 16,
      "pull_request_review_id" : 1198749149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035575327/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-02T00:08:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035575327",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035576612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035576612"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could a better word than \"Mock\" be used to name this class? I initially thought this class had to do with testing. Since this is the MiniMiner, maybe `MiniMempoolEntry`?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-30T06:35:09Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035576612",
      "id" : 1035576612,
      "line" : 17,
      "node_id" : "PRRC_kwDOABII5849uaUk",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 17,
      "pull_request_review_id" : 1198749149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035576612/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-02T00:08:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035576612",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035580146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035580146"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This suggestion makes sense since these two individual fields shouldn't need to change (the ancestor fields do change). Making both `const` does compile.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-11-30T06:41:26Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1035580146",
      "id" : 1035580146,
      "in_reply_to_id" : 1028451302,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII5849ubLy",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 19,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 19,
      "pull_request_review_id" : 1198749149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035580146/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-02T00:08:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035580146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2022-11-30T09:45:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1331887329",
      "id" : 1331887329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585PYvzh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331887329/reactions"
      },
      "updated_at" : "2022-11-30T09:45:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1331887329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1037673418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1037673418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not at all sure about this, but this is a reference variable so it's (sort of) a pointer, right? We continue to hold this reference after releasing `mempool.cs` -- is it possible for the transaction to go away (its memory deallocated) if, for example, it gets mined, thereby invalidating our reference? I wonder if this might be better:\r\n```suggestion\r\n    const CTransaction tx;\r\n```\r\nThe debugger shows `sizeof(node::MockMempoolEntry)` is only 40 bytes with `tx` being a reference, and 152 if it's not a reference, which makes sense because `sizeof(CTransaction)` is 120.\r\n\r\nOr, maybe it should be `const CTransactionRef tx;` because then it's a shared pointer, so if the tx gets removed from the mempool, our reference will remain valid until we're done with it. The advantage of this would be we wouldn't be making a full copy of the transaction.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-02T00:08:03Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1037673418",
      "id" : 1037673418,
      "line" : 20,
      "node_id" : "PRRC_kwDOABII58492aPK",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 20,
      "pull_request_review_id" : 1198749149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1037673418/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-02T00:08:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1037673418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038492630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038492630"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be safer not to make this assumption? The cluster would be larger, but since the algorithms are efficient, the performance difference shouldn't be a problem. The `MiniMiner` constructor would be simpler too. Even if currently we're never given a outpoint that conflicts with a transaction _not_ being replaced, could that possibly change in the future?\r\n\r\nInitially, I thought that was I'm suggesting here wouldn't work, because suppose that the transaction that our outpoint refers to (let's call it the parent) has a low feerate, but the transaction we're replacing (the parent's existing child) has a very high feerate. If, contrary to what the code currently does, we ignore the fact that we're replacing the child (we keep the child in the cluster, as if we're spending a different output of the parent), then we might conclude that we don't need to bump the parent's fee -- _whereas we actually do_, because the child will no longer exist!\r\n\r\nBut I think this won't happen because rule 6 of our [replacement policy](https://github.com/bitcoin/bitcoin/blob/master/doc/policy/mempool-replacements.md) requires the replacement transaction to have a higher feerate than all that it's replacing.\r\n\r\n> 6. The replacement transaction's feerate is greater than the feerates of all directly conflicting transactions.\r\n\r\nSo it seems like even if we (mistakenly) think that the existing child will remain and that it will bump the parent somewhat, it won't bump it enough to meet our requested feerate, so we'll still bump it (as required by our desired feerate).",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-02T20:07:42Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038492630",
      "id" : 1038492630,
      "line" : 232,
      "node_id" : "PRRC_kwDOABII58495iPW",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 232,
      "original_position" : 20,
      "original_start_line" : 229,
      "path" : "src/interfaces/chain.h",
      "position" : 20,
      "pull_request_review_id" : 1203025818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038492630/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 229,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-02T20:12:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038492630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038495307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038495307"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Simplification, we just asserted that it's not `entries.end()`\r\n```suggestion\r\n        if (ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-02T20:10:10Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038495307",
      "id" : 1038495307,
      "line" : 142,
      "node_id" : "PRRC_kwDOABII58495i5L",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 142,
      "original_position" : 142,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 142,
      "pull_request_review_id" : 1203025818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038495307/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-02T20:12:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038495307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040297609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040297609"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "898ad9d5904f1b689d18d94f20d92500cf443758 The result of this `find()` could be `entries_by_txid.end()` (not found), because in the previous loop (also over `cluster`), if the transaction is found in `to_be_replaced` (so we take the `else` path), then the transaction is not added to `entries_by_txid`. I think it turns out to be harmless, but I just wanted to point it out because it looks like it may be unintentional.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T01:21:07Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040297609",
      "id" : 1040297609,
      "line" : 79,
      "node_id" : "PRRC_kwDOABII584-Aa6J",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 79,
      "pull_request_review_id" : 1205584712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040297609/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T01:25:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040297609",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040298956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040298956"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // ancestor package with at least the target feerate and don't need to be bumped.\r\n```\r\n(if the feerates are equal, no bump is required)",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T01:24:23Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040298956",
      "id" : 1040298956,
      "line" : 193,
      "node_id" : "PRRC_kwDOABII584-AbPM",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 193,
      "original_position" : 193,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 193,
      "pull_request_review_id" : 1205584712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040298956/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T01:25:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040298956",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040561129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040561129"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should all these class variable names have the `m_` prefix?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T06:44:47Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040561129",
      "id" : 1040561129,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII584-BbPp",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 58,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 58,
      "pull_request_review_id" : 1205980356,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040561129/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T06:44:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040561129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040968456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040968456"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "if `GetIter(txid)` cannot find the txid in `mapTx`, it will return a `std::nullopt`, which will then cause the node to crash. this seems really dangerous. \r\n\r\nwouldn't it be better to remove the assert and just let `GetIterVec` return early with an empty vector if it's passed a txid which isn't in the mempool? based on the comment, that seems to be the intention of this code, so im not sure what good the `assert` is doing here",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T13:23:34Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040968456",
      "id" : 1040968456,
      "line" : 962,
      "node_id" : "PRRC_kwDOABII584-C-sI",
      "original_commit_id" : "995107782a1a512811d54f7abf29249f351a7cbf",
      "original_line" : 962,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 18,
      "pull_request_review_id" : 1206585147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040968456/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T15:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040968456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040973653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040973653"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "the way `GetIterVec` is written, it will return an empty vector if any of the `txids` are not found in the mempool, so wouldn't it be better to check for an empty vector here and return an error to the user letting them know one of the txids they sent wasn't found in the mempool? the way it's written now, if an empty vector is returned the node will crash",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T13:28:30Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040973653",
      "id" : 1040973653,
      "line" : 1222,
      "node_id" : "PRRC_kwDOABII584-C_9V",
      "original_commit_id" : "995107782a1a512811d54f7abf29249f351a7cbf",
      "original_line" : 1222,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 50,
      "pull_request_review_id" : 1206585147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040973653/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T15:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040973653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040986669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040986669"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "with the assert statements in `GetIterVec` and `CalculateCluster`, this is not accurate, unless I am misunderstanding something. if a txid does not exist in the mempool, `GetIter` returns a nullopt, which then causes `GetIterVec` to crash. if we remove that assert, then the assert in `CalculateCluster` checking that `txids.size() == cluster.size()` will crash the node due to `cluster` being an empty vector",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T13:40:15Z",
      "diff_hunk" : "@@ -646,9 +646,16 @@ class CTxMemPool\n     /** Returns an iterator to the given hash, if found */\n     std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n+    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups.\n+     * Does not require that all of the hashes correspond to actual transactions in the mempool,\n+     * only returns the ones that exist. */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Translate a list of hashes into a list of mempool iterators to avoid repeated lookups.\n+     * The nth element in txids becomes the nth element in the returned vector. If any of the txids\n+     * don't actually exist in the mempool, returns an empty vector. */\n+    std::vector<txiter> GetIterVec(const std::vector<uint256>& txids) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1040986669",
      "id" : 1040986669,
      "line" : 658,
      "node_id" : "PRRC_kwDOABII584-DDIt",
      "original_commit_id" : "995107782a1a512811d54f7abf29249f351a7cbf",
      "original_line" : 658,
      "original_position" : 14,
      "original_start_line" : 654,
      "path" : "src/txmempool.h",
      "position" : 14,
      "pull_request_review_id" : 1206585147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040986669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 654,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-06T15:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1040986669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041047298"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041047298"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It could be my own unfamiliarity with the mempool, but I'm not really sure what is happening here. To check my understanding:\r\n\r\n`outpoints` here refers to a set of unconfirmed UTXOs that our wallet would like to spend, meaning they are tx outputs. `GetConflictTx` checks if the outpoint exists in `mapNextTx`, which means it is the `prevout` (or input) into another tx in the mempool. If there is another transaction in the mempool spending one of these outputs, we put the tx which is spending the outpointt into `to_be_replaced`. This is because we plan to construct a transaction which would then replace the conflicting tx, so we want to ignore doing anything with the conflicting txs for now?\r\n\r\nIt might be helpful to be a little more explicit than just `outpoints` (or write a more detailed comment for the function) as this can refer to either `outputs` or `prevouts`, which in this context makes things confusing to follow.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T14:28:37Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041047298",
      "id" : 1041047298,
      "line" : 31,
      "node_id" : "PRRC_kwDOABII584-DR8C",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : 27,
      "path" : "src/node/mini_miner.cpp",
      "position" : 30,
      "pull_request_review_id" : 1206585147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041047298/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-06T15:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041047298",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041231862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041231862"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> To check my understanding:\r\n\r\n> outpoints here refers to a set of unconfirmed UTXOs that our wallet would like to spend, meaning they are tx outputs. \r\n\r\nThey are not necessarily unconfirmed UTXOs, just some specified outpoints/prevouts. They may refer to confirmed or unconfirmed UTXOs. They may refer to outputs that the node doesn't think exist.\r\n\r\n> GetConflictTx checks if the outpoint exists in mapNextTx, which means it is the prevout (or input) into another tx in the mempool. If there is another transaction in the mempool spending one of these outputs, we put the tx which is spending the outpointt into to_be_replaced.\r\n\r\ncorrect, `GetConflictTx` gives you another mempool transaction that spends the same tx.\r\n\r\n> This is because we plan to construct a transaction which would then replace the conflicting tx, so we want to ignore doing anything with the conflicting txs for now?\r\n\r\nWe want to ensure we provide a bump fee for this UTXO, but ensure we calculate the bump fees *exluding the to-be-replaced transaction(s)*. Once they're replaced, they won't be there to bump their ancestors. So if we're replacing the child of a CPFP (e.g. to increase the bump even more), we want the correct fee to bump that parent *without* the original child there.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T17:01:08Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041231862",
      "id" : 1041231862,
      "in_reply_to_id" : 1041047298,
      "line" : 31,
      "node_id" : "PRRC_kwDOABII584-D-_2",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : 27,
      "path" : "src/node/mini_miner.cpp",
      "position" : 30,
      "pull_request_review_id" : 1206979066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041231862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-06T17:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041231862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041233721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041233721"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah good catch, that `else` branch is dead since the assert would hit.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T17:02:49Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041233721",
      "id" : 1041233721,
      "in_reply_to_id" : 1040968456,
      "line" : 962,
      "node_id" : "PRRC_kwDOABII584-D_c5",
      "original_commit_id" : "995107782a1a512811d54f7abf29249f351a7cbf",
      "original_line" : 962,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 18,
      "pull_request_review_id" : 1206979066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041233721/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T17:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041233721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041235267"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041235267"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's true, -1 makes sense. Though note this is an approximation rather than an exact reservation. It may overestimate because transactions may share ancestors/descendants, and may underestimate because the cluster may include more than just ancestors and descendants.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T17:04:26Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041235267",
      "id" : 1041235267,
      "in_reply_to_id" : 1028296326,
      "line" : 1224,
      "node_id" : "PRRC_kwDOABII584-D_1D",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1224,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 52,
      "pull_request_review_id" : 1206979066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041235267/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-06T17:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041235267",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041237868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041237868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this equivalent, given it's changing from `GetMemPoolChildrenConst` to `GetMemPoolChildren` and getting a mutable reference to `m_parents`?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-06T17:07:05Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041237868",
      "id" : 1041237868,
      "in_reply_to_id" : 1028438751,
      "line" : 1249,
      "node_id" : "PRRC_kwDOABII584-EAds",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1249,
      "original_position" : 77,
      "original_start_line" : 1233,
      "path" : "src/txmempool.cpp",
      "position" : 77,
      "pull_request_review_id" : 1206979066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041237868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1233,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-06T17:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041237868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Hopefully this is helpful and not annoying, but here's a branch that makes the first couple commits less assert-happy and applies some of the suggestions to miniminer: https://github.com/glozow/bitcoin/tree/26152-fixups\r\n\r\nlgtm! ",
      "created_at" : "2022-12-07T09:28:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1340645477",
      "id" : 1340645477,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585P6KBl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1340645477/reactions"
      },
      "updated_at" : "2022-12-07T09:28:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1340645477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041977851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041977851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, this explanation really helps!\r\n\r\n> They are not necessarily unconfirmed UTXOs, just some specified outpoints/prevouts. They may refer to confirmed or unconfirmed UTXOs. They may refer to outputs that the node doesn't think exist.\r\n\r\nIs it correct to say these `outpoints` are intended to be spent in a new transaction, as in the wallet has a set of UTXOs that it wants to spend in `TxB` where `TxB` can be a replacement of an already existing `TxA` or it can be an entirely new tx? From there, these `outpoints` can be a mix of confirmed/unconfirmed, but it's assumed at least one outpoint is unconfirmed\r\n\r\n",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-07T09:41:51Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1041977851",
      "id" : 1041977851,
      "in_reply_to_id" : 1041047298,
      "line" : 31,
      "node_id" : "PRRC_kwDOABII584-G1H7",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : 27,
      "path" : "src/node/mini_miner.cpp",
      "position" : 30,
      "pull_request_review_id" : 1208090285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041977851/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-07T09:41:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1041977851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042064307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042064307"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also noticed this and was a bit confused. In the case where `remove` is true, `cache_descendants` never gets added to the `descendants_by_txid` map, which is fine. In the case where `remove` is false, then `txid` should be in `entries_by_txid`, so it will get added to `cache_descendants`, along with all of `descendants`.\r\n\r\nSo what gets added to `descendants_by_txid` is `txidA: [txidA, txidB, txidC...]`, basically the parent + all of its children, which seems incorrect?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-07T10:59:14Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042064307",
      "id" : 1042064307,
      "in_reply_to_id" : 1040297609,
      "line" : 79,
      "node_id" : "PRRC_kwDOABII584-HKOz",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 79,
      "pull_request_review_id" : 1208211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042064307/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-07T10:59:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042064307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042205597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042205597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Another thought I had while looking at this: we check if an `outpoint` has any conflicting spends in the mempool before we check if the outpoint itself is in the mempool. It seems we are inferring that the `outpoint` is in the mempool, otherwise it would not be present in `mapNextTx`. Is this the safest way to do this? Seems fine because `mapNextTx` is updated every time a tx is removed from the mempool, but figured I'd ask anyway in case there is a race condition / code path I'm not seeing which could make this unreliable in an edge case",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-07T13:29:45Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042205597",
      "id" : 1042205597,
      "in_reply_to_id" : 1041047298,
      "line" : 31,
      "node_id" : "PRRC_kwDOABII584-Hsud",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : 27,
      "path" : "src/node/mini_miner.cpp",
      "position" : 30,
      "pull_request_review_id" : 1208421851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042205597/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-07T13:29:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042205597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042441489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042441489"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Is it correct to say these outpoints are intended to be spent in a new transaction, as in the wallet has a set of UTXOs that it wants to spend in TxB where TxB can be a replacement of an already existing TxA or it can be an entirely new tx?\r\n\r\nYes, exactly. If we're constructing `MiniMiner` to `CalculateBumpFees()`, these outpoints are basically all the coins owned by the wallet, i.e. `AvailableCoins`. If we're constructing `MiniMiner` to `CalculateTotalBumpFees()`, these are the outpoints we've decided to use to fund txB.\r\n\r\n> From there, these outpoints can be a mix of confirmed/unconfirmed, but it's assumed at least one outpoint is unconfirmed\r\n\r\nNot exactly. They could all be confirmed / nonexistent - in that case this constructor will end up not constructing any `MockMempoolEntry`s. When you call `CalculateBumpFees()` afterwards, it should just return the already-existing map of all-0 bump fees. This is the first test case in miniminer_tests.cpp.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-07T16:41:17Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042441489",
      "id" : 1042441489,
      "in_reply_to_id" : 1041047298,
      "line" : 31,
      "node_id" : "PRRC_kwDOABII584-ImUR",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : 27,
      "path" : "src/node/mini_miner.cpp",
      "position" : 30,
      "pull_request_review_id" : 1208766532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042441489/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 28,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-07T16:41:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042441489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042478969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042478969"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "what is the significance here? why not just have `return a_feerate >= b_feerate` or something like that?",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-07T17:16:13Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1042478969",
      "id" : 1042478969,
      "line" : 116,
      "node_id" : "PRRC_kwDOABII584-Ivd5",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 115,
      "pull_request_review_id" : 1208822643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042478969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-07T17:16:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042478969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Two thoughts:\r\n\r\n1) I think this could be split up into two PRs; one for `MiniMiner` and another for the wallet logic. My reasoning here is the MiniMiner code seems like it could be useful outside of the wallet use case and thus could be merged independently and both parts by themselves seem complex enough that splitting it into two might make things easier to review.\r\n\r\n2) per @LarryRuane 's comment [#26152 (comment)](https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1038492630), I'm also not totally convinced we need the `to_be_replaced` logic in `MiniMiner`. I took out all of the code relating to `to_be_replaced` and the unit and functional tests still pass. It's possible this is due to insufficient test coverage, in which case having a test case to demonstrate why this logic is necessary would be super helpful. I have a few more thoughts regarding whether `MiniMiner` or the wallet should be handling the conflicting transactions logic, but I'll try to add a concrete example in a test case to first convince myself and also make the conversation more productive",
      "created_at" : "2022-12-09T16:24:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344506798",
      "id" : 1344506798,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585QI4uu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344506798/reactions"
      },
      "updated_at" : "2022-12-09T16:24:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344506798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm also not totally convinced we need the to_be_replaced logic in MiniMiner. I took out all of the code relating to to_be_replaced and the unit and functional tests still pass. It's possible this is due to insufficient test coverage\r\n\r\nI would say this is at least 95% due to insufficient coverage in the unit tests (pretty sparse at the moment). I don't think it's possible to hit very much of the replacement-related logic through functional tests, because our (1) RBF rules currently do not allow any additional unconfirmed inputs so we won't actually ask MiniMiner to calculate much, (2) our wallet will never try to replace something with descendants and (3) our wallet will always use all the inputs from the replacee (so the size of `to_be_replaced` is always 1 and the set of unconfirmed ancestors is identical before and after).\r\n\r\nBut maybe this is a good reason *to* remove it! If it never executes because of how our wallet operates, and the wallet is the only client of this interface, then it would be complexity for no reason. We could just use `CalculateTotalBumpFees()` for a replacement (since that's all the unconfirmed inputs we'll use) and only add logic for replacements if (1) ever changes in the future.",
      "created_at" : "2022-12-09T17:01:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1344541489",
      "id" : 1344541489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585QJBMx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344541489/reactions"
      },
      "updated_at" : "2022-12-09T17:01:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1344541489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> But maybe this is a good reason _to_ remove it! If it never executes because of how our wallet operates, and the wallet is the only client of this interface, then it would be complexity for no reason.\r\n\r\nI think this is a good reason to leave it out for now. I started writing a unit test to try and cover different replacement scenarios, but it felt a little silly to be writing tests for scenarios that would never actually happen to due the RBF rules and how the wallet behaves.\r\n\r\nI also haven't been able to think of a scenario where `MiniMiner` would return an incorrect bumpfee if it didn't have the \"to be replaced logic\" if `MiniMiner` was given a set of \"reasonable\" outpoints in the first place. @Xekyo perhaps you have an example that I haven't thought of?\r\n\r\ntldr; imo we should prefer a simpler implementation which makes as few assumptions as possible and add in more complexity if/when it is needed.",
      "created_at" : "2022-12-11T15:16:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1345580773",
      "id" : 1345580773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585QM-7l",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1345580773/reactions"
      },
      "updated_at" : "2022-12-11T15:16:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1345580773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I had an intuition that the `MiniMiner` could be simpler, here's what I came up with, the latest commit on [this branch](https://github.com/LarryRuane/bitcoin/commits/2022-11-pr26152-refactor) (no PR), which is layered on top of this PR's commits. All the tests pass.\r\n\r\nThis is probably too large of a suggested change to this PR, given how many people have already reviewed it, so we should probably go ahead with this PR as is, and after it merges, I may offer this other implementation as a follow-up PR.",
      "created_at" : "2022-12-13T06:30:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1347810968",
      "id" : 1347810968,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585QVfaY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1347810968/reactions"
      },
      "updated_at" : "2022-12-13T06:30:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1347810968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049908143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049908143"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, fixed",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T16:55:14Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049908143",
      "id" : 1049908143,
      "in_reply_to_id" : 1027114058,
      "line" : 905,
      "node_id" : "PRRC_kwDOABII584-lFOv",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 905,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 15,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049908143/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049908143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049921123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049921123"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I've updated the comment.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T17:04:23Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049921123",
      "id" : 1049921123,
      "in_reply_to_id" : 1027113476,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lIZj",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 228,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049921123/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049921123",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049985921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049985921"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, removed the assert and simplified as suggested by @stickies-v ",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T18:06:52Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);\n+        if (it) {\n+            ret.push_back(*it);\n+        } else {\n+            // return empty vector to let the caller know this failed.\n+            std::vector<txiter> empty_vector;\n+            return empty_vector;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049985921",
      "id" : 1049985921,
      "in_reply_to_id" : 1028280212,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lYOB",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 969,
      "original_position" : 25,
      "original_start_line" : 963,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049985921/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049985921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049990387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049990387"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That's true, but since this is just allocating enough space for the iterators we are adding to the vector later, I don't think having one slot more than we might need is going to cause any issues.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T18:12:08Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049990387",
      "id" : 1049990387,
      "in_reply_to_id" : 1028296326,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lZTz",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1224,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049990387/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049990387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049993532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049993532"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I do not understand this question. Could you elaborate?",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T18:15:30Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049993532",
      "id" : 1049993532,
      "in_reply_to_id" : 1028322453,
      "line" : 1169,
      "node_id" : "PRRC_kwDOABII584-laE8",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1169,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 53,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049993532/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049993532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049997727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049997727"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added an `@pre` statement",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T18:20:17Z",
      "diff_hunk" : "@@ -694,6 +701,9 @@ class CTxMemPool\n                                    std::string& errString,\n                                    bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Get entire list of connected transactions for all transactions in txids. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049997727",
      "id" : 1049997727,
      "in_reply_to_id" : 1028440069,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lbGf",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 704,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049997727/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049997727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049999464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049999464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated the name to your suggestion",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T18:22:17Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1049999464",
      "id" : 1049999464,
      "in_reply_to_id" : 1028330615,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lbho",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1232,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049999464/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1049999464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050001999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050001999"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated the comment to correct",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T18:25:10Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050001999",
      "id" : 1050001999,
      "in_reply_to_id" : 1028377597,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lcJP",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1231,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050001999/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050001999",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050061256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050061256"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "TODO: Tried this, but it broke all sorts of things, gonna revisit later. ",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T19:36:34Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050061256",
      "id" : 1050061256,
      "in_reply_to_id" : 1028438751,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lqnI",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1195,
      "original_position" : 77,
      "original_start_line" : 1233,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050061256/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050061256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050073812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050073812"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure, fixed here and in other instances",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T19:49:20Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050073812",
      "id" : 1050073812,
      "in_reply_to_id" : 1028446649,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-ltrU",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050073812/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050073812",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050088372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050088372"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since this is a reference on an object held in mempool, and we have a lock on mempool, I think this is not necessary.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T20:07:13Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050088372",
      "id" : 1050088372,
      "in_reply_to_id" : 1028448913,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lxO0",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050088372/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050088372",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050089826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050089826"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`fee_with_ancestors` and `vsize_with_ancestors` get set directly in some code of mini_miner.cpp, so I think they cannot be private without also adding setters. I did make `vsize_individual` private",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T20:08:58Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050089826",
      "id" : 1050089826,
      "in_reply_to_id" : 1028449731,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-lxli",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : 23,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050089826/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050089826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050105884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050105884"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, made the two individuals const",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-15T20:27:48Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050105884",
      "id" : 1050105884,
      "in_reply_to_id" : 1028451302,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-l1gc",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 19,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050105884/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050105884",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050263740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050263740"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The benchmark (part of [my branch](https://github.com/LarryRuane/bitcoin/commits/2022-11-pr26152-refactor)) experienced a near-infinite loop without this change. The reason is that the benchmark test mempool has such a high degree of fan-out and fan-in that a single transaction could be added to the `to_process` set over and over. Of course, std::set doesn't allow duplicates, but I added some debug logging that shows the same tx being added, removed, processed, then added again, many times. This change fixed the problem completely.\r\n```suggestion\r\n                    if (!ancestors.count(parent_it)) {\r\n                        to_process.insert(parent_it);\r\n                        ancestors.insert(parent_it);\r\n                    }\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T00:36:13Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050263740",
      "id" : 1050263740,
      "line" : 159,
      "node_id" : "PRRC_kwDOABII584-mcC8",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 159,
      "original_position" : 159,
      "original_start_line" : 158,
      "path" : "src/node/mini_miner.cpp",
      "position" : 159,
      "pull_request_review_id" : 1220130696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050263740/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 158,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-16T06:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050263740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050281965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050281965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Same change as above -- this is _much_ more efficient with a large cluster, for example, running the benchmark.\r\n```suggestion\r\n                if (!ancestors.count(parent_it)) {\r\n                    to_process.insert(parent_it);\r\n                    ancestors.insert(parent_it);\r\n                }\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T01:14:58Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;\n+}\n+\n+CAmount MiniMiner::CalculateTotalBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // All remaining ancestors that are not part of in_block must be bumped, but no other relatives (e.g. siblings, niblings, â¦)\n+    std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+    std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+\n+    for (const auto& outpoint : requested_outpoints) {\n+        const auto& txid = outpoint.hash;\n+        // Skip any ancestors that have a higher minerscore already\n+        if (in_block.find(txid) != in_block.end()) continue;\n+        auto iter = entries_by_txid.find(outpoint.hash);\n+        assert(iter != entries_by_txid.end());\n+        to_process.insert(iter);\n+        ancestors.insert(iter);\n+    }\n+\n+    while (!to_process.empty()) {\n+        auto iter = to_process.begin();\n+        assert(iter != to_process.end());\n+        const CTransaction& tx = (*iter)->second.GetTx();\n+        for (const auto& input : tx.vin) {\n+            if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                to_process.insert(parent_it);\n+                ancestors.insert(parent_it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050281965",
      "id" : 1050281965,
      "line" : 249,
      "node_id" : "PRRC_kwDOABII584-mgft",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 249,
      "original_position" : 249,
      "original_start_line" : 248,
      "path" : "src/node/mini_miner.cpp",
      "position" : 249,
      "pull_request_review_id" : 1220130696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050281965/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 248,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-16T06:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050281965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050360878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050360878"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            // each entry's descendant set includes itself\r\n            assert(it != descendant_set_by_txid.end());\r\n```\r\n(it took me a little while to figure out why this assertion is valid)",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T04:28:49Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050360878",
      "id" : 1050360878,
      "line" : 175,
      "node_id" : "PRRC_kwDOABII584-mzwu",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 175,
      "original_position" : 175,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 175,
      "pull_request_review_id" : 1220130696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050360878/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-16T06:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050360878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050402228"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050402228"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You may want to assert that these don't go negative, I would actually do it before the decrement, like this:\r\n```\r\nassert(descendant->second.vsize_with_ancestors >= anc->second.GetTxSize());\r\ndescendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T06:11:42Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050402228",
      "id" : 1050402228,
      "line" : 178,
      "node_id" : "PRRC_kwDOABII584-m920",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 178,
      "original_position" : 178,
      "original_start_line" : 177,
      "path" : "src/node/mini_miner.cpp",
      "position" : 178,
      "pull_request_review_id" : 1220130696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050402228/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 177,
      "start_side" : "RIGHT",
      "updated_at" : "2022-12-16T06:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050402228",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050404621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050404621"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Something more important: this `emplace_back()` shouldn't be here at all, because each mempool entry is a member of its own descendants' list. So this \"main\" transaction gets added to `cached_descendants` below. This was causing the `fee_with_ancestors` and `vsize_with_ancestors` to go negative near the end of `BuildMockTemplate()` below.",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T06:17:22Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050404621",
      "id" : 1050404621,
      "line" : 79,
      "node_id" : "PRRC_kwDOABII584-m-cN",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 79,
      "pull_request_review_id" : 1220130696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050404621/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-16T06:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050404621",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050405337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050405337"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "simpler:\r\n```suggestion\r\n            auto it = descendant_set_by_txid.find(anc->first);\r\n```",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T06:19:04Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050405337",
      "id" : 1050405337,
      "line" : 174,
      "node_id" : "PRRC_kwDOABII584-m-nZ",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 174,
      "original_position" : 174,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 174,
      "pull_request_review_id" : 1220130696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050405337/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-16T06:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050405337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050406026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050406026"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            in_block.insert(anc->first);\r\n```\r\n(functionally the same, just simpler)",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T06:20:37Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050406026",
      "id" : 1050406026,
      "line" : 171,
      "node_id" : "PRRC_kwDOABII584-m-yK",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 171,
      "original_position" : 171,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 171,
      "pull_request_review_id" : 1220130696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050406026/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-16T06:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050406026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050420893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050420893"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@josibake \r\n> ... which seems incorrect?\r\n\r\nNo, I think it's a convention in the strange Land of Mempool that a transaction's ancestor and descendant lists both include the transaction itself. This relates directly to my [comment](https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050404621) elsewhere that the `emplace_back()` should be removed; as it's currently written, the list would be: `txidA: [txidA, txidA, txidB, txidC...]`. This later causes a major accounting problem!",
      "commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "created_at" : "2022-12-16T06:51:14Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1050420893",
      "id" : 1050420893,
      "in_reply_to_id" : 1040297609,
      "line" : 79,
      "node_id" : "PRRC_kwDOABII584-nCad",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 79,
      "pull_request_review_id" : 1220353810,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050420893/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-16T06:51:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1050420893",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055855643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055855643"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I could not get this to work, could you elaborate what you propose?",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-22T21:15:24Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;\n+\n+    // What we're trying to calculate.\n+    std::map<COutPoint, CAmount> bump_fees;\n+\n+    // The constructed block template\n+    std::set<uint256> in_block;\n+\n+    // Information on the current status of the block\n+    CAmount total_fees{0};\n+    int64_t total_vsize{0};\n+\n+    /** Main data structure holding the entries, can be indexed by txid */\n+    std::map<uint256, MockMempoolEntry> entries_by_txid;\n+    using MockEntryMap = decltype(entries_by_txid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055855643",
      "id" : 1055855643,
      "in_reply_to_id" : 1028460084,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584-7xQb",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 82,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055855643/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055855643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055856418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055856418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Mh, I'll consider it, but it's also an easy change to make later.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2022-12-22T21:16:38Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1055856418",
      "id" : 1055856418,
      "in_reply_to_id" : 1028461644,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII584-7xci",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 57,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 57,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055856418/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055856418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082932473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082932473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T18:43:18Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082932473",
      "id" : 1082932473,
      "in_reply_to_id" : 1028283266,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjDz5",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 961,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082932473/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082932473",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082941287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082941287"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I followed your suggestion",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T18:54:28Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).\n+    std::map<uint256, std::vector<COutPoint>> outpoints_needed_by_txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082941287",
      "id" : 1082941287,
      "in_reply_to_id" : 1028482615,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjF9n",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 68,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082941287/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082941287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082942809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082942809"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I do not know from the top of my head, I will need to look more into this",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T18:56:30Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082942809",
      "id" : 1082942809,
      "in_reply_to_id" : 1028491577,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjGVZ",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 58,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082942809/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082942809",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947081"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You are right, I could not place the comment either and removed it.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:02:15Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947081",
      "id" : 1082947081,
      "in_reply_to_id" : 1029977800,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjHYJ",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947081/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947081",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947861"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I used your suggestion.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:03:24Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082947861",
      "id" : 1082947861,
      "in_reply_to_id" : 1035216664,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjHkV",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947861/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082947861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082948093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082948093"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:03:43Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.\n+    for (const auto& txid : in_block) {\n+        // Not all of the block transactions were necessarily requested.\n+        auto it = outpoints_needed_by_txid.find(txid);\n+        if (it != outpoints_needed_by_txid.end()) {\n+            for (const auto& outpoint : it->second) {\n+                bump_fees.emplace(std::make_pair(outpoint, 0));\n+            }\n+            outpoints_needed_by_txid.erase(it);\n+        }\n+    }\n+    // For each transaction that remains, the bumpfee is the cost to raise it and its ancestors\n+    // to the target feerate, target_feerate * ancestor_size - ancestor_fees\n+    for (const auto& [txid, outpoints] : outpoints_needed_by_txid) {\n+        auto it = entries_by_txid.find(txid);\n+        assert(it != entries_by_txid.end());\n+        if (it != entries_by_txid.end()) {\n+            assert(target_feerate.GetFee(it->second.GetSizeWithAncestors()) > it->second.GetModFeesWithAncestors());\n+            const CAmount bump_fee{target_feerate.GetFee(it->second.GetSizeWithAncestors())\n+                                   - it->second.GetModFeesWithAncestors()};\n+            assert(bump_fee >= 0);\n+            for (const auto& outpoint : outpoints) {\n+                bump_fees.emplace(std::make_pair(outpoint, bump_fee));\n+            }\n+        }\n+    }\n+    return this->bump_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082948093",
      "id" : 1082948093,
      "in_reply_to_id" : 1035217598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjHn9",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 219,
      "original_position" : 219,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082948093/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082948093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082950297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082950297"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I removed the unnecessary `std::make_pair` throughout",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:06:51Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082950297",
      "id" : 1082950297,
      "in_reply_to_id" : 1035218401,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjIKZ",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082950297/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082950297",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082976081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082976081"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, looks great",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:39:49Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082976081",
      "id" : 1082976081,
      "in_reply_to_id" : 1035234823,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjOdR",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : 53,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082976081/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082976081",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082977273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082977273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good idea, clarified the example",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:41:25Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082977273",
      "id" : 1082977273,
      "in_reply_to_id" : 1035269211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjOv5",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 219,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082977273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082977273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082978994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082978994"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Adopted your phrasing of the comment",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:43:48Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;\n+\n+    // Set once per lifetime, fill in during initialization.\n+    // txids of to-be-replaced transactions\n+    std::set<uint256> to_be_replaced;\n+\n+    // After using the outpoints to figure out which transactions are to be replaced, we can just\n+    // work with txids (each outpoint from a single tx should have the same bumpfee independently).\n+    // Cache which outpoint are needed for each tx so we don't have to look up all the outputs.\n+    // Excludes to-be-replaced and unavailable transactions (set to 0).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082978994",
      "id" : 1082978994,
      "in_reply_to_id" : 1035318488,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjPKy",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 64,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082978994/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082978994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082979907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082979907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sgtm, thanks",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:45:06Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.\n+    //\n+    //  Any outpoints that are otherwise unavailable from the mempool (e.g. UTXOs from confirmed\n+    //  transactions or transactions not yet broadcast by the wallet) are given a bump fee of 0.\n+    //\n+    //  If multiple outpoints come from the same transaction (which would be very rare because\n+    //  it means that one transaction has multiple change outputs or paid the same wallet using multiple\n+    //  outputs in the same transaction) or have shared ancestry, the bump fees are calculated\n+    //  independently, i.e. as if only one of them is spent. This may result in double-fee-bumping. This\n+    //  caveat can be rectified per use of the sister-function CalculateTotalBumpFees(â¦).\n+    virtual std::map<COutPoint, CAmount> CalculateBumpFees(const std::vector<COutPoint>& outpoints, const CFeeRate& target_feerate) = 0;\n+\n+    //! Calculate the shared bump fees for a given set of outpoints per the\n+    //  same strategy as in CalculateBumpFees(â¦).  Other than the above call,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082979907",
      "id" : 1082979907,
      "in_reply_to_id" : 1035330287,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjPZD",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 245,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082979907/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082979907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082981470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082981470"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This refers to transactions already bumped by other transactions in our mempool, not bumped by our calculation of bump fees. I've amended the phrase to clarify.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T19:47:13Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1082981470",
      "id" : 1082981470,
      "in_reply_to_id" : 1035335097,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjPxe",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 226,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082981470/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082981470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039335"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sounds right to me",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T20:52:42Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039335",
      "id" : 1083039335,
      "in_reply_to_id" : 1035354396,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ajd5n",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 80,
      "original_position" : 68,
      "original_start_line" : 66,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039335/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039335",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039809"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good idea",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T20:53:24Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083039809",
      "id" : 1083039809,
      "in_reply_to_id" : 1035363601,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjeBB",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039809/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083039809",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083050607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083050607"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, in fact not accounting for overlapping ancestries here might have been a bug.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T21:06:56Z",
      "diff_hunk" : "@@ -80,7 +80,18 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    for (const CTxIn& txin : wtx.tx->vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083050607",
      "id" : 1083050607,
      "in_reply_to_id" : 1026970423,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ajgpv",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 88,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/wallet/feebumper.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083050607/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083050607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083052189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083052189"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added before the constructor",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T21:08:35Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083052189",
      "id" : 1083052189,
      "in_reply_to_id" : 1035575327,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII585AjhCd",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 16,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083052189/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083052189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083055314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083055314"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Renamed to `MiniMinerMempoolEntry`, although I don't feel strongly about the name.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T21:13:11Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083055314",
      "id" : 1083055314,
      "in_reply_to_id" : 1035576612,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjhzS",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083055314/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083055314",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083073942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083073942"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for diving in this deeply, that sounds correct to me.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T21:38:56Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083073942",
      "id" : 1083073942,
      "in_reply_to_id" : 1037673418,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjmWW",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083073942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083073942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083078152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083078152"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note to self: TODO",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T21:45:57Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083078152",
      "id" : 1083078152,
      "in_reply_to_id" : 1038492630,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AjnYI",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 232,
      "original_position" : 20,
      "original_start_line" : 229,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083078152/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083078152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083079136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083079136"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch, fixed",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-20T21:47:34Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1083079136",
      "id" : 1083079136,
      "in_reply_to_id" : 1038495307,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Ajnng",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 142,
      "original_position" : 142,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083079136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083079136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084555371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084555371"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note to self: TODO",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-23T21:08:54Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084555371",
      "id" : 1084555371,
      "in_reply_to_id" : 1040297609,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ApQBr",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084555371/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084555371",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084559378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084559378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, corrected",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-23T21:12:40Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();\n+            }\n+        }\n+        DeleteAncestorPackage(ancestors);\n+        assert(entries.size() == entries_by_txid.size());\n+    }\n+}\n+\n+std::map<COutPoint, CAmount> MiniMiner::CalculateBumpFees(const CFeeRate& target_feerate)\n+{\n+    // Build a block template until the target feerate is hit.\n+    BuildMockTemplate(target_feerate);\n+    assert(in_block.empty() || CFeeRate(total_fees, total_vsize) >= target_feerate);\n+\n+    // Each transaction that \"made it into the block\" has a bumpfee of 0, i.e. they are part of an\n+    // ancestor package that exceeds the target feerate and don't need to be bumped.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084559378",
      "id" : 1084559378,
      "in_reply_to_id" : 1040298956,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ApRAS",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 193,
      "original_position" : 193,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084559378/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084559378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084646082"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084646082"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, yes, they should.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-23T22:42:59Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1084646082",
      "id" : 1084646082,
      "in_reply_to_id" : 1040561129,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ApmLC",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 58,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084646082/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084646082",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092491521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092491521"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Renamed all MiniMiner class variables to be prefixed with `m_`",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-31T21:18:31Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092491521",
      "id" : 1092491521,
      "in_reply_to_id" : 1040561129,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BHhkB",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 58,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092491521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092491521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092493616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092493616"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-31T21:21:07Z",
      "diff_hunk" : "@@ -952,6 +953,24 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n     return ret;\n }\n \n+std::vector<CTxMemPool::txiter> CTxMemPool::GetIterVec(const std::vector<uint256>& txids) const\n+{\n+    std::vector<txiter> ret;\n+    ret.reserve(txids.size());\n+    for (const auto& txid : txids) {\n+        const auto it = GetIter(txid);\n+        assert(it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092493616",
      "id" : 1092493616,
      "in_reply_to_id" : 1040968456,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BHiEw",
      "original_commit_id" : "995107782a1a512811d54f7abf29249f351a7cbf",
      "original_line" : 962,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092493616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092493616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092494674"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092494674"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-31T21:22:26Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092494674",
      "id" : 1092494674,
      "in_reply_to_id" : 1040973653,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BHiVS",
      "original_commit_id" : "995107782a1a512811d54f7abf29249f351a7cbf",
      "original_line" : 1222,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092494674/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-31T21:48:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092494674",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092496414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092496414"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-01-31T21:24:31Z",
      "diff_hunk" : "@@ -646,9 +646,16 @@ class CTxMemPool\n     /** Returns an iterator to the given hash, if found */\n     std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n+    /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups.\n+     * Does not require that all of the hashes correspond to actual transactions in the mempool,\n+     * only returns the ones that exist. */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Translate a list of hashes into a list of mempool iterators to avoid repeated lookups.\n+     * The nth element in txids becomes the nth element in the returned vector. If any of the txids\n+     * don't actually exist in the mempool, returns an empty vector. */\n+    std::vector<txiter> GetIterVec(const std::vector<uint256>& txids) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1092496414",
      "id" : 1092496414,
      "in_reply_to_id" : 1040986669,
      "line" : 534,
      "node_id" : "PRRC_kwDOABII585BHiwe",
      "original_commit_id" : "995107782a1a512811d54f7abf29249f351a7cbf",
      "original_line" : 534,
      "original_position" : 14,
      "original_start_line" : 654,
      "path" : "src/txmempool.h",
      "position" : 14,
      "pull_request_review_id" : 1187107175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092496414/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 530,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-31T21:48:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1092496414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093127455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093127455"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mutable reference = the `merge` is modifying the entry's `m_parents` to now include its children as well. You can make a separate set that copies in the iterators from `GetMemPoolParentsConst` and `GetMemPoolChildrenConst`, but I'm not sure that's worth the lines of code reduction.",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-02-01T12:00:45Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093127455",
      "id" : 1093127455,
      "in_reply_to_id" : 1028438751,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BJ80f",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1195,
      "original_position" : 77,
      "original_start_line" : 1233,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1278975243,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093127455/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-01T12:00:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093127455",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-02-01T16:01:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1412304834",
      "id" : 1412304834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585ULg_C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412304834/reactions"
      },
      "updated_at" : "2023-02-01T16:01:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412304834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093531601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093531601"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I expect this to be used to make the sorting order stable without introducing a gameable tie-breaker\r\n",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-02-01T17:30:49Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093531601",
      "id" : 1093531601,
      "in_reply_to_id" : 1042478969,
      "line" : 131,
      "node_id" : "PRRC_kwDOABII585BLffR",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 131,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 131,
      "pull_request_review_id" : 1279568584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093531601/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-01T18:01:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093531601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093563190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093563190"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Great, thanks",
      "commit_id" : "6403f5834978282f6bb32cc7194f6f1f61da11b5",
      "created_at" : "2023-02-01T18:01:22Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093563190",
      "id" : 1093563190,
      "in_reply_to_id" : 1050263740,
      "line" : 174,
      "node_id" : "PRRC_kwDOABII585BLnM2",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 174,
      "original_position" : 159,
      "original_start_line" : 158,
      "path" : "src/node/mini_miner.cpp",
      "position" : 174,
      "pull_request_review_id" : 1279568584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093563190/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 173,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-01T18:01:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093563190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093853664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093853664"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Gonna skip this for now, unless there is more demand for it",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-01T23:39:16Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {\n+        return sum + it->GetCountWithAncestors() + it->GetCountWithDescendants(); }));\n+    {\n+        // Use epoch: visiting an entry means we have added it to the cluster vector.\n+        WITH_FRESH_EPOCH(m_epoch);\n+        for (const auto& it : cluster) {\n+            visited(it);\n+        }\n+        // i = index of where the list of unprocessed starts\n+        for (size_t i{0}, unprocessed_count{txids.size()}; i < unprocessed_count; ++i) {\n+            const auto curr = cluster[i];\n+            for (const CTxMemPoolEntry& parent_entry : curr->GetMemPoolParentsConst()) {\n+                const auto parent_it = mapTx.iterator_to(parent_entry);\n+                if (!visited(parent_it)) {\n+                    cluster.push_back(parent_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }\n+            for (const CTxMemPoolEntry& child_entry : curr->GetMemPoolChildrenConst()) {\n+                const auto child_it = mapTx.iterator_to(child_entry);\n+                if (!visited(child_it)) {\n+                    cluster.push_back(child_it);\n+                    // we still need to process this\n+                    ++unprocessed_count;\n+                }\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093853664",
      "id" : 1093853664,
      "in_reply_to_id" : 1028438751,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BMuHg",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1195,
      "original_position" : 77,
      "original_start_line" : 1233,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1280046602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093853664/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-01T23:39:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093853664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093864959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093864959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removing `requested_outpoints` in favor of the keys of `bump_fees` breaks tests, so I assume theyâre not overlapping exactly.",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-02T00:01:27Z",
      "diff_hunk" : "@@ -0,0 +1,110 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_MINI_MINER_H\n+#define BITCOIN_NODE_MINI_MINER_H\n+\n+#include <txmempool.h>\n+\n+#include <memory>\n+#include <optional>\n+#include <stdint.h>\n+\n+namespace node {\n+\n+// Container for tracking updates to ancestor feerate as we include ancestors in the \"block\"\n+class MockMempoolEntry\n+{\n+    CAmount fee_individual;\n+    const CTransaction& tx;\n+\n+public:\n+    CAmount fee_with_ancestors;\n+    int64_t vsize_individual;\n+    int64_t vsize_with_ancestors;\n+    explicit MockMempoolEntry(CTxMemPool::txiter entry) :\n+        fee_individual{entry->GetModifiedFee()},\n+        tx{entry->GetTx()},\n+        fee_with_ancestors{entry->GetModFeesWithAncestors()},\n+        vsize_individual(entry->GetTxSize()),\n+        vsize_with_ancestors(entry->GetSizeWithAncestors())\n+    { }\n+\n+    CAmount GetModifiedFee() const { return fee_individual; }\n+    CAmount GetModFeesWithAncestors() const { return fee_with_ancestors; }\n+    int64_t GetTxSize() const { return vsize_individual; }\n+    int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n+    const CTransaction& GetTx() const { return tx; }\n+};\n+\n+void UpdateForMinedAncestor(const MockMempoolEntry& ancestor, const MockMempoolEntry& descendant);\n+\n+// Comparator needed for std::set<MockEntryMap::iterator>\n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n+/** A minimal version of BlockAssembler. Allows us to run the mining algorithm on a subset of\n+ * mempool transactions, ignoring consensus rules, to calculate mining scores. */\n+class MiniMiner\n+{\n+    // Original outpoints requested\n+    std::vector<COutPoint> requested_outpoints;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093864959",
      "id" : 1093864959,
      "in_reply_to_id" : 1028491577,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BMw3_",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 58,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : null,
      "pull_request_review_id" : 1280061574,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093864959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T00:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093864959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093871261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093871261"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâm not sure I follow your train of thought here. I think you have since reviewed this further, do you think this still needs to be addressed?",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-02T00:14:08Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1093871261",
      "id" : 1093871261,
      "in_reply_to_id" : 1038492630,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BMyad",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 232,
      "original_position" : 20,
      "original_start_line" : 229,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 1280071076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093871261/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-02T00:14:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1093871261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâve split the four commits that establish the **MiniMiner** logic into their own PR #27021. Iâll work on implementing the remaining open comments from here in the new PR. New review of the first four commits should please be added to #27021 forth going.",
      "created_at" : "2023-02-02T00:29:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1412961365",
      "id" : 1412961365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585UOBRV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412961365/reactions"
      },
      "updated_at" : "2023-02-02T00:30:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412961365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094801361"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094801361"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We don't know the cluster size before, so this doesnât allow us to optimize here",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-02T16:50:03Z",
      "diff_hunk" : "@@ -1196,3 +1214,40 @@ const std::string RemovalReasonToString(const MemPoolRemovalReason& r) noexcept\n     }\n     assert(false);\n }\n+\n+std::vector<CTxMemPool::txiter> CTxMemPool::CalculateCluster(const std::vector<uint256>& txids) const\n+{\n+    AssertLockHeld(cs);\n+    std::vector<txiter> cluster{GetIterVec(txids)};\n+    assert(cluster.size() == txids.size());\n+    cluster.reserve(std::accumulate(cluster.cbegin(), cluster.cend(), 0, [](size_t sum, const auto it) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094801361",
      "id" : 1094801361,
      "in_reply_to_id" : 1028322453,
      "line" : 1169,
      "node_id" : "PRRC_kwDOABII585BQVfR",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 1169,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 53,
      "pull_request_review_id" : 1281460983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094801361/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T16:50:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094801361",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094806366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094806366"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thinking more about this, I think the assumption is valid and I don't expect it to change soon. It is also documented here, so if it changes, people should notice the conflict. We will add a test for this.",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-02T16:53:35Z",
      "diff_hunk" : "@@ -213,6 +213,42 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants, size_t* ancestorsize = nullptr, CAmount* ancestorfees = nullptr) = 0;\n \n+    //! For each outpoint, calculate the fee-bumping cost to spend this outpoint at the specified\n+    //  feerate, including bumping its ancestors. For example, if the target feerate is 10sat/vbyte\n+    //  and this outpoint refers to a mempool transaction at 5sat/vbyte, the bump fee includes the\n+    //  cost to bump the mempool transaction to 10sat/vbyte (i.e. 5 * mempooltx.vsize). If that\n+    //  transaction also has, say, an unconfirmed parent with a feerate of 1sat/vbyte, the bump fee\n+    //  includes the cost to bump the parent (i.e. 9 * parentmempooltx.vsize).\n+    //\n+    //  If the outpoint comes from an unconfirmed transaction that is already above the target\n+    //  feerate or bumped by its descendant(s) already, it does not need to be bumped. Its bump fee\n+    //  is 0. Likewise, if any of the transaction's ancestors are already bumped, they are not\n+    //  included in the transaction's bump fee.\n+    //\n+    //  This includes fee-bumping in RBFs. If an outpoint conflicts with another transaction in the\n+    //  mempool, it is assumed that the goal is to replace that transaction. As such, the\n+    //  calculation will exclude the to-be-replaced transaction, but will include the fee-bumping\n+    //  cost. If bump fees of descendants of the to-be-replaced transaction are requested, the value\n+    //  will be 0. Fee-related RBF rules are not included as they are logically distinct.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1094806366",
      "id" : 1094806366,
      "in_reply_to_id" : 1038492630,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BQWte",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 232,
      "original_position" : 20,
      "original_start_line" : 229,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 1281467174,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094806366/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-02T16:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094806366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095002769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095002769"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added a comment",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-02T19:34:08Z",
      "diff_hunk" : "@@ -0,0 +1,220 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095002769",
      "id" : 1095002769,
      "in_reply_to_id" : 1042478969,
      "line" : 132,
      "node_id" : "PRRC_kwDOABII585BRGqR",
      "original_commit_id" : "b669fd94f84e679d4549ef0abe1b0483e1406152",
      "original_line" : 132,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : 132,
      "pull_request_review_id" : 1281780867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095002769/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T19:34:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095002769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095009931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095009931"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, Iâve adopted your suggestion, although with an `Assume` instead.",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-02T19:40:17Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));\n+        // If a tx is to-be-replaced, remove any of its descendants so they can't fee-bump anything.\n+        // this case should be rare as the wallet won't normally attempt to replace transactions\n+        // with descendants.\n+        const bool remove = to_be_replaced.find(txid) != to_be_replaced.end();\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(txiter, descendants);\n+\n+        for (const auto& desc_txiter : descendants) {\n+            auto desc_it{entries_by_txid.find(desc_txiter->GetTx().GetHash())};\n+            if (desc_it != entries_by_txid.end()) {\n+                if (remove) {\n+                    entries_by_txid.erase(desc_it);\n+                } else {\n+                    cached_descendants.push_back(desc_it);\n+                }\n+            }\n+        }\n+        if (!remove) descendant_set_by_txid.emplace(std::make_pair(txid, cached_descendants));\n+    }\n+    // Release the mempool lock; we now have all the information we need for a subset of the entries\n+    // we care about. We will solely operate on the MockMempoolEntry map from now on.\n+    assert(entries.size() == entries_by_txid.size());\n+    assert(entries.size() == descendant_set_by_txid.size());\n+    assert(in_block.empty());\n+}\n+\n+// Compare by ancestor feerate, then iterator\n+struct AncestorFeerateComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b) const {\n+        const CFeeRate a_feerate(a->second.GetModFeesWithAncestors(), a->second.GetSizeWithAncestors());\n+        const CFeeRate b_feerate(b->second.GetModFeesWithAncestors(), b->second.GetSizeWithAncestors());\n+        if (a_feerate != b_feerate) {\n+            return a_feerate > b_feerate;\n+        }\n+        return &(*a) > &(*b);\n+    }\n+};\n+\n+void MiniMiner::DeleteAncestorPackage(const std::set<MockEntryMap::iterator, IteratorComparator>& ancestors)\n+{\n+    for (const auto& anc : ancestors) {\n+        auto vec_it = std::find(entries.begin(), entries.end(), anc);\n+        assert(vec_it != entries.end());\n+        entries.erase(vec_it);\n+        entries_by_txid.erase(anc);\n+    }\n+}\n+\n+void MiniMiner::BuildMockTemplate(const CFeeRate& target_feerate)\n+{\n+    while (!entries_by_txid.empty()) {\n+        // Sort again, since transaction removal may change some entries' ancestor feerates.\n+        std::sort(entries.begin(), entries.end(), AncestorFeerateComparator());\n+\n+        // Pick highest ancestor feerate entry.\n+        auto best_iter = entries.begin();\n+        assert(best_iter != entries.end());\n+        const auto ancestor_package_size = (*best_iter)->second.GetSizeWithAncestors();\n+        const auto ancestor_package_fee = (*best_iter)->second.GetModFeesWithAncestors();\n+        // Stop here. Everything that didn't \"make it into the block\" has bumpfee.\n+        if (best_iter == entries.end() || ancestor_package_fee < target_feerate.GetFee(ancestor_package_size)) {\n+            break;\n+        }\n+\n+        // Calculate ancestors on the fly. This lookup should be fairly cheap, and ancestor sets\n+        // change at every iteration, so this is more efficient than maintaining a cache.\n+        std::set<MockEntryMap::iterator, IteratorComparator> ancestors;\n+        std::set<MockEntryMap::iterator, IteratorComparator> to_process;\n+        ancestors.insert(*best_iter);\n+        to_process.insert(*best_iter);\n+        while (!to_process.empty()) {\n+            auto iter = to_process.begin();\n+            assert(iter != to_process.end());\n+            const CTransaction& tx = (*iter)->second.GetTx();\n+            for (const auto& input : tx.vin) {\n+                if (auto parent_it{entries_by_txid.find(input.prevout.hash)}; parent_it != entries_by_txid.end()) {\n+                    to_process.insert(parent_it);\n+                    ancestors.insert(parent_it);\n+                }\n+            }\n+            to_process.erase(iter);\n+        }\n+        assert(ancestor_package_size == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](int64_t sum, const auto it) {return sum + it->second.GetTxSize();}));\n+        assert(ancestor_package_fee == std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+            [](CAmount sum, const auto it) {return sum + it->second.GetModifiedFee();}));\n+\n+        // \"Mine\" all transactions in this ancestor set.\n+        for (const auto& anc : ancestors) {\n+            in_block.insert(anc->second.GetTx().GetHash());\n+            total_fees += anc->second.GetModifiedFee();\n+            total_vsize += anc->second.GetTxSize();\n+            auto it = descendant_set_by_txid.find(anc->second.GetTx().GetHash());\n+            assert(it != descendant_set_by_txid.end());\n+            for (const auto& descendant : it->second) {\n+                descendant->second.vsize_with_ancestors -= anc->second.GetTxSize();\n+                descendant->second.fee_with_ancestors -= anc->second.GetModifiedFee();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095009931",
      "id" : 1095009931,
      "in_reply_to_id" : 1050402228,
      "line" : 197,
      "node_id" : "PRRC_kwDOABII585BRIaL",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 197,
      "original_position" : 178,
      "original_start_line" : 177,
      "path" : "src/node/mini_miner.cpp",
      "position" : 197,
      "pull_request_review_id" : 1281789084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095009931/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 196,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-02T19:40:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095009931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095018669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095018669"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, it would be more correct to gate the `emplace_back()` on `!remove`.",
      "commit_id" : "5c1abe6e331a9cb0ad0c5380e1a656cb287c9316",
      "created_at" : "2023-02-02T19:48:13Z",
      "diff_hunk" : "@@ -0,0 +1,265 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/mini_miner.h>\n+\n+#include <consensus/amount.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <timedata.h>\n+#include <util/check.h>\n+#include <util/moneystr.h>\n+\n+#include <algorithm>\n+#include <numeric>\n+#include <utility>\n+\n+namespace node {\n+\n+MiniMiner::MiniMiner(const CTxMemPool& mempool, const std::vector<COutPoint>& outpoints)\n+{\n+    LOCK(mempool.cs);\n+    requested_outpoints = outpoints;\n+    // Find which outpoints to calculate bump fees for.\n+    // Anything that's spent by the mempool is to-be-replaced\n+    // Anything otherwise unavailable just has a bump fee of 0\n+    for (const auto& outpoint : outpoints) {\n+        if (const auto ptx{mempool.GetConflictTx(outpoint)}) {\n+            // The conflicting transaction is to-be-replaced\n+            to_be_replaced.insert(ptx->GetHash());\n+        }\n+\n+        if (!mempool.exists(GenTxid::Txid(outpoint.hash))) {\n+            // This UTXO is either confirmed or not yet submitted to mempool.\n+            // In the former case, no bump fee is required.\n+            // In the latter case, we have no information, so just return 0.\n+            this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+        } else {\n+            // This UTXO is unconfirmed, in the mempool, and available to spend.\n+            auto it = outpoints_needed_by_txid.find(outpoint.hash);\n+            if (it != outpoints_needed_by_txid.end()) {\n+                it->second.push_back(outpoint);\n+            } else {\n+                std::vector<COutPoint> outpoints_of_tx({outpoint});\n+                outpoints_needed_by_txid.emplace(std::make_pair(outpoint.hash, outpoints_of_tx));\n+                // Instead of operating on the entire mempool, just run the mining algorithm on the\n+                // cluster of relevant transactions, which we'll store in mapModifiedTx.\n+            }\n+        }\n+    }\n+    // Calculate the cluster and construct the entry map.\n+    std::vector<uint256> txids_needed;\n+    std::transform(outpoints_needed_by_txid.cbegin(),\n+                   outpoints_needed_by_txid.cend(),\n+                   std::back_inserter(txids_needed),\n+                   [](const auto& pair) { return pair.first; });\n+    const auto& cluster = mempool.CalculateCluster(txids_needed);\n+    for (const auto& txiter : cluster) {\n+        if (to_be_replaced.find(txiter->GetTx().GetHash()) == to_be_replaced.end()) {\n+            auto [mapiter, success] = entries_by_txid.emplace(std::make_pair(txiter->GetTx().GetHash(), MockMempoolEntry(txiter)));\n+            assert(success);\n+            entries.push_back(mapiter);\n+        } else {\n+            auto outpoints_it = outpoints_needed_by_txid.find(txiter->GetTx().GetHash());\n+            if (outpoints_it != outpoints_needed_by_txid.end()) {\n+                for (const auto& outpoint : outpoints_it->second) {\n+                    this->bump_fees.emplace(std::make_pair(outpoint, 0));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Remove the to-be-replaced transactions and build the descendant_set_by_txid cache.\n+    for (const auto& txiter : cluster) {\n+        const auto& txid = txiter->GetTx().GetHash();\n+        // Cache descendants for future use. Unlike the real mempool, a descendant MockMempoolEntry\n+        // will not exist without its ancestor MockMempoolEntry, so these sets won't be invalidated.\n+        std::vector<MockEntryMap::iterator> cached_descendants;\n+        cached_descendants.emplace_back(entries_by_txid.find(txid));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1095018669",
      "id" : 1095018669,
      "in_reply_to_id" : 1040297609,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BRKit",
      "original_commit_id" : "898ad9d5904f1b689d18d94f20d92500cf443758",
      "original_line" : 79,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.cpp",
      "position" : null,
      "pull_request_review_id" : 1281798898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095018669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T19:48:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1095018669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Since last comment:\r\n\r\n- Rebased on-top of the latest version of #27021.\r\n- Addressed that `CalculateTotalBumpFee` now returns an std::optional<CAmount> because we automatically fail calculation for (too) large clusters of unconfirmed transactions\r\n- Waiting for #27021 before opening for review",
      "created_at" : "2023-02-17T16:16:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1434867163",
      "id" : 1434867163,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585VhlXb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434867163/reactions"
      },
      "updated_at" : "2023-02-17T16:16:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434867163",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "For anyone wanting to review this PR and would like some help with basic mempool concepts, I made a video: https://youtu.be/sQ05azzTp9o.",
      "created_at" : "2023-02-17T17:55:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1435036691",
      "id" : 1435036691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585ViOwT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435036691/reactions"
      },
      "updated_at" : "2023-02-17T17:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435036691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-02-27T18:37:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1446857687",
      "id" : 1446857687,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585WPUvX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1446857687/reactions"
      },
      "updated_at" : "2023-02-27T18:37:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1446857687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on latest version of #27021 ",
      "created_at" : "2023-03-03T23:13:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1454249283",
      "id" : 1454249283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585WrhVD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1454249283/reactions"
      },
      "updated_at" : "2023-06-14T13:04:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1454249283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on latest version of https://github.com/bitcoin/bitcoin/pull/27021. If you are interested in having #26152 in Bitcoin Core v25.0, please consider making time to review #27021.",
      "created_at" : "2023-03-15T15:04:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1470172234",
      "id" : 1470172234,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585XoQxK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1470172234/reactions"
      },
      "updated_at" : "2023-06-14T13:04:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1470172234",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on latest version of #27021, then rebased on master to resolve merge conflicts. \r\n\r\nNeeded to reintroduce access to the Chain interface in `ChooseSelectionResult()`.",
      "created_at" : "2023-03-31T18:21:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1492411947",
      "id" : 1492411947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585Y9GYr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1492411947/reactions"
      },
      "updated_at" : "2023-03-31T18:21:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1492411947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-04-15T13:14:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1509820500",
      "id" : 1509820500,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585Z_ghU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1509820500/reactions"
      },
      "updated_at" : "2023-04-15T13:14:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1509820500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on #27021, need to rebase on master next, then will incorporate the follow-up nits from #27021",
      "created_at" : "2023-05-17T02:38:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1550602703",
      "id" : 1550602703,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585cbFHP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550602703/reactions"
      },
      "updated_at" : "2023-06-14T13:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550602703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1221051466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1221051466"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: while you're here, should we drop earlier calls to `ComputeAndSetWaste` and just call it once for all eligible results before selecting the best one?",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-07T07:32:15Z",
      "diff_hunk" : "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1221051466",
      "id" : 1221051466,
      "line" : 629,
      "node_id" : "PRRC_kwDOABII585Ix8RK",
      "original_commit_id" : "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_line" : 629,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 104,
      "pull_request_review_id" : 1466867248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1221051466/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-27T07:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1221051466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on master, incorporated outstanding follow-ups from https://github.com/bitcoin/bitcoin/pull/27021#issuecomment-1554675156",
      "created_at" : "2023-06-12T16:25:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1587664581",
      "id" : 1587664581,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585eodbF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 1,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1587664581/reactions"
      },
      "updated_at" : "2023-06-14T13:04:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1587664581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased, added four commits for the follow-ups from #27021, cleaned up the commit messages, added @theStackâs wonderful topology overview for the transactions, built each commit separately to make sure all tests pass.\r\n\r\n**Ready for review**",
      "created_at" : "2023-06-12T20:31:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1588047051",
      "id" : 1588047051,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585ep6zL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1588047051/reactions"
      },
      "updated_at" : "2023-06-12T20:31:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1588047051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1235753039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235753039"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would be good to have a test for the application of ancestor bump fees with external pre-selected inputs.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-06-20T19:47:05Z",
      "diff_hunk" : "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1235753039",
      "id" : 1235753039,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII585JqBhP",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 199,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 12,
      "pull_request_review_id" : 1488907492,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235753039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T18:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235753039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1235758654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235758654"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 232edb7e5d630d9d687ba3089aa4028f8e0380a4 \" Bump unconfirmed parent txs to target feerate \"\r\n\r\nWhy was this added?",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-06-20T19:53:22Z",
      "diff_hunk" : "@@ -7,6 +7,7 @@\n #include <common/system.h>\n #include <consensus/amount.h>\n #include <consensus/consensus.h>\n+#include <interfaces/chain.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1235758654",
      "id" : 1235758654,
      "line" : 10,
      "node_id" : "PRRC_kwDOABII585JqC4-",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 10,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 4,
      "pull_request_review_id" : 1488907492,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235758654/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T18:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1235758654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1238118450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238118450"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nnit: suggestion\r\n```cpp\r\nfor (auto& output : result.coins.All()) {\r\n    output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));\r\n}\r\n```",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-22T07:30:08Z",
      "diff_hunk" : "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1238118450",
      "id" : 1238118450,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585JzDAy",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 357,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1466867248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238118450/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-27T07:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1238118450",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1241791109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1241791109"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: you can drop this method if you decide to have `GetTotalBumpFee()` instead",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-26T08:05:31Z",
      "diff_hunk" : "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1241791109",
      "id" : 1241791109,
      "line" : 526,
      "node_id" : "PRRC_kwDOABII585KBDqF",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 526,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 31,
      "pull_request_review_id" : 1466867248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1241791109/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-27T07:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1241791109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243210309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243210309"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: we don't really need the whole wallet there, better to pass just chain interface",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-27T06:37:47Z",
      "diff_hunk" : "@@ -148,8 +150,7 @@ util::Result<SelectionResult> AttemptSelection(const CAmount& nTargetValue, Outp\n  *                                                  or (2) an specific error message if there was something particularly wrong (e.g. a selection\n  *                                                  result that surpassed the tx max weight size).\n  */\n-util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);\n-\n+util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243210309",
      "id" : 1243210309,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KGeJF",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 153,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/spend.h",
      "position" : null,
      "pull_request_review_id" : 1466867248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243210309/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-27T07:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243210309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243220924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243220924"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Amend bumpfee for inputs with overlapping ancestry\" 56139fd808250fcb693b5f185e7e510804a33470\r\n\r\nnit: you can use `SelectionResult::GetTotalBumpFee()` if you decide to introduce it",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-27T06:49:27Z",
      "diff_hunk" : "@@ -611,6 +611,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243220924",
      "id" : 1243220924,
      "line" : 614,
      "node_id" : "PRRC_kwDOABII585KGgu8",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 614,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 89,
      "pull_request_review_id" : 1466867248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243220924/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-27T07:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243220924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243238714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243238714"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nnit: we can encapsulate bump fee calculation within `CoinSelectionResult::GetTotalBumpFee()`. It will come handy in the next commit as well",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-27T07:07:23Z",
      "diff_hunk" : "@@ -1008,7 +1025,9 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     // and in the spirit of \"smallest possible change from prior\n     // behavior.\"\n     const uint32_t nSequence{coin_control.m_signal_bip125_rbf.value_or(wallet.m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : CTxIn::MAX_SEQUENCE_NONFINAL};\n+    CAmount total_bump_fees{0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1243238714",
      "id" : 1243238714,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KGlE6",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 1047,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1466867248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243238714/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-27T07:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1243238714",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246199879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246199879"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nnit: better use a multiple of `target_fee_rate`",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-29T07:01:41Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246199879",
      "id" : 1246199879,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585KR4BH",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 75,
      "pull_request_review_id" : 1504669255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246199879/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T07:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246199879",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246207242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246207242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in \"Bump unconfirmed parent txs to target feerate\" 8e3d924f02ee28043e8844a301389915823e5893\r\n\r\nI think all the tests would be easier to understand if we start with an empty testing wallet and send unconfirmed txs to it from  `def_wallet`.\r\n\r\nNow we start with the testing wallet with already one confirmed input, but why if we test spending mostly unconfirmed txs? Current setup requires reader to do more coin tracking in mind.",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-29T07:09:06Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246207242",
      "id" : 1246207242,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII585KR50K",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 72,
      "pull_request_review_id" : 1504669255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246207242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T07:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246207242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246215741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246215741"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "do we want to check naÃ¯ve ancestry fee rate or the fee_rate at which it will be accepted at a block (i.e. ancestry score)?",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-29T07:17:13Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1246215741",
      "id" : 1246215741,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585KR749",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 85,
      "pull_request_review_id" : 1504669255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246215741/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T07:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1246215741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1247203795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247203795"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, went with your suggestion",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-29T21:43:30Z",
      "diff_hunk" : "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1247203795",
      "id" : 1247203795,
      "in_reply_to_id" : 1238118450,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KVtHT",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 357,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1506175113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247203795/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-29T22:12:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247203795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1247221538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247221538"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I tried this change, and remembered why I put in the \"discount\" in the first place: I think I have incorporated the bump fees in the effective values before, so I need to know whether there is a difference between the sum of the bump fees and the combined inputsâ bump fee. I have an idea how to incorporate your suggestion, but I gotta try tomorrow.",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-29T22:12:36Z",
      "diff_hunk" : "@@ -1008,7 +1025,9 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     // and in the spirit of \"smallest possible change from prior\n     // behavior.\"\n     const uint32_t nSequence{coin_control.m_signal_bip125_rbf.value_or(wallet.m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : CTxIn::MAX_SEQUENCE_NONFINAL};\n+    CAmount total_bump_fees{0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1247221538",
      "id" : 1247221538,
      "in_reply_to_id" : 1243238714,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KVxci",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 1047,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1506175113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247221538/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-29T22:12:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1247221538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248149182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149182"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added a function `GetSummedBumpFees()`, but I have yet to find a neat way how I can drop the discount. I was experimenting with having both a function `GetSummedBumpFees()` and a function `GetCombinedBumpFee()` on SelectionResult, but it made it more complicated because I now had to get the Chain interface and target feerate into `SelectionResult`. I am tending to leaving it as it is now, unless I come up with a more elegant way to transition.",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-30T18:11:30Z",
      "diff_hunk" : "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248149182",
      "id" : 1248149182,
      "in_reply_to_id" : 1241791109,
      "line" : 526,
      "node_id" : "PRRC_kwDOABII585KZT6-",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 526,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 31,
      "pull_request_review_id" : 1507669515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149182/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T18:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248149983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149983"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added `GetSummedBumpFees()`",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-30T18:12:01Z",
      "diff_hunk" : "@@ -611,6 +611,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248149983",
      "id" : 1248149983,
      "in_reply_to_id" : 1243220924,
      "line" : 614,
      "node_id" : "PRRC_kwDOABII585KZUHf",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 614,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 89,
      "pull_request_review_id" : 1507669515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149983/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T18:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248149983",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248150186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248150186"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Still open",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-30T18:12:10Z",
      "diff_hunk" : "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248150186",
      "id" : 1248150186,
      "in_reply_to_id" : 1221051466,
      "line" : 629,
      "node_id" : "PRRC_kwDOABII585KZUKq",
      "original_commit_id" : "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_line" : 629,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 104,
      "pull_request_review_id" : 1507669515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248150186/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T18:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248150186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248205239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248205239"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In f2daebf8d1ac3829faa6443425cb97a763e9f780 \"Bump unconfirmed parent txs to target feerate\"\r\n\r\nThis doesn't actually apply the bumpfees to all of the outputs in `result`. All()` will return a copy of all of the outputs, not references to them, so this is just applying the bumpfees to a temporary.\r\n\r\nBecause of this, the tests added in this commit fail. The entire PR does not have failing tests because of the adjustment to the fee that is done in the following commit.",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-30T19:08:10Z",
      "diff_hunk" : "@@ -346,6 +351,15 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateIndividualBumpFees(outpoints, feerate.value());\n+\n+        for (auto& output : result.All()) {\n+            output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248205239",
      "id" : 1248205239,
      "line" : 358,
      "node_id" : "PRRC_kwDOABII585KZhm3",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 358,
      "original_position" : 41,
      "original_start_line" : 357,
      "path" : "src/wallet/spend.cpp",
      "position" : 41,
      "pull_request_review_id" : 1507761521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248205239/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 357,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-06-30T19:27:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248205239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248207817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248207817"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In f2daebf8d1ac3829faa6443425cb97a763e9f780 \"Bump unconfirmed parent txs to target feerate\"\r\n\r\nnit: I prefer that comments about what a test does are attached to the test implementation itself rather than the caller.",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-30T19:11:32Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=to_be_rbfed_ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        bumped_ancestor_aware_txid = wallet.bumpfee(txid=to_be_rbfed_ancestor_aware_txid, options={\"fee_rate\": self.target_fee_rate * 2} )[\"txid\"]\n+        bumped_ancestor_aware_tx = wallet.gettransaction(txid=bumped_ancestor_aware_txid, verbose=True)\n+        self.assert_spends_only_parent(bumped_ancestor_aware_tx, parent_txid)\n+\n+        resulting_bumped_fee_rate = self.calc_fee_rate(bumped_ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_bumped_fee_rate, 2*self.target_fee_rate)\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, bumped_ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, 2*self.target_fee_rate)\n+        assert_greater_than_or_equal(2*self.target_fee_rate*1.5, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_gets_ignored(self):\n+        self.log.info(\"Start test where a low-fee sibling tx gets created and check that bumping ignores it\")\n+        wallet = self.setup_and_fund_wallet(\"ignore-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=2)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=1)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_undershoots_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_bumps_parent(self):\n+        self.log.info(\"Start test where a high-fee sibling tx bumps the parent\")\n+        wallet = self.setup_and_fund_wallet(\"generous-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=100)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_beats_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        # Child is only paying for itselfâ¦\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(1.05 * self.target_fee_rate, resulting_fee_rate)\n+        # â¦because sibling bumped to parent to ~50 s/vB, while our target is 30 s/vB\n+        resulting_ancestry_fee_rate_sibling = self.calc_set_fee_rate([parent_tx, sibling_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_sibling, self.target_fee_rate)\n+        # and our resulting \"ancestry feerate\" is therefore BELOW target feerate\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_confirmed_and_unconfirmed_parent(self):\n+        self.log.info(\"Start test with one unconfirmed and one confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_and_unconfirmed_wallet\")\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=self.target_fee_rate)\n+        self.generate(self.nodes[0], 1) # Wallet has two confirmed UTXOs of ~1BTC each\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=0.5, fee_rate=0.5*self.target_fee_rate)\n+\n+        # wallet has one confirmed UTXO of 1BTC and two unconfirmed UTXOs of ~0.5BTC each\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.4, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248207817",
      "id" : 1248207817,
      "line" : 437,
      "node_id" : "PRRC_kwDOABII585KZiPJ",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 416,
      "original_position" : 416,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 437,
      "pull_request_review_id" : 1507761521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248207817/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T19:26:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248207817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248213082"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248213082"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In f2daebf8d1ac3829faa6443425cb97a763e9f780 \"Bump unconfirmed parent txs to target feerate\"\r\n\r\nCompilation failure in this commit.\r\n\r\n```\r\nwallet/feebumper.cpp: In function âwallet::feebumper::Result wallet::CheckFeeRate(const CWallet&, const CMutableTransaction&, const CFeeRate&, int64_t, CAmount, std::vector<bilingual_str>&)â:\r\nwallet/feebumper.cpp:89:61: error: âclass interfaces::Chainâ has no member named âCalculateBumpFeesâ\r\n   89 |     std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);\r\n      |                                                             ^~~~~~~~~~~~~~~~~\r\n```\r\n\r\nThis function was renamed to `CalculateIndividualBumpFees`",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-30T19:18:42Z",
      "diff_hunk" : "@@ -80,7 +80,19 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CFeeRate& new\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    reused_inputs.reserve(mtx.vin.size());\n+    for (const CTxIn& txin : mtx.vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248213082",
      "id" : 1248213082,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KZjha",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 89,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/feebumper.cpp",
      "position" : null,
      "pull_request_review_id" : 1507761521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248213082/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T19:26:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248213082",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248219188"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248219188"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is incorrect, see https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248205239",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-06-30T19:28:24Z",
      "diff_hunk" : "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1248219188",
      "id" : 1248219188,
      "in_reply_to_id" : 1238118450,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KZlA0",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 357,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1507784509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248219188/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-30T19:28:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1248219188",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250394244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250394244"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, sorry about misleading you ð ",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-07-03T07:31:30Z",
      "diff_hunk" : "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250394244",
      "id" : 1250394244,
      "in_reply_to_id" : 1238118450,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Kh4CE",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 357,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1504669255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250394244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T07:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250394244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250419037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250419037"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "My idea was to add `bump_fee_group_discount` within `GetTotalBumpFee()` function. Probably I'm missing something but I don't know what. Why wouldn't it just work?",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-07-03T07:48:26Z",
      "diff_hunk" : "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250419037",
      "id" : 1250419037,
      "in_reply_to_id" : 1241791109,
      "line" : 526,
      "node_id" : "PRRC_kwDOABII585Kh-Fd",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 526,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 31,
      "pull_request_review_id" : 1504669255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250419037/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T07:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250419037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250425745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250425745"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "that seems like a duplicate check of `assert_undershoots_target`",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-07-03T07:52:58Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1250425745",
      "id" : 1250425745,
      "line" : 99,
      "node_id" : "PRRC_kwDOABII585Kh_uR",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 99,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 99,
      "pull_request_review_id" : 1504669255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250425745/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T07:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1250425745",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251179626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251179626"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah drats, I did not realize that `CoinsResult.All()` produces a copy. Reverting this.",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-07-03T18:28:47Z",
      "diff_hunk" : "@@ -346,6 +351,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateBumpFees(outpoints, feerate.value());\n+\n+        for (auto& [_, outputs] : result.coins) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251179626",
      "id" : 1251179626,
      "in_reply_to_id" : 1238118450,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Kk3xq",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 357,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1511623977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251179626/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T18:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251179626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251181072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181072"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I would prefer that the method `GetTotalBumpFee()` does not either return the sum of individual bump fees or the combined bump fee for the input set depending on when it is called. Iâd be worried that it would be hard to understand later and might be a source of future bugs.",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-07-03T18:31:39Z",
      "diff_hunk" : "@@ -512,7 +520,12 @@ CAmount SelectionResult::GetSelectedValue() const\n \n CAmount SelectionResult::GetSelectedEffectiveValue() const\n {\n-    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); });\n+    return std::accumulate(m_selected_inputs.cbegin(), m_selected_inputs.cend(), CAmount{0}, [](CAmount sum, const auto& coin) { return sum + coin->GetEffectiveValue(); }) + bump_fee_group_discount;\n+}\n+\n+CAmount SelectionResult::GetBumpFeeDiscount() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251181072",
      "id" : 1251181072,
      "in_reply_to_id" : 1241791109,
      "line" : 526,
      "node_id" : "PRRC_kwDOABII585Kk4IQ",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 526,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 31,
      "pull_request_review_id" : 1511626170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181072/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T18:31:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181072",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251181233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181233"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "43b86e49351b3160c2e39807997a9373cd88e173",
      "created_at" : "2023-07-03T18:31:54Z",
      "diff_hunk" : "@@ -148,8 +150,7 @@ util::Result<SelectionResult> AttemptSelection(const CAmount& nTargetValue, Outp\n  *                                                  or (2) an specific error message if there was something particularly wrong (e.g. a selection\n  *                                                  result that surpassed the tx max weight size).\n  */\n-util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);\n-\n+util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const CAmount& nTargetValue, Groups& groups, const CoinSelectionParams& coin_selection_params);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251181233",
      "id" : 1251181233,
      "in_reply_to_id" : 1243210309,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Kk4Kx",
      "original_commit_id" : "56139fd808250fcb693b5f185e7e510804a33470",
      "original_line" : 153,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/spend.h",
      "position" : null,
      "pull_request_review_id" : 1511626358,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181233/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T18:31:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251181233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251192852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251192852"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for catching this. Fixed.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T18:46:24Z",
      "diff_hunk" : "@@ -346,6 +351,15 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (feerate.has_value()) {\n+        std::map<COutPoint, CAmount> map_of_bump_fees = wallet.chain().CalculateIndividualBumpFees(outpoints, feerate.value());\n+\n+        for (auto& output : result.All()) {\n+            output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251192852",
      "id" : 1251192852,
      "in_reply_to_id" : 1248205239,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Kk7AU",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 358,
      "original_position" : 41,
      "original_start_line" : 357,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251192852/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251192852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251203025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251203025"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Moved all comments about what the tests do to the implementations of the tests",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T19:03:02Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)\n+        assert_greater_than(self.target_fee_rate, resulting_fee_rate_funding)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=to_be_rbfed_ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        bumped_ancestor_aware_txid = wallet.bumpfee(txid=to_be_rbfed_ancestor_aware_txid, options={\"fee_rate\": self.target_fee_rate * 2} )[\"txid\"]\n+        bumped_ancestor_aware_tx = wallet.gettransaction(txid=bumped_ancestor_aware_txid, verbose=True)\n+        self.assert_spends_only_parent(bumped_ancestor_aware_tx, parent_txid)\n+\n+        resulting_bumped_fee_rate = self.calc_fee_rate(bumped_ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_bumped_fee_rate, 2*self.target_fee_rate)\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, bumped_ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, 2*self.target_fee_rate)\n+        assert_greater_than_or_equal(2*self.target_fee_rate*1.5, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_gets_ignored(self):\n+        self.log.info(\"Start test where a low-fee sibling tx gets created and check that bumping ignores it\")\n+        wallet = self.setup_and_fund_wallet(\"ignore-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=2)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=1)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_undershoots_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_sibling_tx_bumps_parent(self):\n+        self.log.info(\"Start test where a high-fee sibling tx bumps the parent\")\n+        wallet = self.setup_and_fund_wallet(\"generous-sibling\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(parent_tx)\n+\n+        # create sibling tx\n+        sibling_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.9, fee_rate=100)\n+        sibling_tx = wallet.gettransaction(txid=sibling_txid, verbose=True)\n+        self.assert_beats_target(sibling_tx)\n+\n+        # spend both outputs from parent transaction\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        # Child is only paying for itselfâ¦\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(1.05 * self.target_fee_rate, resulting_fee_rate)\n+        # â¦because sibling bumped to parent to ~50 s/vB, while our target is 30 s/vB\n+        resulting_ancestry_fee_rate_sibling = self.calc_set_fee_rate([parent_tx, sibling_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_sibling, self.target_fee_rate)\n+        # and our resulting \"ancestry feerate\" is therefore BELOW target feerate\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_confirmed_and_unconfirmed_parent(self):\n+        self.log.info(\"Start test with one unconfirmed and one confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_and_unconfirmed_wallet\")\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=self.target_fee_rate)\n+        self.generate(self.nodes[0], 1) # Wallet has two confirmed UTXOs of ~1BTC each\n+        wallet.sendtoaddress(address=wallet.getnewaddress(), amount=0.5, fee_rate=0.5*self.target_fee_rate)\n+\n+        # wallet has one confirmed UTXO of 1BTC and two unconfirmed UTXOs of ~0.5BTC each\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.4, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        resulting_fee_rate = self.calc_fee_rate(ancestor_aware_tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+\n+    def run_test(self):\n+        self.log.info(\"Starting UnconfirmedInputTest!\")\n+        self.target_fee_rate = 30\n+        self.def_wallet  = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.generate(self.nodes[0], 110)\n+\n+        # Test that assumptions about meeting feerate and being able to test it hold",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251203025",
      "id" : 1251203025,
      "in_reply_to_id" : 1248207817,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Kk9fR",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 416,
      "original_position" : 416,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251203025/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251203025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251204807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251204807"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, youâre right. Removed duplicate check.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T19:06:21Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+        resulting_fee_rate_funding = self.calc_fee_rate(parent_tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251204807",
      "id" : 1251204807,
      "in_reply_to_id" : 1250425745,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Kk97H",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 99,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251204807/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251204807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251210983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251210983"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Used 3Ãtarget_fee_rate instead",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T19:14:38Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251210983",
      "id" : 1251210983,
      "in_reply_to_id" : 1246199879,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Kk_bn",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251210983/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251210983",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251230645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251230645"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, I only fixed the rename in the next commit. Fixing.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T19:49:44Z",
      "diff_hunk" : "@@ -80,7 +80,19 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CFeeRate& new\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize);\n+    std::vector<COutPoint> reused_inputs;\n+    reused_inputs.reserve(mtx.vin.size());\n+    for (const CTxIn& txin : mtx.vin) {\n+        reused_inputs.push_back(txin.prevout);\n+    }\n+\n+    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateBumpFees(reused_inputs, newFeerate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251230645",
      "id" : 1251230645,
      "in_reply_to_id" : 1248213082,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KlEO1",
      "original_commit_id" : "f2daebf8d1ac3829faa6443425cb97a763e9f780",
      "original_line" : 89,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/feebumper.cpp",
      "position" : null,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251230645/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251230645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251243230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251243230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâm not sure I see a big difference between setting up the wallet with a confirmed UTXO from which I send an unconfirmed transaction with a varying feerate, or setting up the wallet to have an unconfirmed UTXO with varying feerate. The former may have the advantage that when I need multiple UTXOs, itâs easier to understand whatâs different.\r\n\r\nCurrently expecting to keep it this way",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T20:05:00Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251243230",
      "id" : 1251243230,
      "in_reply_to_id" : 1246207242,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII585KlHTe",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 73,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 73,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251243230/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251243230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251248054"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251248054"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, that check doesnât make sense, Iâve removed it.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T20:08:53Z",
      "diff_hunk" : "@@ -0,0 +1,460 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_greater_than,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=100)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251248054",
      "id" : 1251248054,
      "in_reply_to_id" : 1246215741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KlIe2",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251248054/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251248054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251261058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251261058"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Staring more at this, I am starting to wonder whether this would produce the same waste score for all possible BnB solutions, since BnB calculates the waste score with different parameters at the end of `SelectCoinsBnB()`. It does pass the coin selection tests. (Iâll let the fuzzer run over night to see whether that finds something else.)",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-03T20:27:27Z",
      "diff_hunk" : "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251261058",
      "id" : 1251261058,
      "in_reply_to_id" : 1221051466,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KlLqC",
      "original_commit_id" : "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_line" : 629,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1511646387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251261058/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-03T21:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251261058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Reading through recent comments, it seems somewhat expected that this version isn't yet fully working, let me know when you want me to run my tests again!\r\n\r\nSorry about that, I was a bit in a rush on Friday. Iâve fixed a number of issues, if this latest pushâs checks turn up green, it might be more fruitful to try now.",
      "created_at" : "2023-07-03T22:19:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1619210922",
      "id" : 1619210922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585ggzKq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1619210922/reactions"
      },
      "updated_at" : "2023-07-03T22:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1619210922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251575760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251575760"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: since you create new wallet for every test and never reuse any addresses do you really need to generate blocks? I tried to delete and the tests pass",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-04T06:54:29Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251575760",
      "id" : 1251575760,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585KmYfQ",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 67,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251575760/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251575760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251588782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251588782"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: here and other tests add `self.assert_spends_only_parent`",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-04T07:07:39Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251588782",
      "id" : 1251588782,
      "line" : 128,
      "node_id" : "PRRC_kwDOABII585Kmbqu",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 128,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 128,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251588782/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251588782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251589066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251589066"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: add `self.assert_spends_only_parent`",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-04T07:07:57Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251589066",
      "id" : 1251589066,
      "line" : 133,
      "node_id" : "PRRC_kwDOABII585KmbvK",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 133,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 133,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251589066/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251589066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251595920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251595920"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and other tests.I'm not sure the magic number is needed. I tried setting the multiplier to 1 and the tests still pass. Maybe just check that resulting fee rate is exactly equal to target fee rate?",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-04T07:13:17Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1251595920",
      "id" : 1251595920,
      "line" : 136,
      "node_id" : "PRRC_kwDOABII585KmdaQ",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 136,
      "original_position" : 136,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 136,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251595920/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1251595920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Iâve fixed a number of issues, if this latest pushâs checks turn up green, it might be more fruitful to try now.\r\n\r\nI confirm that, I've ran my set of tests against [eclair](https://github.com/ACINQ/eclair) and everything looks good using https://github.com/bitcoin/bitcoin/pull/26152/commits/0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 :tada: \r\nThe tests I ran can be found in the last two commits of [this branch](https://github.com/ACINQ/eclair/commits/wip-test-ancestor-aware-funding-bitcoind-25).",
      "created_at" : "2023-07-04T14:35:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1620368501",
      "id" : 1620368501,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585glNx1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620368501/reactions"
      },
      "updated_at" : "2023-07-04T14:35:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1620368501",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253422291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253422291"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 \"Amend bumpfee for inputs with overlapping ancestry\"\r\n\r\nnit: I'd prefer if variables were not renamed if they don't need to be, it makes review of this commit slightly harder and unnecessarily breaks git blame. `new_total_fee` is still a valid description of what this variable contains.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-05T17:28:41Z",
      "diff_hunk" : "@@ -86,37 +86,35 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CMutableTrans\n         reused_inputs.push_back(txin.prevout);\n     }\n \n-    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateIndividualBumpFees(reused_inputs, newFeerate);\n-    CAmount total_bump_fees = 0;\n-    for (auto& [_, bump_fee] : bump_fees) {\n-        total_bump_fees += bump_fee;\n+    std::optional<CAmount> combined_bump_fee = wallet.chain().CalculateCombinedBumpFee(reused_inputs, newFeerate);\n+    if (!combined_bump_fee.has_value()) {\n+        errors.push_back(strprintf(Untranslated(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")));\n     }\n-\n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize) + total_bump_fees;\n+    CAmount fees_including_bump_fees = newFeerate.GetFee(maxTxSize) + combined_bump_fee.value();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253422291",
      "id" : 1253422291,
      "line" : 93,
      "node_id" : "PRRC_kwDOABII585KtbTT",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 93,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/feebumper.cpp",
      "position" : 24,
      "pull_request_review_id" : 1515014286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253422291/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T17:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253422291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253424884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253424884"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 \"Amend bumpfee for inputs with overlapping ancestry\"\r\n\r\n`GetBumpFeeDiscount` is only used here. It doesn't seem like it's useful to require the caller to calculate the final bumpfee rather than having `SelectionResult` just do that when the the discount is applied and have a single method to return the bumpfees required for a particular selection.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-05T17:31:24Z",
      "diff_hunk" : "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253424884",
      "id" : 1253424884,
      "line" : 1055,
      "node_id" : "PRRC_kwDOABII585Ktb70",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 1055,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 137,
      "pull_request_review_id" : 1515014286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253424884/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T17:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253424884",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253427785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253427785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6 \"Amend bumpfee for inputs with overlapping ancestry\"\r\n\r\nnit: this comment seems to be misplaced?",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-05T17:34:33Z",
      "diff_hunk" : "@@ -609,6 +607,26 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        std::set<std::shared_ptr<COutput>> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin->depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin->outpoint);\n+        }\n+        std::optional<CAmount> combined_bump_fee = chain.CalculateCombinedBumpFee(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!combined_bump_fee.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = result.GetSummedBumpFees() - combined_bump_fee.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253427785",
      "id" : 1253427785,
      "line" : 625,
      "node_id" : "PRRC_kwDOABII585KtcpJ",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 625,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 115,
      "pull_request_review_id" : 1515014286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253427785/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T17:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253427785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253447995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253447995"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 232edb7e5d630d9d687ba3089aa4028f8e0380a4 \" Bump unconfirmed parent txs to target feerate \"\r\n\r\nNot directly related to this PR, but it would be helpful to write a comment about how the second `COutput` constructor (beneath this one) is only used in tests.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-05T17:55:15Z",
      "diff_hunk" : "@@ -71,6 +72,9 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n     COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253447995",
      "id" : 1253447995,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585Kthk7",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 78,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : 28,
      "pull_request_review_id" : 1488907492,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253447995/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T18:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253447995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253452419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253452419"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, will be reverting to `new_total_fee`",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-05T17:59:49Z",
      "diff_hunk" : "@@ -86,37 +86,35 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CMutableTrans\n         reused_inputs.push_back(txin.prevout);\n     }\n \n-    std::map<COutPoint, CAmount> bump_fees = wallet.chain().CalculateIndividualBumpFees(reused_inputs, newFeerate);\n-    CAmount total_bump_fees = 0;\n-    for (auto& [_, bump_fee] : bump_fees) {\n-        total_bump_fees += bump_fee;\n+    std::optional<CAmount> combined_bump_fee = wallet.chain().CalculateCombinedBumpFee(reused_inputs, newFeerate);\n+    if (!combined_bump_fee.has_value()) {\n+        errors.push_back(strprintf(Untranslated(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")));\n     }\n-\n-    CAmount new_total_fee = newFeerate.GetFee(maxTxSize) + total_bump_fees;\n+    CAmount fees_including_bump_fees = newFeerate.GetFee(maxTxSize) + combined_bump_fee.value();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253452419",
      "id" : 1253452419,
      "in_reply_to_id" : 1253422291,
      "line" : 93,
      "node_id" : "PRRC_kwDOABII585KtiqD",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 93,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/feebumper.cpp",
      "position" : 24,
      "pull_request_review_id" : 1515060542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253452419/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T20:43:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253452419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253454337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454337"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, thanks, I removed the earlier instances of ComputeAndSetWaste where the results get returned from the various coin selection algorithms and instead of selectively updating here, always calculate it here now. I just forgot to remove the comment.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-05T18:02:06Z",
      "diff_hunk" : "@@ -609,6 +607,26 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        std::set<std::shared_ptr<COutput>> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin->depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin->outpoint);\n+        }\n+        std::optional<CAmount> combined_bump_fee = chain.CalculateCombinedBumpFee(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!combined_bump_fee.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = result.GetSummedBumpFees() - combined_bump_fee.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253454337",
      "id" : 1253454337,
      "in_reply_to_id" : 1253427785,
      "line" : 625,
      "node_id" : "PRRC_kwDOABII585KtjIB",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 625,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 115,
      "pull_request_review_id" : 1515060542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454337/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T20:43:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253454337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253624315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253624315"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Iâve been doing some staring at this today. It seems to me that the waste score of finished input sets should also be adjusted according to the bump fee discount. Gotta do more pondering, will get back to this.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-05T20:42:35Z",
      "diff_hunk" : "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1253624315",
      "id" : 1253624315,
      "in_reply_to_id" : 1253424884,
      "line" : 1055,
      "node_id" : "PRRC_kwDOABII585KuMn7",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 1055,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 137,
      "pull_request_review_id" : 1515060542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253624315/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-05T20:43:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1253624315",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254028212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254028212"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could be extended to a set of parent txs to verify cases with multiple parents",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-06T07:10:44Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254028212",
      "id" : 1254028212,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII585KvvO0",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 44,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254028212/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254028212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254037039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254037039"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: why there is a multiplier here?",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-06T07:19:26Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254037039",
      "id" : 1254037039,
      "line" : 225,
      "node_id" : "PRRC_kwDOABII585KvxYv",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 225,
      "original_position" : 225,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 225,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254037039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254037039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254044504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254044504"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't `test_preset_input_cpfp` testing this?",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-06T07:26:41Z",
      "diff_hunk" : "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254044504",
      "id" : 1254044504,
      "in_reply_to_id" : 1235753039,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII585KvzNY",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 199,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 12,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254044504/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254044504",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254048054"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254048054"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: sffo is not needed",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-06T07:30:04Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO from chain of unconfirmed transactions with low feerate\n+    # grandparent and even lower feerate parent\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test fee calculation when bumping while using subtract fee from output (SFFO)\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that parents of preset unconfirmed inputs get cpfp'ed\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that RBFing a transaction with unconfirmed input gets the right feerate\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254048054",
      "id" : 1254048054,
      "line" : 318,
      "node_id" : "PRRC_kwDOABII585Kv0E2",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 318,
      "original_position" : 318,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 318,
      "pull_request_review_id" : 1512188451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254048054/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T07:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254048054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254378046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254378046"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In that test don't all of the pre-selected inputs belong to the wallet?",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-06T12:38:31Z",
      "diff_hunk" : "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254378046",
      "id" : 1254378046,
      "in_reply_to_id" : 1235753039,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII585KxEo-",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 199,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 12,
      "pull_request_review_id" : 1516450673,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254378046/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T12:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254378046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/75942586?v=4",
         "events_url" : "https://api.github.com/users/ishaanam/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ishaanam/followers",
         "following_url" : "https://api.github.com/users/ishaanam/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ishaanam/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ishaanam",
         "id" : 75942586,
         "login" : "ishaanam",
         "node_id" : "MDQ6VXNlcjc1OTQyNTg2",
         "organizations_url" : "https://api.github.com/users/ishaanam/orgs",
         "received_events_url" : "https://api.github.com/users/ishaanam/received_events",
         "repos_url" : "https://api.github.com/users/ishaanam/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ishaanam/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ishaanam/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ishaanam"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254760855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254760855"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Did about 40M executions, and no issues! Gonna calculate the Waste score below here as discussed.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-06T18:01:12Z",
      "diff_hunk" : "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1254760855",
      "id" : 1254760855,
      "in_reply_to_id" : 1221051466,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585KyiGX",
      "original_commit_id" : "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_line" : 629,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1517059378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254760855/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-06T18:01:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1254760855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1257771285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257771285"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ah, yes, you're right",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-10T06:29:50Z",
      "diff_hunk" : "@@ -195,6 +196,7 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n \n         /* Set some defaults for depth, spendable, solvable, safe, time, and from_me as these don't matter for preset inputs since no selection is being done. */\n         COutput output(outpoint, txout, /*depth=*/ 0, input_bytes, /*spendable=*/ true, /*solvable=*/ true, /*safe=*/ true, /*time=*/ 0, /*from_me=*/ false, coin_selection_params.m_effective_feerate);\n+        output.ApplyBumpFee(map_of_bump_fees.at(output.outpoint));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1257771285",
      "id" : 1257771285,
      "in_reply_to_id" : 1235753039,
      "line" : 199,
      "node_id" : "PRRC_kwDOABII585K-BEV",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 199,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 12,
      "pull_request_review_id" : 1521321873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257771285/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-10T06:29:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1257771285",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1259300260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259300260"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In theory the waste score should be the same.\r\n\r\nBecause not all of the params are available within BnB we call\r\n`result.ComputeAndSetWaste(cost_of_change, cost_of_change, 0);`\r\ninstead of\r\n`result.ComputeAndSetWaste(min_viable_change, cost_of_change, change_fee);`\r\n\r\nI believe this should be fine as BnB will not produce results with more than `cost_of_change` excess and therefore `GetChange()` will always return 0 and then `change_fee` doesn't matter.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-11T07:22:31Z",
      "diff_hunk" : "@@ -573,6 +573,28 @@ util::Result<SelectionResult> ChooseSelectionResult(const CWallet& wallet, const\n                              \"Please try sending a smaller amount or manually consolidating your wallet's UTXOs\")};\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : eligible_results) {\n+        std::vector<COutPoint> outpoints;\n+        CAmount summed_bump_fees = 0;\n+        std::set<COutput> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin.depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin.outpoint);\n+            summed_bump_fees += coin.ancestor_bump_fees;\n+        }\n+        std::optional<CAmount> grouped_bump_fees = wallet.chain().CalculateTotalBumpFees(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!grouped_bump_fees.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = summed_bump_fees - grouped_bump_fees.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste\n+            result.ComputeAndSetWaste(coin_selection_params.min_viable_change, coin_selection_params.m_cost_of_change, coin_selection_params.m_change_fee);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1259300260",
      "id" : 1259300260,
      "in_reply_to_id" : 1221051466,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LD2Wk",
      "original_commit_id" : "76d31ad381f8b8dd4e2d62ecee6dc0356ef4d8f2",
      "original_line" : 629,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1523593341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259300260/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-11T07:22:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259300260",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1259306993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259306993"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, the discount value is a function of the effective fee rate, therefore it has to be taken into account in waste calculation. The problem is that `GetSelectionWaste` doesn't use `SelectionResult.GetEffectiveValue()` which already accounts for bump fee discount.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-11T07:28:34Z",
      "diff_hunk" : "@@ -609,6 +607,26 @@ util::Result<SelectionResult> ChooseSelectionResult(const CAmount& nTargetValue,\n         return errors.empty() ? util::Error() : errors.front();\n     }\n \n+    // If the chosen input set has unconfirmed inputs, check for synergies from overlapping ancestry\n+    for (auto& result : results) {\n+        std::vector<COutPoint> outpoints;\n+        std::set<std::shared_ptr<COutput>> coins = result.GetInputSet();\n+        for (auto& coin : coins) {\n+            if (coin->depth > 0) continue; // Bump fees only exist for unconfirmed inputs\n+            outpoints.push_back(coin->outpoint);\n+        }\n+        std::optional<CAmount> combined_bump_fee = chain.CalculateCombinedBumpFee(outpoints, coin_selection_params.m_effective_feerate);\n+        if (!combined_bump_fee.has_value()) {\n+            return util::Error{_(\"Failed to calculate bump fees, because unconfirmed UTXOs depend on enormous cluster of unconfirmed transactions.\")};\n+        }\n+        CAmount bump_fee_overestimate = result.GetSummedBumpFees() - combined_bump_fee.value();\n+        if (bump_fee_overestimate) {\n+            result.SetBumpFeeDiscount(bump_fee_overestimate);\n+            // Update waste",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1259306993",
      "id" : 1259306993,
      "in_reply_to_id" : 1253427785,
      "line" : 625,
      "node_id" : "PRRC_kwDOABII585LD3_x",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 625,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 115,
      "pull_request_review_id" : 1523603375,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259306993/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-11T07:28:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259306993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1260665410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260665410"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, the discount value is a function of the effective fee rate, therefore it has to be taken into account in waste calculation. The problem is that GetSelectionWaste doesn't use SelectionResult.GetEffectiveValue() which already accounts for bump fee discoun",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-12T06:32:26Z",
      "diff_hunk" : "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1260665410",
      "id" : 1260665410,
      "in_reply_to_id" : 1253424884,
      "line" : 1055,
      "node_id" : "PRRC_kwDOABII585LJDpC",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 1055,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 137,
      "pull_request_review_id" : 1525610270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260665410/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T06:32:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260665410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268057988"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268057988"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 0c4ff4921087baf4ee00995be910241c3595cbe9 \r\n>  This commit matches the\r\nnames to the transactionsâ vector indices for better readability\r\n\r\nThis only applies to `miniminer_overlap` \r\n`miniminer_1p1c`  test case transactions name still starts at 1.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-19T13:14:27Z",
      "diff_hunk" : "@@ -280,141 +280,141 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     LOCK2(::cs_main, pool.cs);\n     TestMemPoolEntryHelper entry;\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268057988",
      "id" : 1268057988,
      "line" : 309,
      "node_id" : "PRRC_kwDOABII585LlQeE",
      "original_commit_id" : "0c4ff4921087baf4ee00995be910241c3595cbe9",
      "original_line" : 282,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/test/miniminer_tests.cpp",
      "position" : 34,
      "pull_request_review_id" : 1537066023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268057988/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T14:55:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268057988",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268063062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268063062"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We can use `CFeeRate(transaction_iter.value()->GetModFeesWithAncestors(), transaction_iter.value()->GetSizeWithAncestors())` to get the ancestor fee rate why are we calculating manually?\r\nLike here ```tx6_anc_feerate = CFeeRate(high_fee + low_fee + med_fee, tx_vsizes[4] + tx_vsizes[5] + tx_vsizes[6]);``` and other places?",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-19T13:18:21Z",
      "diff_hunk" : "@@ -327,10 +354,16 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     const auto tx3_feerate = CFeeRate(high_fee, tx_vsizes[3]);\n     // tx3's feerate is lower than tx2's. same fee, different weight.\n     BOOST_CHECK(tx2_feerate > tx3_feerate);\n-    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[3]);\n+    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[2] + tx_vsizes[3]);\n+    const auto tx3_iter = pool.GetIter(tx3->GetHash());\n+    BOOST_CHECK(tx3_anc_feerate == CFeeRate(tx3_iter.value()->GetModFeesWithAncestors(), tx3_iter.value()->GetSizeWithAncestors()));\n     const auto tx4_feerate = CFeeRate(high_fee, tx_vsizes[4]);\n-    const auto tx6_anc_feerate = CFeeRate(low_fee + med_fee, tx_vsizes[5] + tx_vsizes[6]);\n-    const auto tx7_anc_feerate = CFeeRate(low_fee + high_fee, tx_vsizes[5] + tx_vsizes[7]);\n+    const auto tx6_anc_feerate = CFeeRate(high_fee + low_fee + med_fee, tx_vsizes[4] + tx_vsizes[5] + tx_vsizes[6]);\n+    const auto tx6_iter = pool.GetIter(tx6->GetHash());\n+    BOOST_CHECK(tx6_anc_feerate == CFeeRate(tx6_iter.value()->GetModFeesWithAncestors(), tx6_iter.value()->GetSizeWithAncestors()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268063062",
      "id" : 1268063062,
      "line" : 363,
      "node_id" : "PRRC_kwDOABII585LlRtW",
      "original_commit_id" : "3016245bab453cc52744ac8fc6820e431315dbde",
      "original_line" : 363,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/miniminer_tests.cpp",
      "position" : 125,
      "pull_request_review_id" : 1537066023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268063062/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T14:55:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268063062",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268085294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268085294"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: feel free to ignore\r\nslightly more code and less compact,  but I think it is better to have a separate function for decrement and increment, its clear and more explicit and you don't have to negate.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-19T13:33:54Z",
      "diff_hunk" : "@@ -38,6 +39,10 @@ class MiniMinerMempoolEntry\n     int64_t GetTxSize() const { return vsize_individual; }\n     int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n     const CTransaction& GetTx() const LIFETIMEBOUND { return *tx; }\n+    void UpdateAncestorState(int64_t vsize_change, CAmount fee_change) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268085294",
      "id" : 1268085294,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII585LlXIu",
      "original_commit_id" : "a3b178f3c082453120e816945cea220bc7397ee5",
      "original_line" : 42,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 20,
      "pull_request_review_id" : 1537066023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268085294/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T14:55:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268085294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268094484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268094484"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`fee` is an optional variable, is it safe to just increment it, as it may be `nullptr`\r\n```\r\nif (num) {\r\n    *num += bump_fee;\r\n}\r\n```",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-19T13:40:36Z",
      "diff_hunk" : "@@ -104,6 +109,15 @@ struct COutput {\n         return outpoint < rhs.outpoint;\n     }\n \n+    void ApplyBumpFee(CAmount bump_fee)\n+    {\n+        assert(bump_fee >= 0);\n+        ancestor_bump_fees = bump_fee;\n+        *fee += bump_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268094484",
      "id" : 1268094484,
      "line" : 116,
      "node_id" : "PRRC_kwDOABII585LlZYU",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 116,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : 47,
      "pull_request_review_id" : 1537066023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268094484/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T14:55:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268094484",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268098822"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268098822"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We can have something like\r\n```python\r\n\r\n    def assert_spends_only_parents(self, tx, parent_txids):\r\n        number_inputs = len(tx[\"decoded\"][\"vin\"])\r\n        assert_equal(number_inputs, len(parent_txids))\r\n        for i in range(number_inputs):\r\n            txid_of_input = tx[\"decoded\"][\"vin\"][i][\"txid\"]\r\n            assert txid_of_input in parent_txids\r\n``` ",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-19T13:43:48Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268098822",
      "id" : 1268098822,
      "in_reply_to_id" : 1254028212,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII585LlacG",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 44,
      "pull_request_review_id" : 1537066023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268098822/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T14:55:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268098822",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268667959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268667959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah thanks, that belongs to the commit one later, where we need the chain interface to amend the bump fees in case of overlapping ancestries.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-07-19T21:09:22Z",
      "diff_hunk" : "@@ -7,6 +7,7 @@\n #include <common/system.h>\n #include <consensus/amount.h>\n #include <consensus/consensus.h>\n+#include <interfaces/chain.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1268667959",
      "id" : 1268667959,
      "in_reply_to_id" : 1235758654,
      "line" : 10,
      "node_id" : "PRRC_kwDOABII585LnlY3",
      "original_commit_id" : "8e3d924f02ee28043e8844a301389915823e5893",
      "original_line" : 10,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 4,
      "pull_request_review_id" : 1538028271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268667959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T21:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268667959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291449745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291449745"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That seems a bit out of place in this PR.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T15:01:53Z",
      "diff_hunk" : "@@ -71,6 +72,9 @@ struct COutput {\n     /** The fee required to spend this output at the consolidation feerate. */\n     CAmount long_term_fee{0};\n \n+    /** The fee necessary to bump this UTXO's ancestor transactions to the target feerate */\n+    CAmount ancestor_bump_fees{0};\n+\n     COutput(const COutPoint& outpoint, const CTxOut& txout, int depth, int input_bytes, bool spendable, bool solvable, bool safe, int64_t time, bool from_me, const std::optional<CFeeRate> feerate = std::nullopt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291449745",
      "id" : 1291449745,
      "in_reply_to_id" : 1253447995,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585M-fWR",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 78,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : 28,
      "pull_request_review_id" : 1573849093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291449745/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T15:01:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291449745",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291453343"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291453343"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thatâs right, Iâll remove the unnecessary block generation",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T15:05:14Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291453343",
      "id" : 1291453343,
      "in_reply_to_id" : 1251575760,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585M-gOf",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 67,
      "pull_request_review_id" : 1573855226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291453343/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T15:05:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291453343",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291490820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291490820"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Every once in a while weâll get a signature thatâs gonna be one byte smaller, so a little bit of a buffer will prevent intermittent failures. I reduced the buffers to 1%, though.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T15:19:39Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291490820",
      "id" : 1291490820,
      "in_reply_to_id" : 1251595920,
      "line" : 136,
      "node_id" : "PRRC_kwDOABII585M-pYE",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 136,
      "original_position" : 136,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 136,
      "pull_request_review_id" : 1573913249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291490820/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T15:19:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291490820",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291528300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291528300"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, good idea. I went with:\r\n\r\n```python\r\n    def assert_spends_only_parents(self, tx, parent_txids):\r\n        parent_checklist = parent_txids.copy()\r\n        number_inputs = len(tx[\"decoded\"][\"vin\"])\r\n        assert_equal(number_inputs, len(parent_txids))\r\n        for i in range(number_inputs):\r\n            txid_of_input = tx[\"decoded\"][\"vin\"][i][\"txid\"]\r\n            assert txid_of_input in parent_checklist\r\n            parent_checklist.remove(txid_of_input)\r\n```",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T15:49:19Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291528300",
      "id" : 1291528300,
      "in_reply_to_id" : 1254028212,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII585M-yhs",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 44,
      "pull_request_review_id" : 1573975175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291528300/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T15:49:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291528300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291532701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291532701"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The grandparent transaction has a higher feerate, so we only need to bump the parent. We check that if we get the complete chain of unconfirmed transactions, that the resulting feerate is above our target.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T15:53:39Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291532701",
      "id" : 1291532701,
      "in_reply_to_id" : 1254037039,
      "line" : 225,
      "node_id" : "PRRC_kwDOABII585M-zmd",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 225,
      "original_position" : 225,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 225,
      "pull_request_review_id" : 1573982194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291532701/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T15:53:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291532701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291548464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291548464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I also updated the `miniminer_1p1c` test to match the transaction numbers to the indices",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T16:09:45Z",
      "diff_hunk" : "@@ -280,141 +280,141 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     LOCK2(::cs_main, pool.cs);\n     TestMemPoolEntryHelper entry;\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291548464",
      "id" : 1291548464,
      "in_reply_to_id" : 1268057988,
      "line" : 309,
      "node_id" : "PRRC_kwDOABII585M-3cw",
      "original_commit_id" : "0c4ff4921087baf4ee00995be910241c3595cbe9",
      "original_line" : 282,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/test/miniminer_tests.cpp",
      "position" : 34,
      "pull_request_review_id" : 1574007772,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291548464/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T16:09:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291548464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291565216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291565216"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thatâs a good idea, but Iâm gonna leave this, because this matches how we interact with the mempool entries.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T16:29:42Z",
      "diff_hunk" : "@@ -38,6 +39,10 @@ class MiniMinerMempoolEntry\n     int64_t GetTxSize() const { return vsize_individual; }\n     int64_t GetSizeWithAncestors() const { return vsize_with_ancestors; }\n     const CTransaction& GetTx() const LIFETIMEBOUND { return *tx; }\n+    void UpdateAncestorState(int64_t vsize_change, CAmount fee_change) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291565216",
      "id" : 1291565216,
      "in_reply_to_id" : 1268085294,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII585M-7ig",
      "original_commit_id" : "a3b178f3c082453120e816945cea220bc7397ee5",
      "original_line" : 42,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/node/mini_miner.h",
      "position" : 20,
      "pull_request_review_id" : 1574035854,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291565216/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T16:29:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291565216",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291575150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, we are doing it manually, because we also compare it against what the mempool thinks it is.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T16:40:56Z",
      "diff_hunk" : "@@ -327,10 +354,16 @@ BOOST_FIXTURE_TEST_CASE(miniminer_overlap, TestChain100Setup)\n     const auto tx3_feerate = CFeeRate(high_fee, tx_vsizes[3]);\n     // tx3's feerate is lower than tx2's. same fee, different weight.\n     BOOST_CHECK(tx2_feerate > tx3_feerate);\n-    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[3]);\n+    const auto tx3_anc_feerate = CFeeRate(low_fee + med_fee + high_fee + high_fee, tx_vsizes[0] + tx_vsizes[1] + tx_vsizes[2] + tx_vsizes[3]);\n+    const auto tx3_iter = pool.GetIter(tx3->GetHash());\n+    BOOST_CHECK(tx3_anc_feerate == CFeeRate(tx3_iter.value()->GetModFeesWithAncestors(), tx3_iter.value()->GetSizeWithAncestors()));\n     const auto tx4_feerate = CFeeRate(high_fee, tx_vsizes[4]);\n-    const auto tx6_anc_feerate = CFeeRate(low_fee + med_fee, tx_vsizes[5] + tx_vsizes[6]);\n-    const auto tx7_anc_feerate = CFeeRate(low_fee + high_fee, tx_vsizes[5] + tx_vsizes[7]);\n+    const auto tx6_anc_feerate = CFeeRate(high_fee + low_fee + med_fee, tx_vsizes[4] + tx_vsizes[5] + tx_vsizes[6]);\n+    const auto tx6_iter = pool.GetIter(tx6->GetHash());\n+    BOOST_CHECK(tx6_anc_feerate == CFeeRate(tx6_iter.value()->GetModFeesWithAncestors(), tx6_iter.value()->GetSizeWithAncestors()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291575150",
      "id" : 1291575150,
      "in_reply_to_id" : 1268063062,
      "line" : 363,
      "node_id" : "PRRC_kwDOABII585M-99u",
      "original_commit_id" : "3016245bab453cc52744ac8fc6820e431315dbde",
      "original_line" : 363,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/miniminer_tests.cpp",
      "position" : 125,
      "pull_request_review_id" : 1574051878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575150/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T16:40:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291575841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575841"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added an `assert(fee);` right before.",
      "commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "created_at" : "2023-08-11T16:41:52Z",
      "diff_hunk" : "@@ -104,6 +109,15 @@ struct COutput {\n         return outpoint < rhs.outpoint;\n     }\n \n+    void ApplyBumpFee(CAmount bump_fee)\n+    {\n+        assert(bump_fee >= 0);\n+        ancestor_bump_fees = bump_fee;\n+        *fee += bump_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1291575841",
      "id" : 1291575841,
      "in_reply_to_id" : 1268094484,
      "line" : 116,
      "node_id" : "PRRC_kwDOABII585M--Ih",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 116,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : 47,
      "pull_request_review_id" : 1574053062,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575841/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-11T16:41:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1291575841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry, I still need to squash this, but this should be addressing all the open comments",
      "created_at" : "2023-08-11T18:12:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#issuecomment-1675183615",
      "id" : 1675183615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26152",
      "node_id" : "IC_kwDOABII585j2UX_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1675183615/reactions"
      },
      "updated_at" : "2023-08-11T18:12:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1675183615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1297760127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297760127"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, I replaced `GetSummedBumpFees()` with `GetTotalBumpFees()` which deducts the `bump_fee_discount` if it has been set.",
      "commit_id" : "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "created_at" : "2023-08-17T21:15:26Z",
      "diff_hunk" : "@@ -1034,7 +1052,7 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     if (nBytes == -1) {\n         return util::Error{_(\"Missing solving data for estimating transaction size\")};\n     }\n-    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees();\n+    CAmount fee_needed = coin_selection_params.m_effective_feerate.GetFee(nBytes) + result.GetSummedBumpFees() - result.GetBumpFeeDiscount();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1297760127",
      "id" : 1297760127,
      "in_reply_to_id" : 1253424884,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NWj9_",
      "original_commit_id" : "0f6c13665c4ab7d4928ff0fa63c4e755667f7fd6",
      "original_line" : 1054,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1583506192,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297760127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-17T21:15:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297760127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1297768542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297768542"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed SSFO from this test",
      "commit_id" : "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "created_at" : "2023-08-17T21:25:27Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXOs from two low feerate parent txs.\n+    def test_two_low_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs\")\n+        wallet = self.setup_and_fund_wallet(\"two_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        parent_one_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_one_tx = wallet.gettransaction(txid=parent_one_txid, verbose=True)\n+        self.assert_undershoots_target(p_one_tx)\n+\n+        parent_two_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_two_tx = wallet.gettransaction(txid=parent_two_txid, verbose=True)\n+        self.assert_undershoots_target(p_two_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_one_tx, p_two_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend two unconfirmed inputs, one each from low and high feerate parents\n+    def test_mixed_feerate_unconfirmed_parents(self):\n+        self.log.info(\"Start test with two unconfirmed parent txs one of which has a higher feerate\")\n+        wallet = self.setup_and_fund_wallet(\"two_mixed_parents_wallet\")\n+\n+        # Add second UTXO to tested wallet\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+\n+        high_parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=self.target_fee_rate*2)\n+        p_high_tx = wallet.gettransaction(txid=high_parent_txid, verbose=True)\n+        # This time the parent is greater than the child\n+        self.assert_beats_target(p_high_tx)\n+\n+        parent_low_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_low_tx = wallet.gettransaction(txid=parent_low_txid, verbose=True)\n+        # Other parent needs bump\n+        self.assert_undershoots_target(p_low_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=2.8, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_high_tx, p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+\n+        resulting_bumped_ancestry_fee_rate = self.calc_set_fee_rate([p_low_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_bumped_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_bumped_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend from chain with high feerate grandparent and low feerate parent\n+    def test_chain_of_high_low(self):\n+        self.log.info(\"Start test with low parent and high grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"high_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=self.target_fee_rate * 10)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+        # grandparent has higher feerate\n+        self.assert_beats_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        # parent is low feerate\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+        resulting_ancestry_fee_rate_with_high_feerate_gp = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate_with_high_feerate_gp, self.target_fee_rate*1.1)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO from chain of unconfirmed transactions with low feerate\n+    # grandparent and even lower feerate parent\n+    def test_chain_of_high_low_below_target_feerate(self):\n+        self.log.info(\"Start test with low parent and higher low grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"low_and_lower_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=5)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        # grandparent has higher feerate, but below target\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=1)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        # parent even lower\n+        self.assert_undershoots_target(p_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=1.3, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([gp_tx, p_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test fee calculation when bumping while using subtract fee from output (SFFO)\n+    def test_target_feerate_unconfirmed_low_sffo(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input, while subtracting from output\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet_sffo\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that parents of preset unconfirmed inputs get cpfp'ed\n+    def test_preset_input_cpfp(self):\n+        self.log.info(\"Start test with preset input from low feerate unconfirmed transaction\")\n+        wallet = self.setup_and_fund_wallet(\"preset_input\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        number_outputs = len(parent_tx[\"decoded\"][\"vout\"])\n+        assert_equal(number_outputs, 2)\n+\n+        # we don't care which of the two outputs we spent, they're both ours\n+        ancestor_aware_txid = wallet.send(outputs=[{self.def_wallet.getnewaddress(): 0.5}], fee_rate=self.target_fee_rate, options={\"add_inputs\": True, \"inputs\": [{\"txid\": parent_txid, \"vout\": 0}]})[\"txid\"]\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.5, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Test that RBFing a transaction with unconfirmed input gets the right feerate\n+    def test_rbf_bumping(self):\n+        self.log.info(\"Start test to rbf a transaction unconfirmed input to bump it\")\n+        wallet = self.setup_and_fund_wallet(\"bump\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        to_be_rbfed_ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate, subtractfeefromamount=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1297768542",
      "id" : 1297768542,
      "in_reply_to_id" : 1254048054,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585NWmBe",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 318,
      "original_position" : 318,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : null,
      "pull_request_review_id" : 1583519756,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297768542/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-17T21:25:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1297768542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1298590709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1298590709"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added",
      "commit_id" : "3e4fde6b9a2142191d9be799dbd030f38050c993",
      "created_at" : "2023-08-18T15:33:01Z",
      "diff_hunk" : "@@ -0,0 +1,458 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+\n+class UnconfirmedInputTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        getcontext().prec=9\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_and_fund_wallet(self, walletname):\n+        self.nodes[0].createwallet(walletname)\n+        wallet = self.nodes[0].get_wallet_rpc(walletname)\n+\n+        self.def_wallet.sendtoaddress(address=wallet.getnewaddress(), amount=2)\n+        self.generate(self.nodes[0], 1) # confirm funding tx\n+        return wallet\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def calc_fee_rate(self, tx):\n+        fee = Decimal(-1e8) * tx[\"fee\"]\n+        vsize = tx[\"decoded\"][\"vsize\"]\n+        return fee / vsize\n+\n+    def calc_set_fee_rate(self, txs):\n+        fees = Decimal(-1e8) * sum([tx[\"fee\"] for tx in txs]) # fee is negative!\n+        vsizes = sum([tx[\"decoded\"][\"vsize\"] for tx in txs])\n+        return fees / vsizes\n+\n+    def assert_spends_only_parent(self, tx, parent_txid):\n+        number_inputs = len(tx[\"decoded\"][\"vin\"])\n+        assert_equal(number_inputs, 1)\n+        txid_of_input = tx[\"decoded\"][\"vin\"][0][\"txid\"]\n+        assert_equal(txid_of_input, parent_txid)\n+\n+    def assert_undershoots_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(self.target_fee_rate, resulting_fee_rate)\n+\n+    def assert_beats_target(self, tx):\n+        resulting_fee_rate = self.calc_fee_rate(tx)\n+        assert_greater_than_or_equal(resulting_fee_rate, self.target_fee_rate)\n+\n+    # Meta-Test: try feerate testing function on confirmed UTXO\n+    def test_target_feerate_confirmed(self):\n+        self.log.info(\"Start test feerate with confirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"confirmed_wallet\")\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from high-feerate parent\n+    def test_target_feerate_unconfirmed_high(self):\n+        self.log.info(\"Start test feerate with high feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_high_wallet\")\n+\n+        # Send unconfirmed transaction with high feerate to testing wallet\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=3*self.target_fee_rate)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+        self.assert_beats_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend unconfirmed UTXO from low-feerate parent. Expect that parent gets\n+    # bumped to target feerate.\n+    def test_target_feerate_unconfirmed_low(self):\n+        self.log.info(\"Start test feerate with low feerate unconfirmed input\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_wallet\")\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1, fee_rate=1)\n+        parent_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(parent_tx)\n+\n+        ancestor_aware_txid = wallet.sendtoaddress(address=self.def_wallet.getnewaddress(), amount=0.5, fee_rate=self.target_fee_rate)\n+        ancestor_aware_tx = wallet.gettransaction(txid=ancestor_aware_txid, verbose=True)\n+\n+        self.assert_spends_only_parent(ancestor_aware_tx, parent_txid)\n+\n+        self.assert_beats_target(ancestor_aware_tx)\n+        resulting_ancestry_fee_rate = self.calc_set_fee_rate([parent_tx, ancestor_aware_tx])\n+        assert_greater_than_or_equal(resulting_ancestry_fee_rate, self.target_fee_rate)\n+        assert_greater_than_or_equal(self.target_fee_rate*1.1, resulting_ancestry_fee_rate)\n+\n+        self.generate(self.nodes[0], 1)\n+        wallet.unloadwallet()\n+\n+    # Spend UTXO with unconfirmed low feerate parent and grandparent\n+    # txs. Expect that both ancestors get bumped to target feerate.\n+    def test_chain_of_unconfirmed_low(self):\n+        self.log.info(\"Start test with parent and grandparent tx\")\n+        wallet = self.setup_and_fund_wallet(\"unconfirmed_low_chain_wallet\")\n+\n+        grandparent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.8, fee_rate=1)\n+        gp_tx = wallet.gettransaction(txid=grandparent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(gp_tx)\n+\n+        parent_txid = wallet.sendtoaddress(address=wallet.getnewaddress(), amount=1.5, fee_rate=2)\n+        p_tx = wallet.gettransaction(txid=parent_txid, verbose=True)\n+\n+        self.assert_undershoots_target(p_tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26152#discussion_r1298590709",
      "id" : 1298590709,
      "in_reply_to_id" : 1251588782,
      "line" : 129,
      "node_id" : "PRRC_kwDOABII585NZuv1",
      "original_commit_id" : "232edb7e5d630d9d687ba3089aa4028f8e0380a4",
      "original_line" : 129,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "test/functional/wallet_spend_unconfirmed.py",
      "position" : 129,
      "pull_request_review_id" : 1584793368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1298590709/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-18T15:33:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1298590709",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   }
]
