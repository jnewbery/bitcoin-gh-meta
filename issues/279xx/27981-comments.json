[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Approach ACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/27981#pullrequestreview-1513120096), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1630685413) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28222](https://github.com/bitcoin/bitcoin/pull/28222) (Use shared_ptr for CNode inside CConnman by willcl-ark)\n* [#28196](https://github.com/bitcoin/bitcoin/pull/28196) (BIP324 connection support by sipa)\n* [#28165](https://github.com/bitcoin/bitcoin/pull/28165) (net: transport abstraction by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-26T20:37:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608208734",
      "id" : 1608208734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585f21Fe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608208734/reactions"
      },
      "updated_at" : "2023-08-09T20:44:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608208734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cc @psgreco, who pointed to the issue, and helped test it.",
      "created_at" : "2023-06-26T20:38:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608209183",
      "id" : 1608209183,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585f21Mf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608209183/reactions"
      },
      "updated_at" : "2023-06-26T20:43:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608209183",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "concept ack 5e9237891df69876e1a6f81bf158aed2a683ffe2, this potential issue is not easy to trigger on demand in bitcoin, but it's relatively easy to trigger in elements, when the node is roughly 20/24 hours behind. Tested in elements a similar version of the patch it does solve the stalling",
      "created_at" : "2023-06-26T21:03:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608257369",
      "id" : 1608257369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585f3A9Z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608257369/reactions"
      },
      "updated_at" : "2023-06-26T21:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608257369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12950210?v=4",
         "events_url" : "https://api.github.com/users/psgreco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psgreco/followers",
         "following_url" : "https://api.github.com/users/psgreco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psgreco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psgreco",
         "id" : 12950210,
         "login" : "psgreco",
         "node_id" : "MDQ6VXNlcjEyOTUwMjEw",
         "organizations_url" : "https://api.github.com/users/psgreco/orgs",
         "received_events_url" : "https://api.github.com/users/psgreco/received_events",
         "repos_url" : "https://api.github.com/users/psgreco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psgreco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psgreco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psgreco"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Wouldn't it be possible to trigger and test this with some functional test?",
      "created_at" : "2023-06-27T08:38:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1609049607",
      "id" : 1609049607,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585f6CYH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609049607/reactions"
      },
      "updated_at" : "2023-06-27T08:38:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609049607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In theory, it should be, but in our tests (mostly @lolhill 's) a good component of this situation is latency. I've never been able to replicate this between 2 local hosts, always  with a host that's ~100ms away.",
      "created_at" : "2023-06-27T11:04:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1609279748",
      "id" : 1609279748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585f66kE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609279748/reactions"
      },
      "updated_at" : "2023-06-27T11:21:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609279748",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12950210?v=4",
         "events_url" : "https://api.github.com/users/psgreco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psgreco/followers",
         "following_url" : "https://api.github.com/users/psgreco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psgreco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psgreco",
         "id" : 12950210,
         "login" : "psgreco",
         "node_id" : "MDQ6VXNlcjEyOTUwMjEw",
         "organizations_url" : "https://api.github.com/users/psgreco/orgs",
         "received_events_url" : "https://api.github.com/users/psgreco/received_events",
         "repos_url" : "https://api.github.com/users/psgreco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psgreco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psgreco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psgreco"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1252173948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252173948"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it make sense to introduce a method `bool CNode::WantsToSend() const { return !pnode->vSendMsg.empty(); }` method, and use that here and instead of returning a `pair<X, bool>` above?",
      "commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "created_at" : "2023-07-04T15:36:37Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1252173948",
      "id" : 1252173948,
      "line" : 1221,
      "node_id" : "PRRC_kwDOABII585Koqh8",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1221,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 39,
      "pull_request_review_id" : 1513120096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252173948/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-04T16:06:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1252173948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Approach ACK",
      "created_at" : "2023-07-11T11:53:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1630685413",
      "id" : 1630685413,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585hMkjl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1630685413/reactions"
      },
      "updated_at" : "2023-07-11T11:53:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1630685413",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268769040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268769040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Won't the second `emplace` just do nothing both if both `select_send` and `select_recv` are true? I thought the idea was to change behavior to have both send and recv requested events (instead of just giving `select_send` priority like in master). But wouldn't we need to insert a combination of `Sock::SEND` and `Sock::RECV` then, instead of repeated `emplace`?",
      "commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "created_at" : "2023-07-19T23:13:14Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268769040",
      "id" : 1268769040,
      "line" : 1228,
      "node_id" : "PRRC_kwDOABII585Ln-EQ",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 57,
      "pull_request_review_id" : 1538174802,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268769040/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T23:13:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268769040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268782895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268782895"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The order, or splitting, does not matter. All of these are fed to `Sock::WaitMany`, which will mark the ones that are ready for sending to/receiving from. It's in the processing of those wait results that the prioritization happens, where receiving is skipped if (a) the socket was ready for sending (b) something was sent and (c) there is yet more to send.",
      "commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "created_at" : "2023-07-19T23:38:11Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268782895",
      "id" : 1268782895,
      "in_reply_to_id" : 1268769040,
      "line" : 1228,
      "node_id" : "PRRC_kwDOABII585LoBcv",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 57,
      "pull_request_review_id" : 1538194205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268782895/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-19T23:38:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268782895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268852909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268852909"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm still confused: `events_per_sock` is a `std::unordered_map`. If `select_send` and `select_recv` are true, we now `emplace` twice into it, with the same key `pnode->m_sock` and different values. That means that the first value stays, and the second `emplace` is a no-op, leaving the container unchanged. So if only the first value (in this case `Sock::SEND`) is fed to `Sock::WaitMany`, why doesn't the order matter?",
      "commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "created_at" : "2023-07-20T02:06:32Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268852909",
      "id" : 1268852909,
      "in_reply_to_id" : 1268769040,
      "line" : 1228,
      "node_id" : "PRRC_kwDOABII585LoSit",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 57,
      "pull_request_review_id" : 1538307996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268852909/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T02:06:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268852909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268854292"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268854292"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I had missed the data type, and thought you were talking something else.\n\nYou're absolutely right, will address.",
      "commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "created_at" : "2023-07-20T02:08:24Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268854292",
      "id" : 1268854292,
      "in_reply_to_id" : 1268769040,
      "line" : 1228,
      "node_id" : "PRRC_kwDOABII585LoS4U",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 57,
      "pull_request_review_id" : 1538309193,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268854292/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T02:08:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268854292",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268855297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268855297"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the concern here is that `events_per_sock` is a `Sock::EventsPerSock` which is an unordered map, so using the same key in two `emplace` calls would cause the second to overwrite the first. The key type here is `shared_ptr<const Sock>` and the `std::hash` for shared ptrs just looks at the address they're pointing too, so as far as I can see the second emplace here will indeed overwrite the first, making this effectively the same as:\r\n\r\n```\r\nif (select_recv) {\r\n    emplace(RECV);\r\n} else if (select_send) {\r\n    emplace(SEND);\r\n}\r\n```\r\n\r\nSo I think this should instead be a single emplace:\r\n\r\n```c++\r\nif (select_send || select_recv) {\r\n    Sock:Event event = (select_send ? Sock::SEND : 0) | (select_recv ? Sock::RECV : 0);\r\n    events_per_sock.emplace(pnode->m_sock, Sock::Events{event});\r\n}\r\n```",
      "commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "created_at" : "2023-07-20T02:10:43Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1268855297",
      "id" : 1268855297,
      "in_reply_to_id" : 1268769040,
      "line" : 1228,
      "node_id" : "PRRC_kwDOABII585LoTIB",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 57,
      "pull_request_review_id" : 1538310502,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268855297/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T02:10:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268855297",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269574745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269574745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-20T14:47:16Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269574745",
      "id" : 1269574745,
      "in_reply_to_id" : 1268769040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrCxZ",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1539451663,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269574745/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T14:47:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269574745",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269576094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269576094"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That'd mean grabbing the lock twice, no? I added it to `SocketSendData` because the `cs_vSend` lock is already grabbed to call that.",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-20T14:48:17Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269576094",
      "id" : 1269576094,
      "in_reply_to_id" : 1252173948,
      "line" : 1221,
      "node_id" : "PRRC_kwDOABII585LrDGe",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1221,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 39,
      "pull_request_review_id" : 1539453771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269576094/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T14:51:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269576094",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@psgreco See above; it turned out that what I intended to do here wasn't actually what was implemented (it was instead unconditionally preferring send over receive). Would you mind trying again if this fixes the issue for you?",
      "created_at" : "2023-07-20T14:53:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1644073315",
      "id" : 1644073315,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585h_pFj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644073315/reactions"
      },
      "updated_at" : "2023-07-20T14:56:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644073315",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269593154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269593154"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> so using the same key in two emplace calls would cause the second to overwrite the first.\r\n\r\nJust for the record: It's the other way round, the second call gets ignored and nothing overwritten, see https://en.cppreference.com/w/cpp/container/unordered_map/emplace",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-20T15:00:18Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1269593154",
      "id" : 1269593154,
      "in_reply_to_id" : 1268769040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LrHRC",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1539481826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 3,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269593154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T15:00:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269593154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270121452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270121452"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not if you make it `WantsToSend() EXCLUSIVE_LOCK_REQUIRED(cs_vSend)` and require the caller to have the lock?",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-21T00:27:25Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270121452",
      "id" : 1270121452,
      "in_reply_to_id" : 1252173948,
      "line" : 1221,
      "node_id" : "PRRC_kwDOABII585LtIPs",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1221,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 39,
      "pull_request_review_id" : 1540311677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270121452/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:27:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270121452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270122517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122517"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Err, doesn't that mean this behaved the same as the previous code? How did it [fix anything](https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1608257369)?",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-21T00:30:29Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270122517",
      "id" : 1270122517,
      "in_reply_to_id" : 1268769040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtIgV",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1540313224,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122517/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270125479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270125479"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@ajtowns The old code here first added a SEND, and then a RECEIVE, so if both were performed, only a SEND would be present in the map, meaning an unconditional send.",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-21T00:38:00Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270125479",
      "id" : 1270125479,
      "in_reply_to_id" : 1268769040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtJOn",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1540317119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270125479/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:38:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270125479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270127032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270127032"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I could reproduce the problem in a functional test today - for me, neither version (including the current one) fixes the problem completely. Will post detailed results soon.",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-21T00:41:54Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270127032",
      "id" : 1270127032,
      "in_reply_to_id" : 1268769040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtJm4",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1540319113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270127032/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:41:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270127032",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I wrote a functional test, see https://github.com/mzumsande/bitcoin/tree/test_sipa_netstalling (because of the 1st commit obviously not intended for merge, but it makes it possible to reproduce the problem). \r\nIt works by mining a few large blocks, and having  two nodes exchange these blocks in both directions by repeated `getblockfrompeer` calls, and then check whether the deadlock happened.\r\n\r\nUnfortunately, the current branch doesn't appear to fix the problem completely, the test fails for me both here and on master: \r\nWhen the situation is reached where we now select for both sending and receiving (because our peer doesn't receive any data), we try to resolve the deadlock by now also receiving.\r\nThis works for a little while - however, if our send buffer is full, `fPauseSend` will be set, and because of that we skip early in `ProcessMessages()` and don't call `PollMessage()` anymore. Therefore the received data will pile up without being cleared by `net_processing`. When `pnode->m_msg_process_queue_size` becomes too large (5MB), `fPauseRecv` will also be set, and after that we are again in a deadlock situation where both peers are sending and none is receiving. I could observe this with the added logging in the 3rd commit in my branch.\r\n\r\nNot sure how to best fix this...",
      "created_at" : "2023-07-21T01:28:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1644864253",
      "id" : 1644864253,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585iCqL9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644864253/reactions"
      },
      "updated_at" : "2023-07-21T01:33:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644864253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270175120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270175120"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ajtowns The old code here first added a SEND, and then a RECEIVE, so if both were performed, only a SEND would be present in the map, meaning an unconditional send.\r\n\r\nRight, but master does the same thing, only emplacing SEND whenever vSendMsg isn't empty; so seems weird that the original patch here was observed to help anything?",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-21T02:47:13Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270175120",
      "id" : 1270175120,
      "in_reply_to_id" : 1268769040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtVWQ",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1540388418,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270175120/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T02:47:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270175120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270177198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270177198"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@ajtowns You're right. I'm confused now. @mzumsande's observation that stalling can also be caused by fPauseRecv being set on both sides seems like a partial explanation, but not the whole thing. ",
      "commit_id" : "3388e523a129ad9c7aef418c9f57491f8c2d9df8",
      "created_at" : "2023-07-21T02:51:59Z",
      "diff_hunk" : "@@ -1217,37 +1217,15 @@ Sock::EventsPerSock CConnman::GenerateWaitSockets(Span<CNode* const> nodes)\n     }\n \n     for (CNode* pnode : nodes) {\n-        // Implement the following logic:\n-        // * If there is data to send, select() for sending data. As this only\n-        //   happens when optimistic write failed, we choose to first drain the\n-        //   write buffer in this case before receiving more. This avoids\n-        //   needlessly queueing received data, if the remote peer is not themselves\n-        //   receiving data. This means properly utilizing TCP flow control signalling.\n-        // * Otherwise, if there is space left in the receive buffer, select() for\n-        //   receiving data.\n-        // * Hand off all complete messages to the processor, to be handled without\n-        //   blocking here.\n-\n         bool select_recv = !pnode->fPauseRecv;\n-        bool select_send;\n-        {\n-            LOCK(pnode->cs_vSend);\n-            select_send = !pnode->vSendMsg.empty();\n-        }\n+        bool select_send = WITH_LOCK(pnode->cs_vSend, return !pnode->vSendMsg.empty());\n+        if (!select_recv && !select_send) continue;\n \n         LOCK(pnode->m_sock_mutex);\n-        if (!pnode->m_sock) {\n-            continue;\n-        }\n+        if (!pnode->m_sock) continue;\n \n-        Sock::Event requested{0};\n-        if (select_send) {\n-            requested = Sock::SEND;\n-        } else if (select_recv) {\n-            requested = Sock::RECV;\n-        }\n-\n-        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n+        if (select_send) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::SEND});\n+        if (select_recv) events_per_sock.emplace(pnode->m_sock, Sock::Events{Sock::RECV});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#discussion_r1270177198",
      "id" : 1270177198,
      "in_reply_to_id" : 1268769040,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtV2u",
      "original_commit_id" : "5e9237891df69876e1a6f81bf158aed2a683ffe2",
      "original_line" : 1228,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1540390987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27981",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270177198/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T02:52:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270177198",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `fPauseSend` getting set on both sides and causing a deadlock should probably be out of scope for this PR -- at least as I understand it, this fixes an issue where we get a deadlock even without `fPauseSend` triggering.\r\n\r\nI think the scenario here is:\r\n\r\n * peer A sends a 2MB message to peer B. This fills up B's socket receive buffer (200kB?) and A's socket send buffer (200kB?) without completing. A still has 1.6MB to send to B, so stops reading from the socket.\r\n * peer B does the same thing at almost exactly the same time, with the same result.\r\n * A/B are deadlocked.\r\n\r\nMaybe adding a debug-only sendp2pmsg rpc would be the easiest way to simulate this and be useful for debugging p2p things in general?\r\n\r\nIf we do want to address `fPauseSend` deadlocking, a few approaches come to mind:\r\n\r\n 1. easy: make fPauseSend a timestamp rather than a boolean, and if it's been set for >5 minutes, disconnect. doesn't prevent the deadlock, but at least frees up the connection slot and makes it possible to try again.\r\n 2. hard: rework net_processing so that we keep making as much progress as we can -- eg, change `fPauseSend` to continue processing incoming block or tx messages, but to skip GETDATA messages and to defer sending out INV messages and the like, so that we're draining as much traffic as we can, while limiting how much gets added.\r\n 3. impossible? add more dynamic traffic throttling: if you're bandwidth limited and getting too much TX traffic, perhaps you should be raising your feefilter level even if your mempool isn't full? I don't see how to generalise that if it's blocks or header messages or something else that cause a problem though.",
      "created_at" : "2023-07-21T04:50:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1644977188",
      "id" : 1644977188,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585iDFwk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644977188/reactions"
      },
      "updated_at" : "2023-07-21T04:50:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644977188",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @psgreco See above; it turned out that what I intended to do here wasn't actually what was implemented (it was instead unconditionally preferring send over receive). Would you mind trying again if this fixes the issue for you?\r\n\r\nIt seems to fix the issue for me still with the new changes, but the refactor that I had to do to run in elements 22 (like bitcoin 22), doesn't let me make a hard confirmation. ",
      "created_at" : "2023-07-21T20:05:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1646183855",
      "id" : 1646183855,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585iHsWv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1646183855/reactions"
      },
      "updated_at" : "2023-07-21T20:05:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1646183855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12950210?v=4",
         "events_url" : "https://api.github.com/users/psgreco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/psgreco/followers",
         "following_url" : "https://api.github.com/users/psgreco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/psgreco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/psgreco",
         "id" : 12950210,
         "login" : "psgreco",
         "node_id" : "MDQ6VXNlcjEyOTUwMjEw",
         "organizations_url" : "https://api.github.com/users/psgreco/orgs",
         "received_events_url" : "https://api.github.com/users/psgreco/received_events",
         "repos_url" : "https://api.github.com/users/psgreco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/psgreco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/psgreco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/psgreco"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns @mzumsande Thanks, so it appears there are actually two mostly-unrelated network buffer deadlock issues, and Martin's test is likely triggering both of them.\r\n\r\nI agree with AJ that we should still fix the network side one, even if we can't (or don't want to address) the application buffer side one. Fixing the application buffer side one indeed seems a lot harder, and probably needs discussion beyond this PR.\r\n\r\nIt would be good to have a test for the network side one, without it also triggering the application side one, to verify this PR actually fixes something. Especially as I don't understand @psgreco's earlier observation (where an older version of this PR unconditionally preferred sending, which shouldn't improve the situation at all) as a means to validate it.",
      "created_at" : "2023-07-24T14:03:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1647982643",
      "id" : 1647982643,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585iOjgz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1647982643/reactions"
      },
      "updated_at" : "2023-07-24T14:03:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1647982643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Thanks, so it appears there are actually two mostly-unrelated network buffer deadlock issues, and Martin's test is likely triggering both of them.\r\n\r\nSo far, I haven't been able to trigger the original deadlock issue in my test when I run it on master - only the other one described above.",
      "created_at" : "2023-08-11T11:37:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27981#issuecomment-1674606177",
      "id" : 1674606177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27981",
      "node_id" : "IC_kwDOABII585j0HZh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674606177/reactions"
      },
      "updated_at" : "2023-08-11T11:37:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674606177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   }
]
