[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "FYI @hebasto, this adds error checking for the flags from #16097",
      "created_at" : "2019-08-04T14:14:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518007182",
      "id" : 518007182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxODAwNzE4Mg==",
      "updated_at" : "2019-08-04T14:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518007182",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390632"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390632"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice to see `ALLOW_NEGATED` flag [again](https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823) ;)",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-04T14:52:04Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390632",
      "id" : 310390632,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM5MDYzMg==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 137,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 270501537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390769"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could we drop `ALLOW_NEGATED` for `TYPE_INT` now or in the future?",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-04T14:54:39Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,\n+        TYPE_OPTIONAL_STRING = ALLOW_NONEMPTY | ALLOW_NEGATED | ALLOW_EMPTY,\n+        TYPE_INT = ALLOW_INT | ALLOW_NEGATED,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390769",
      "id" : 310390769,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDM5MDc2OQ==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 149,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 270501668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310390769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-545388679) |\n| Approach NACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902442106) |\n| Stale ACK | [hebasto](https://github.com/bitcoin/bitcoin/pull/16545#pullrequestreview-339547315) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29043](https://github.com/bitcoin/bitcoin/pull/29043) (fuzz: make FuzzedDataProvider usage deterministic by martinus)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2019-08-04T14:59:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518010518",
      "id" : 518010518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxODAxMDUxOA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518010518/reactions"
      },
      "updated_at" : "2023-12-10T02:20:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518010518",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems that not providing a new `InterpretNegated()` function has some benefits:\r\n- no need for `key_name` local variables\r\n- diff gets much smaller",
      "created_at" : "2019-08-04T15:21:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518012293",
      "id" : 518012293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxODAxMjI5Mw==",
      "updated_at" : "2019-08-04T15:21:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518012293",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311316763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311316763"
         }
      },
      "author_association" : "MEMBER",
      "body" : "00973301f6a1efb6aa2232544a49b080ac0c6c50\r\n\r\nLooks like this should be an assertion?\r\n```c++\r\n        if (flags) assert(flags & require_any);\r\n```",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-06T23:32:49Z",
      "diff_hunk" : "@@ -260,8 +260,60 @@ class ArgsManagerHelper {\n         }\n         return InterpretBool(found_result.second); // is set, so evaluate\n     }\n+\n+    static inline void CheckFlags(const ArgsManager& am, const std::string& key, unsigned int require_any)\n+    {\n+        unsigned int flags = am.FlagsOfKnownArg(key);\n+        if (flags != ArgsManager::NONE && ((flags & require_any) == 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311316763",
      "id" : 311316763,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTMxNjc2Mw==",
      "original_commit_id" : "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "original_line" : 274,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 271666106,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311316763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311321892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1efb9ee41ab228a73d293603838951af6fb0f59c\r\n\r\nIt would be nice to see a commit elsewhere using these \"types\".",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-06T23:59:13Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892",
      "id" : 311321892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTMyMTg5Mg==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 144,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 271666106,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311321892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390632\r\n\r\n> Nice to see ALLOW_NEGATED flag again ;)\r\n\r\nIt is ok to have this, but like the comment above it says, it should only be used in rare cases, where a negated setting needs to be treated differently than a false/0/empty bool/int/string setting. Normal code for normal options should never have to use ALLOW_NEGATED or IsArgNegated.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-07T08:55:14Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440418",
      "id" : 311440418,
      "in_reply_to_id" : 310390632,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDQxOA==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 137,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 271818284,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440447"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390769\r\n\r\n> Could we drop ALLOW_NEGATED for TYPE_INT now or in the future?\r\n\r\nThis seems like a bad thing to provide as a shortcut. If an option is an integer, treating `-nonumber` exactly the same as `-number=0` provides a simple interface to users consistent with what we've always provided in the past. Treating these the same is also less error prone for developers than treating them differently. It is possible there may be exceptions where treating `-nonumber` differently from `-number=0` would be a good thing, but I'd honestly be surprised to see one, and ALLOW_ flags and IsArgNegated function are available if this is actually desired.\r\n\r\nIn case the reason you're asking about this is because you want range checking for integer options that shouldn't accept 0, I think it'd be better to implement that in a way that disallows both `-nonumber` and `-number=0` settings, not just one of them. This could be added with a TYPE_POSITIVE_INT shortcut, or letting AddArg take validation callbacks or options structs (`IntType{}.MinValue(1).MaxValue(65535)`) in place of flags.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-07T08:55:19Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,\n+        TYPE_OPTIONAL_STRING = ALLOW_NONEMPTY | ALLOW_NEGATED | ALLOW_EMPTY,\n+        TYPE_INT = ALLOW_INT | ALLOW_NEGATED,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440447",
      "id" : 311440447,
      "in_reply_to_id" : 310390769,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDQ0Nw==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 149,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 271818284,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440561"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311316763\r\n\r\n> Looks like this should be an assertion?\r\n\r\nI know you didn't check the tests yet, but the main reason for this being a logic_error instead of an assert is so the test can require and check this logic so it won't be accidentally broken in the future. The other reason this is a logic_error is to provide clearer feedback to a developer who accidentally sets the wrong flag or calls the wrong GetArg overload, by providing the option names and flags values in error messages.\r\n\r\nI tdo think it makes sense to use assert/abort instead of logic_error in cases where the error is critical (affecting consensus, or data integrity) and it's important to abort unconditionally and not take a risk that a caller may catch the error and handle it inappropriately. But this case is less critical than that.\r\n\r\nAlso this case really can and should be a compile error, not a runtime error. But it will take some more work and scripted-diffs to make that happen.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-07T08:55:33Z",
      "diff_hunk" : "@@ -260,8 +260,60 @@ class ArgsManagerHelper {\n         }\n         return InterpretBool(found_result.second); // is set, so evaluate\n     }\n+\n+    static inline void CheckFlags(const ArgsManager& am, const std::string& key, unsigned int require_any)\n+    {\n+        unsigned int flags = am.FlagsOfKnownArg(key);\n+        if (flags != ArgsManager::NONE && ((flags & require_any) == 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440561",
      "id" : 311440561,
      "in_reply_to_id" : 311316763,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDU2MQ==",
      "original_commit_id" : "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "original_line" : 274,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 271818284,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440627"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892\r\n\r\n> It would be nice to see a commit elsewhere using these \"types\".\r\n\r\nThis is a good idea. I can open a draft PR applying these to some wallet flags, since I know hebasto already has good work on node flags like -datadir, -blocksdir, -pid etc that I don't want to interfere with. I do think any PR actually using flags should be merged after this one since changing flag behavior after flags are already in use would be unnecessarily confusing and risky.\r\n",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-07T08:55:41Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440627",
      "id" : 311440627,
      "in_reply_to_id" : 311321892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ0MDYyNw==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 144,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 271818284,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311440627",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490205"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490205"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually I did check and ran the tests with my change and I understand the idea of testing the exception, which wouldn't make sense if it was an assertion.\r\n\r\n> Also this case really can and should be a compile error\r\n\r\nAgree.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-07T10:53:36Z",
      "diff_hunk" : "@@ -260,8 +260,60 @@ class ArgsManagerHelper {\n         }\n         return InterpretBool(found_result.second); // is set, so evaluate\n     }\n+\n+    static inline void CheckFlags(const ArgsManager& am, const std::string& key, unsigned int require_any)\n+    {\n+        unsigned int flags = am.FlagsOfKnownArg(key);\n+        if (flags != ArgsManager::NONE && ((flags & require_any) == 0)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490205",
      "id" : 311490205,
      "in_reply_to_id" : 311316763,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ5MDIwNQ==",
      "original_commit_id" : "00973301f6a1efb6aa2232544a49b080ac0c6c50",
      "original_line" : 274,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 271880915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490504"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe a brief example in the PR description then?",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-07T10:54:33Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490504",
      "id" : 311490504,
      "in_reply_to_id" : 311321892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ5MDUwNA==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 144,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 271881309,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311490504",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Side note, I find `FlagsOfKnownArg` confusing because it also returns for unknown arguments and it doesn't tell if it's known or not. I'd reword to `GetArgFlags`.",
      "created_at" : "2019-08-07T10:58:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-519048000",
      "id" : 519048000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxOTA0ODAwMA==",
      "updated_at" : "2019-08-07T10:58:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/519048000",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312037476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312037476"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Maybe a brief example in the PR description then?\r\n\r\nAnother really good idea! Will add this.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-08T13:34:34Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312037476",
      "id" : 312037476,
      "in_reply_to_id" : 311321892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjAzNzQ3Ng==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 144,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 272573893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312037476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312707098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312707098"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> If an option is an integer, treating `-nonumber` exactly the same as `-number=0` provides a simple interface to users...\r\n\r\nSuch practice is a bad habit, IMO.\r\n\r\n> ... consistent with what we've always provided in the past. Treating these the same is also less error prone for developers than treating them differently.\r\n\r\nAgree. It is important.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-10T15:48:16Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {\n-        NONE = 0x00,\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        NONE = 0x0, //<! Indicates flag lookup failed.\n+\n+        /* Low level validation flags. In most cases these should be avoided,\n+         * and standard TYPE_* flag combinations below should be preferred. */\n+        ALLOW_ANY      = 0x01, //!< disable validation\n+        ALLOW_NEGATED  = 0x02, //!< allow -nofoo and -nofoo=1\n+        ALLOW_EMPTY    = 0x04, //!< allow -foo and -foo=\"\"\n+        ALLOW_NONEMPTY = 0x08, //!< allow -foo=bar\n+        ALLOW_INT      = 0x10, //!< allow -foo=123\n+        ALLOW_BOOL     = 0x20, //!< allow -foo=0 and -foo=1\n+\n+        /* Standard value types. */\n+        TYPE_STRING = ALLOW_NONEMPTY,\n+        TYPE_OPTIONAL_STRING = ALLOW_NONEMPTY | ALLOW_NEGATED | ALLOW_EMPTY,\n+        TYPE_INT = ALLOW_INT | ALLOW_NEGATED,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312707098",
      "id" : 312707098,
      "in_reply_to_id" : 310390769,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjcwNzA5OA==",
      "original_commit_id" : "1efb9ee41ab228a73d293603838951af6fb0f59c",
      "original_line" : 149,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 273430124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312707098",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK 01ca54a2411ff8f39fa10974327e882141140739\r\n\r\n@promag \r\n> Side note, I find `FlagsOfKnownArg` confusing because it also returns for unknown arguments and it doesn't tell if it's known or not. I'd reword to `GetArgFlags`.\r\n\r\nFor unknown arguments it returns `ArgsManager::NONE`.\r\n\r\n@ryanofsky \r\n> Both seem good to me, but get `GetArgFlags` does seem a little more standard, so I'll rename if @hebasto also says it's better or just as good.\r\n\r\nNaming is the hardest part of coding ;)\r\nAgree with @promag's suggestion about renaming.",
      "created_at" : "2019-08-10T16:09:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-520160573",
      "id" : 520160573,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyMDE2MDU3Mw==",
      "updated_at" : "2019-08-10T16:09:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520160573",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312709327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312709327"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could the underlying type be specified?\r\n```suggestion\r\n     enum Flags : unsigned int {\r\n```\r\nRef: https://github.com/bitcoin/bitcoin/pull/16097#discussion_r310193132",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-10T16:56:16Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312709327",
      "id" : 312709327,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjcwOTMyNw==",
      "original_commit_id" : "01ca54a2411ff8f39fa10974327e882141140739",
      "original_line" : 131,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 273432467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312709327",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r313973773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313973773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Could the underlying type be specified?\r\n\r\nDone in 9a1e20eef36b9dfff9de7780b0edd30b8ae92487",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-08-14T16:40:33Z",
      "diff_hunk" : "@@ -129,12 +129,23 @@ class ArgsManager\n {\n public:\n     enum Flags {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r313973773",
      "id" : 313973773,
      "in_reply_to_id" : 312709327,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzk3Mzc3Mw==",
      "original_commit_id" : "01ca54a2411ff8f39fa10974327e882141140739",
      "original_line" : 131,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 275011908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313973773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, consistent argument error checking is good.",
      "created_at" : "2019-10-23T10:58:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-545388679",
      "id" : 545388679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTM4ODY3OQ==",
      "updated_at" : "2019-10-23T10:59:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545388679",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-28T19:20:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-547105301",
      "id" : 547105301,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NzEwNTMwMQ==",
      "updated_at" : "2019-10-28T19:20:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547105301",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r346127792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346127792"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement missing error checking for ArgsManager flags\" (4b8149b5aae874cffe81423a2d4529c6f5b6e944)\r\n\r\nNote: comment describing this function is in the header file shown below on github",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-11-14T05:01:07Z",
      "diff_hunk" : "@@ -350,11 +410,28 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n     return nullopt;\n }\n \n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r346127792",
      "id" : 346127792,
      "line" : 465,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjEyNzc5Mg==",
      "original_commit_id" : "4b8149b5aae874cffe81423a2d4529c6f5b6e944",
      "original_line" : 465,
      "original_position" : 194,
      "original_start_line" : 413,
      "path" : "src/util/system.cpp",
      "position" : 201,
      "pull_request_review_id" : 316713766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : 462,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346127792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-12-19T20:16:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-567646434",
      "id" : 567646434,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NzY0NjQzNA==",
      "updated_at" : "2019-12-19T20:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/567646434",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360732832"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360732832"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, comma before `false`?",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-12-22T22:30:02Z",
      "diff_hunk" : "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360732832",
      "id" : 360732832,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDczMjgzMg==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 179,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 335673755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360732832",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736266"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, I've changed this to `Optional<string>`, see https://github.com/promag/bitcoin/commit/71da58bc9437b977e56029bd8d2516bcf61cb823.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-12-22T23:42:50Z",
      "diff_hunk" : "@@ -198,30 +190,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n+static Optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736266",
      "id" : 360736266,
      "line" : 221,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDczNjI2Ng==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 221,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : 71,
      "pull_request_review_id" : 335673755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736303"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736303"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`AddArg` could disallow any other flag when this one is used?",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2019-12-22T23:43:47Z",
      "diff_hunk" : "@@ -132,12 +132,13 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n-    enum Flags {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+    enum Flags : unsigned int {\n+        ALLOW_ANY = 0x01,    //!< disable validation",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736303",
      "id" : 360736303,
      "line" : 166,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDczNjMwMw==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 166,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : 14,
      "pull_request_review_id" : 335673755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360736303",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r362874240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362874240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n     * integer, or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a \"-setting=value\"\r\n```",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-03T16:34:15Z",
      "diff_hunk" : "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,\n+     * integer, or boolean depending on ALLOW_ flags if a \"-setting=value\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r362874240",
      "id" : 362874240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDI0MA==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 180,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 338163788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362874240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is @MarcoFalke's [suggestion](https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360386173) still relevant?",
      "created_at" : "2020-01-06T12:04:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-571114833",
      "id" : 571114833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MTExNDgzMw==",
      "updated_at" : "2020-01-06T12:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571114833",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736266\r\n\r\n> nit, I've changed this to `Optional<string>`, see [promag@71da58b](https://github.com/promag/bitcoin/commit/71da58bc9437b977e56029bd8d2516bcf61cb823).\r\n\r\nUsing an optional wrapper instead of a simple const pointer seems a little worse to me (less efficient, more verbose), but I wouldn't object if there's an advantage I'm not seeing.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-06T22:17:16Z",
      "diff_hunk" : "@@ -198,30 +190,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n+static Optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509730",
      "id" : 363509730,
      "in_reply_to_id" : 360736266,
      "line" : 221,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTczMA==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 221,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : 71,
      "pull_request_review_id" : 338929766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736303\r\n\r\n> `AddArg` could disallow any other flag when this one is used?\r\n\r\nThanks, added checks for useless flag combinations in `AddArg` and tests for the checks in `util_CheckBadFlagCombinations`",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-06T22:17:34Z",
      "diff_hunk" : "@@ -132,12 +132,13 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n-    enum Flags {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+    enum Flags : unsigned int {\n+        ALLOW_ANY = 0x01,    //!< disable validation",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509851",
      "id" : 363509851,
      "in_reply_to_id" : 360736303,
      "line" : 166,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTg1MQ==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 166,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : 14,
      "pull_request_review_id" : 338929766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509906"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360732832\r\n\r\n> nit, comma before `false`?\r\n\r\nThanks, fixed",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-06T22:17:44Z",
      "diff_hunk" : "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509906",
      "id" : 363509906,
      "in_reply_to_id" : 360732832,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTkwNg==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 179,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 338929766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363509906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363510017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363510017"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r362874240\r\n\r\nThanks, included suggestion",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-06T22:18:06Z",
      "diff_hunk" : "@@ -174,8 +175,9 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n+     * Result will be null if setting was unset, true if \"-setting\" argument\n+     * was passed false if \"-nosetting\" argument was passed, and a string,\n+     * integer, or boolean depending on ALLOW_ flags if a \"-setting=value\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363510017",
      "id" : 363510017,
      "in_reply_to_id" : 362874240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxMDAxNw==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 180,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 338929766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363510017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363943771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363943771"
         }
      },
      "author_association" : "MEMBER",
      "body" : "assiging  ==> assigning",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-07T20:48:09Z",
      "diff_hunk" : "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assiging explicit int or string",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363943771",
      "id" : 363943771,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0Mzc3MQ==",
      "original_commit_id" : "27beca5ffee664360005f74123dad9107769d048",
      "original_line" : 409,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 339497687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363943771",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363968221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363968221"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363943771\r\n\r\n> assiging ==> assigning\r\n\r\nThanks, fixed",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-07T21:50:22Z",
      "diff_hunk" : "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assiging explicit int or string",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363968221",
      "id" : 363968221,
      "in_reply_to_id" : 363943771,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2ODIyMQ==",
      "original_commit_id" : "27beca5ffee664360005f74123dad9107769d048",
      "original_line" : 409,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 339529990,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363968221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "A note for future: it seems worth adding a functional test for \"Warning: parsed potentially confusing double-negative ...\" in the `debug.log`.\r\n\r\nnm - it is already, see #17893 ",
      "created_at" : "2020-01-07T22:28:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-571802700",
      "id" : 571802700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MTgwMjcwMA==",
      "updated_at" : "2020-01-07T23:02:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571802700",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rather than changing `foo=` from being `foo=0` to becoming `foo=<whatever foo's default was>` it might be clearer to write `reset-foo` for that behaviour (like `-nofoo`), so that it can be consistent no matter what the type of the setting is?",
      "created_at" : "2020-01-09T05:28:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-572394418",
      "id" : 572394418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MjM5NDQxOA==",
      "updated_at" : "2020-01-09T05:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572394418",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r364847093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364847093"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah don't bother",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-09T16:45:39Z",
      "diff_hunk" : "@@ -198,30 +190,98 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW_* type checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n+static Optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r364847093",
      "id" : 364847093,
      "in_reply_to_id" : 360736266,
      "line" : 221,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0NzA5Mw==",
      "original_commit_id" : "67518f7cc61bf59ddfa0fd7c8dbbdec3653b9556",
      "original_line" : 221,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : 71,
      "pull_request_review_id" : 340663527,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364847093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for looking at this!\r\n\r\n> Rather than changing `foo=` from being `foo=0` to becoming `foo=<whatever foo's default was>`\r\n\r\nI don't think that's really an accurate description. `-foo=\"\"` is currently interpreted as `true` for boolean arguments, `0` for integer arguments, and all kinds of random ways for string arguments. The PR doesn't change this, or affect any existing behavior.\r\n\r\nWhat the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way, so when you are trying to retrieve a setting that has a default value, you can just call a `GetArg` function and not have to deal with `IsArgSet` `IsArgNegated` or do manual parsing to get sensible behavior. After porting lots of existing arguments and dealing with bugs like #15864, I think that sensible behavior in most cases means treating `-nofoo` like `false/0/\"\"` for bool/int/string arguments, allowing `-foo` syntax for bool arguments but not most int/string arguments, and treating empty `-foo=\"\"` settings like unset settings.\r\n\r\nThese are just defaults, though. Since #15934, the internal representation of settings is always unambiguous and doesn't throw away information, and callers should easily be able to implement any behavior they choose when interpretting settings.\r\n\r\n> it might be clearer to write `reset-foo` for that behaviour (like `-nofoo`), so that it can be consistent no matter what the type of the setting is?\r\n\r\nI think this could be a reasonable feature to add in its own PR. Reset settings could be represented as `null` setting values. The `GetArg` functions already always treat `null` settings like unset settings, regardless of flags.",
      "created_at" : "2020-01-09T19:24:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-572714990",
      "id" : 572714990,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MjcxNDk5MA==",
      "updated_at" : "2020-01-09T19:24:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572714990",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370152855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370152855"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems like you might as well have a check for:\r\n\r\n```c++\r\nif ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_LIST)) \r\n```\r\n\r\nhere as well -- if you add LIST, you can't use GetArg to query for a string or int, or GetBoolArg to query for a bool value?",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-23T14:35:20Z",
      "diff_hunk" : "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370152855",
      "id" : 370152855,
      "line" : 743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1Mjg1NQ==",
      "original_commit_id" : "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "original_line" : 743,
      "original_position" : 270,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : 291,
      "pull_request_review_id" : 347342602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370152855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370153489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370153489"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems like this should have `/* forbid= */ ALLOW_LIST` to match `GetBoolArg` ?",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-23T14:36:25Z",
      "diff_hunk" : "@@ -398,15 +474,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ 0, __func__);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370153489",
      "id" : 370153489,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1MzQ4OQ==",
      "original_commit_id" : "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "original_line" : 478,
      "original_position" : 252,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 347342602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370153489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> What the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way,\r\n\r\nThe way I think of args at the moment is that `ArgsManager` stores a convenient representation of the config file (so it parses out the \"-nofoo\" stuff, but otherwise just stores strings) before it's converted into typed info, and then the GetArg functions do that conversion so that the setting can actually be used, often dropping the result into a global/module variable so it doesn't have to be repeatedly converted.\r\n\r\nI guess what I've got in mind is eventually ending up with something where args get statically declared along with the variable they should stored in, and parsing/merging the config files and command line just fills in the variables, so that instead of `GetBoolArg('-addrmantest', false)` you just evaluate `g_addrmantest` and get your answer more directly. I suppose that would mean instead of querying `IsArgSet` mean you'd use a `std::optional<bool>` instead of just `bool` etc; but otherwise it would give you compile time type checking and mean that you'd be writing the default values where you define the parameters rather than every place you try to access them. (I don't know if this is all actually possible, it's just what I'm hoping for)\r\n\r\nAnyway, with or without that context, I'm not really seeing that much value in adding the type information while ArgsManager is storing the info; it's easy enough to say that \"\" should be interpreted as 0 if asked for as an int and true if asked for as a bool, but when you want to convert the \"\" to an int, and then convert that int to a bool because you've got `ALLOW_INT | ALLOW_BOOL` set, that starts becoming pretty weird. Weird enough that you've implemented it so that in that case `-value=` returns the defaults instead; but that's then a user-visible behaviour change for anyone who was using `-boolparam=` to set it true if it's default happens to be false when `-boolparam` is converted from ANY to BOOL.\r\n\r\nTo try and fully understand your PR, I've split it up into bitesize chunks that make sense to me on their own -- https://github.com/ajtowns/bitcoin/commits/202001-argsmanflag . It gets most of the PR done, but doesn't do the coversion to int within SettingsValue generally, so keeps the same semantics for all the calls that wouldn't pass an error back to the user. I'm not really seeing enough value in those different semantics to justify the change given the chance of breaking someone's config isn't zero...",
      "created_at" : "2020-01-23T16:15:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-577752833",
      "id" : 577752833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3Nzc1MjgzMw==",
      "updated_at" : "2020-01-23T16:15:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577752833",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > What the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way,\r\n> \r\n> The way I think of args at the moment is that `ArgsManager` stores a convenient representation of the config file (so it parses out the \"-nofoo\" stuff, but otherwise just stores strings) before it's converted into typed info, and then the GetArg functions do that conversion so that the setting can actually be used, often dropping the result into a global/module variable so it doesn't have to be repeatedly converted.\r\n> \r\n> I guess what I've got in mind is eventually ending up with something where args get statically declared along with the variable they should stored in, and parsing/merging the config files and command line just fills in the variables, so that instead of `GetBoolArg('-addrmantest', false)` you just evaluate `g_addrmantest` and get your answer more directly. I suppose that would mean instead of querying `IsArgSet` mean you'd use a `std::optional<bool>` instead of just `bool` etc; but otherwise it would give you compile time type checking and mean that you'd be writing the default values where you define the parameters rather than every place you try to access them. (I don't know if this is all actually possible, it's just what I'm hoping for)\r\n\r\nYes, I have the same thing in mind. But again, like I said in https://github.com/bitcoin/bitcoin/pull/17580#pullrequestreview-340791706, switching from untyped settings to typed settings is the hard part because it has to do be done on a case-by-case basis (see wallet flag commits in the PR description). Switching from a dynamic representation of types to a static representation of types is a straightforward thing to do after types are in place.\r\n\r\n> Anyway, with or without that context, I'm not really seeing that much value in adding the type information while ArgsManager is storing the info\r\n\r\nI've tried to clearly motivate this PR and the PRs that depend on it (#17493 #17580 #17581 and #17783). I'm not trying to convince everyone of everything, but I am happy to try to address specific concerns that can be articulated.\r\n\r\n> it's easy enough to say that \"\" should be interpreted as 0 if asked for as an int and true if asked for as a bool, but when you want to convert the \"\" to an int, and then convert that int to a bool because you've got `ALLOW_INT | ALLOW_BOOL` set, that starts becoming pretty weird. Weird enough that you've implemented it so that in that case `-value=` returns the defaults instead; but that's then a user-visible behaviour change for anyone who was using `-boolparam=` to set it true if it's default happens to be false when `-boolparam` is converted from ANY to BOOL.\r\n\r\nI'm having a hard time following this and I probably don't know how to convince someone that something is weird or not weird. I put a lot of thought into the flags, and did a lot of experimentation with the wallet commits linked to in the description, and have a result that I think:\r\n\r\n- Provides good error and reporting useful behavior to end users\r\n- Does not require a boilerplate IsArgSet/IsArgNegated nonsense code in places where arguments are accessed\r\n- Is backwards compatible in all cases except some specific and obscure corner cases, and clearly documented where not backwards compatible\r\n\r\n> To try and fully understand your PR, I've split it up into bitesize chunks that make sense to me on their own -- https://github.com/ajtowns/bitcoin/commits/202001-argsmanflag . It gets most of the PR done, but doesn't do the coversion to int within SettingsValue generally, so keeps the same semantics for all the calls that wouldn't pass an error back to the user.\r\n\r\nCan you give a specific example of how this is an improvement? If you can say how it improves rhe wallet changes linked in the PR description, or any of the followup PRs actually making use of these flags, that would be most helpful.\r\n\r\n> I'm not really seeing enough value in those different semantics to justify the change given the chance of breaking someone's config isn't zero...\r\n\r\nI'm sure you know this, but just so someone reading doesn't get the wrong idea, this PR is 100% backwards compatible, and is only defining new type flags that are used in future improvements",
      "created_at" : "2020-01-23T19:02:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-577826251",
      "id" : 577826251,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NzgyNjI1MQ==",
      "updated_at" : "2020-01-23T19:02:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577826251",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > https://github.com/ajtowns/bitcoin/commits/202001-argsmanflag \r\n> \r\n> Can you give a specific example of how this is an improvement?\r\n\r\nIt's not so much meant as an improvement, but more as \"your PR is X=A+B+C, the A+B parts make sense to me, but the C part doesn't and even seems like a step in the wrong direction, and A+B alone seems to do what the PR was aiming to do -- ie, implement missing error checking for ArgsManager flags\".\r\n\r\nI've added a couple more commits on top now, so that (a) it actually does more of the error checking for the flags and (b) it's easy to see from the test suite that changing from ANY to BOOL etc only makes some things errors, rather than changing the meaning of user's configurations. Both these veer more substantially away from your patch than where I was yesterday; consider it executable whiteboarding, I guess?\r\n\r\nI'm still uncomfortable with making working configs start giving errors, but changing the meaning of potentially already existing configs really needs a good justification that I'm not seeing. I realise this PR alone doesn't do that, but it sets up future PRs to do so in ways that aren't necessarily super-obvious.\r\n\r\nI think the approach I linked above would make it much more straightforward to switch away from ALLOW_ANY sooner, since it just means you can say \"a bunch of things that were previously allowed in config files that weren't at all sensible (double negatives, repeatedly setting the same option, giving strings where ints are needed or numbers other than 0 or 1 where a bool is needed, or saying \"true\" to set a bool to false) will now give errors at startup\" and be done.",
      "created_at" : "2020-01-24T09:04:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-578047805",
      "id" : 578047805,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODA0NzgwNQ==",
      "updated_at" : "2020-01-24T09:21:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578047805",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "AJ, this critique does not seem substantive because it is too general. **Would it be possible for you to cite a specific deficiency in my design, or in any of my PRs, or in any of my wallet flag porting commits that lead to bad user behavior, or an unergnonomic API for developers?** I'd be more than happy to adopt suggestions for improvement. Or if we disagree about a specific design decision, I could explain the tradeoffs behind it, and what made me favor one approach. But when you do things like casually state that something in my PR goes in the \"wrong direction,\" without even telling me what you're referring to, it does not seem productive.\r\n\r\nAgain, to be clear to anyone else reading this: This PR is 100% backwards compatible. It adds a new developer feature which I put a lot of thought and effort into designing, testing, and making use of in followup PRs and commits prioritizing 1) backwards compatibilty, 2) good error reporting for users, 3) flexibility for users about how to specify options, for example supporting `-foo` and `-nofoo` valueless syntax whenever not ambiguous 4) having ergonomic code at `GetArg` call sites and avoiding current ubiquitous `IsArgNegated` `IsArgset` bugs 5) having ability to add future improvements like custom validation functions and typed int/string/bool/vector\\<x\\>/Optional\\<x\\>/Variant\\<x\\> setting storage\r\n\r\nI'm pretty satisfied with design of this PR and happy with the way it functions by itself, but the actual test of the PR is when the features it adds are put to use in followup PRs. **This PR by itself is a starting point that doesn't set anything in stone.** If it has deficiencies, they can be addressed now or  addressed in future PRs, it's not some hugely high stakes thing where everything has to be worked out in advance, even though I've definitely tried to work out everything in advance, and you can look at all the actual use cases in the followups to see that",
      "created_at" : "2020-01-24T12:50:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-578117815",
      "id" : 578117815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODExNzgxNQ==",
      "updated_at" : "2020-01-24T12:55:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578117815",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818419"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370153489\r\n\r\n> Seems like this should have `/* forbid= */ ALLOW_LIST` to match `GetBoolArg` ?\r\n\r\nAdded suggested restriction",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-24T20:02:17Z",
      "diff_hunk" : "@@ -398,15 +474,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ 0, __func__);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818419",
      "id" : 370818419,
      "in_reply_to_id" : 370153489,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxODQxOQ==",
      "original_commit_id" : "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "original_line" : 478,
      "original_position" : 252,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 348193241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818484"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370152855\r\n\r\n> Seems like you might as well have a check for:\r\n> \r\n> ```c++\r\n> if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_LIST)) \r\n> ```\r\n> \r\n> here as well -- if you add LIST, you can't use GetArg to query for a string or int, or GetBoolArg to query for a bool value?\r\n\r\nIf the suggestion is make it impossible to accept lists of strings, I don't see how that makes sense. If the suggestion is to make it impossible to accept lists of bools or ints, I don't think that is a good idea. ArgsManager API for retrieving typed lists could be improved but it isn't something that needs to be explicitly supported or forbidden in this PR",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-24T20:02:26Z",
      "diff_hunk" : "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818484",
      "id" : 370818484,
      "in_reply_to_id" : 370152855,
      "line" : 743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxODQ4NA==",
      "original_commit_id" : "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "original_line" : 743,
      "original_position" : 270,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : 291,
      "pull_request_review_id" : 348193241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370818484",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371597025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371597025"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If you want to support lists of bools or ints later, then it's easy to remove the restriction then; if lists of bools or ints is supported now, it should be tested along with the other cases in util_tests.cpp -- but it doesn't seem like it makes sense to say that it's supported now when we've only got `std::vector<std::string> GetArgs()` to query it.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-28T03:42:36Z",
      "diff_hunk" : "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371597025",
      "id" : 371597025,
      "in_reply_to_id" : 370152855,
      "line" : 743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NzAyNQ==",
      "original_commit_id" : "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "original_line" : 743,
      "original_position" : 270,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : 291,
      "pull_request_review_id" : 349115190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371597025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Would it be possible for you to cite a specific deficiency in my design, or in any of my PRs, or in any of my wallet flag porting commits that lead to bad user behavior, or an unergnonomic API for developers?\r\n\r\nI don't know if I can cite a problem you'll accept, your PRs are no-ops (\"this change has no effect\") because you're modifying dead code, and you seem to be rejecting criticisms that only take place once the code is used...\r\nI think:\r\n\r\n* making `-value=` reset things to defaults changes the meaning of existing configs, and while that might be fine if it were a new system, it doesn't seem useful enough to justify introducing an incompatibility\r\n* you're doing a lot more things in this patch than just implementing missing errors (and given this code doesn't apply to any existing options, arguably aren't implementing the missing errors yet!)\r\n* it would be better to have ALLOW_BOOL etc work *exactly* the same way as ALLOW_ANY; change the argument declarations types in the first PR; and then change the meaning of ALLOW_BOOL etc to provide better errors in follow up PRs; that makes it easy to see what the effects of the new behaviours you're coding up actually is\r\n* rather than bit flags it would be better to have a type enumeration something like: BOOL, INT, STRING, OPTIONAL_STRING, STRING_LIST. At that point having unique \"GetArg\" functions for each type returning exactly the right type seems straightforward; so `Optional<std::string> dbg_log = GetOptionalStringArg(\"-debuglogfile\", DEFAULT_DEBUG_LOGFILE); m_print_to_file = dbg_log ? true : false; m_file_path = dbg_log ? *dbg_log : \"\";` \r\n* that the IsArgNegated and IsArgSet warts aren't a priority -- they're largely encapsulated in system.cpp\r\n\r\nEDIT: the first one of these prevents me from giving an ACK at least without seeing a good reason for it, the second one made it hard to review, the latter are just IMO",
      "created_at" : "2020-01-28T04:02:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-579068737",
      "id" : 579068737,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTA2ODczNw==",
      "updated_at" : "2020-01-28T04:10:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579068737",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371600794"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems very strange; I don't see how having \"value=1\", `GetBoolArg(\"-value\", false)==false` for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with `GetBoolArg(\"-value\", true)==true`).",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-01-28T04:04:51Z",
      "diff_hunk" : "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794",
      "id" : 371600794,
      "line" : 398,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMDc5NA==",
      "original_commit_id" : "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "original_line" : 398,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/test/util_tests.cpp",
      "position" : 122,
      "pull_request_review_id" : 349119563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371600794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-02-05T16:00:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-582478053",
      "id" : 582478053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MjQ3ODA1Mw==",
      "updated_at" : "2020-02-05T16:00:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/582478053",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481492984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481492984"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794\r\n\r\n> This seems very strange; I don't see how having \"value=1\", `GetBoolArg(\"-value\", false)==false` for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with `GetBoolArg(\"-value\", true)==true`).\r\n\r\nI think this is just strange if you are not thinking about use cases. The use case for BOOL|STRING is for /imperative/ options like `-bind` `-connect` `-upgrade` `-reindex` where you want naked options with no value to be accepted and you also want verbose options with string values to be accepted. The BOOL flag is what allows the naked option, and the STRING flag is what allows the string option. Just as with any other STRING option, you are responsible for parsing the string and ArgsManager is not going to interpret it for you. Making the change you suggest would require either choosing a new SettingsValue representation or making it impossible to to distinguish -setting from -setting=\"\", and would make the implementation more complicated, and would have no actual utility.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-09-01T23:47:21Z",
      "diff_hunk" : "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481492984",
      "id" : 481492984,
      "in_reply_to_id" : 371600794,
      "line" : 398,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5Mjk4NA==",
      "original_commit_id" : "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "original_line" : 398,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/test/util_tests.cpp",
      "position" : 122,
      "pull_request_review_id" : 480189924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-19T00:59:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481492984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481493139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481493139"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371597025\r\n\r\n> If you want to support lists of bools or ints later, then it's easy to remove the restriction then; if lists of bools or ints is supported now, it should be tested along with the other cases in util_tests.cpp -- but it doesn't seem like it makes sense to say that it's supported now when we've only got `std::vector<std::string> GetArgs()` to query it.\r\n\r\nAm not inclined to add a new restriction that only complicates the implementation and doesn't provide a benefit to end users or developers trying to use the API. There is no missing test coverage here either. Writing this would be just analogous to building a roadblock in front a road that hasn't been built.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2020-09-01T23:47:50Z",
      "diff_hunk" : "@@ -427,6 +505,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481493139",
      "id" : 481493139,
      "in_reply_to_id" : 370152855,
      "line" : 743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5MzEzOQ==",
      "original_commit_id" : "5bb512aa51ae46350f8527ff7b3817dd719bb455",
      "original_line" : 743,
      "original_position" : 270,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : 291,
      "pull_request_review_id" : 480189924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-19T00:59:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481493139",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-01-14T10:18:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-760100432",
      "id" : 760100432,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDEwMDQzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T10:18:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760100432",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r594006161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594006161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please [use `std::optional` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/optional.h#L12).",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2021-03-15T02:04:29Z",
      "diff_hunk" : "@@ -296,7 +356,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        Optional<std::string> val;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r594006161",
      "id" : 594006161,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDAwNjE2MQ==",
      "original_commit_id" : "45beb3bc1a588ec3f45e852796adb3c07980136c",
      "original_line" : 359,
      "original_position" : 160,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 611778602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-29T14:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594006161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-20T02:34:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-822927495",
      "id" : 822927495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjkyNzQ5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-20T02:34:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822927495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 2772948473df34181535558f6b105ca413730053 -> 0a4ded27b7613656f423a07d889a9648b72200e7 ([`pr/argcheck.22`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.22) -> [`pr/argcheck.23`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.22-rebase..pr/argcheck.23)) adding a scripted-diff commit to actually ensure backwards compatibility.\r\nUpdated 0a4ded27b7613656f423a07d889a9648b72200e7 -> aa3dec078fc464d7ea2b46088c789bfd4a7e2637 ([`pr/argcheck.23`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.23) -> [`pr/argcheck.24`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.23..pr/argcheck.24)) retaining \"Negating of -%s is meaningless\" error for compatibility with #19827.",
      "created_at" : "2021-08-19T01:26:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-901538026",
      "id" : 901538026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5841vGDq",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-19T18:37:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901538026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "(deleted comment meant for other PR https://github.com/bitcoin/bitcoin/pull/19827#issuecomment-902152599)",
      "created_at" : "2021-08-19T18:42:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902152223",
      "id" : 902152223,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5841xcAf",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-19T18:44:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902152223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I looks like the scripted-diff *does* change behavior, given that at least `ALLOW_INT` has some additional checks attached?",
      "created_at" : "2021-08-19T18:44:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902153817",
      "id" : 902153817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5841xcZZ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-19T18:44:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902153817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I looks like the scripted-diff _does_ change behavior, given that at least `ALLOW_INT` has some additional checks attached?\r\n\r\nYeah, it's been a while I forgot this had dropped the \"negating is meaningless\" check in some cases. I'll update the comment to say it avoids breaking existing configs, not that it avoids changing behavior entirely.",
      "created_at" : "2021-08-19T18:48:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902156069",
      "id" : 902156069,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5841xc8l",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-19T18:48:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902156069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r692627400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692627400"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`-bind` and `-connect` both support multiple options (require=STRING+LIST for GetArgs) but this is forbidden for GetBoolArg (forbid=LIST); `-reindex`, `-reindexchainstate`, and `-rescan` all don't seem to be used as anything but a bool as far as I can see. The comments also mention `-listen` which also seems to be only used as a boolean arg.  That does leave `-upgradewallet` (presuming that's what `-upgrade` is referring to) though that option was replaced by an RPC a while ago.\r\n\r\nThere's no need to change the SettingsValue representation -- if you can differentiate different values using GetBoolArg/GetArg, then you can differentiate them via some different api too.",
      "commit_id" : "aa3dec078fc464d7ea2b46088c789bfd4a7e2637",
      "created_at" : "2021-08-20T03:12:51Z",
      "diff_hunk" : "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r692627400",
      "id" : 692627400,
      "in_reply_to_id" : 371600794,
      "line" : 398,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjYyNzQwMA==",
      "original_commit_id" : "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "original_line" : 398,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/test/util_tests.cpp",
      "position" : 122,
      "pull_request_review_id" : 734628808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-20T03:12:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692627400",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Approach NACK aa3dec078fc464d7ea2b46088c789bfd4a7e2637\r\n\r\n> re: [#16545 (comment)](https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-579068737)\r\n> > * making `-value=` reset things to defaults changes the meaning of existing configs\r\n> No, there is impact no impact on existing settings,\r\n\r\nThere is no impact on existing settings because ALLOW_BOOL, ALLOW_INT, ALLOW_STRING and ALLOW_LIST are unused outside of tests, and that's only because you've specifically converted them all to ALLOW_ANY. If they were to be used, which is presumably the idea, there would be an impact. If it's not the idea to switch existing options from ALLOW_ANY to the more specific things -- which will impact existing settings -- then this approach just makes config handling more complicated because of the different behaviour between currently existing settings and the new ones.\r\n\r\n(I haven't re-reviewed to see if there really isn't an impact on existing settings given those changes)\r\n\r\n> I started off thinking similarly until I looked at actual use cases, again see the table in the PR description.\r\n\r\nThe only entry for the \"(anything) or BOOL\" types is no longer relevant as far as I can see, the only \"LIST\" type is \"LIST of STRING\"; and list options can only be access via GetArgs which returns a list of strings anyway. It was worth exploring using flags, but you were right the first time.\r\n\r\n> > * that the IsArgNegated and IsArgSet warts aren't a priority -- they're largely encapsulated in system.cpp \r\n> This is not the case. These APIs are widely misused and make the developer and users experiences worse. See actual usages [9c0e697](https://github.com/bitcoin/bitcoin/commit/9c0e6975f42a1197a7b898b19d8af81a03868123)\r\n\r\nI don't agree with `-nofoo` sometimes being \"override explicit config settings back to the default\", and particularly having `-nosignetchallenge` as another way of saying \"default signet challenge\" doesn't make much sense to me. So I don't find that commit super convincing...\r\n\r\n> > EDIT: the first one of these prevents me from giving an ACK at least without seeing a good reason for it\r\n> \r\n> Again, the reason is just to provide consistent default behavior for future `-value=\"\"` settings. Current settings are not affected.  Future settings that want to override the behavior are not affected. Fixation on this case seems strange to me, and I think it is possibly standing in for some other concern (aesthetic differences? a different understanding of current conventions?) that has not been articulated.\r\n\r\nI feel like I've been pretty verbose already (though if you want to chat further offline or something, I'm happy to) but as far as I can see you're just ignoring my concerns. All you're doing in this PR is implementing a new API for arguments, but you're dismissing criticism of that API (vs the current one) as \"too general\" because, being unused, the API doesn't impact \"user behaviour\". You could defend `gets()` on the same grounds -- it works great so long as it's not actually used and you can always implement a better API later. So I really don't know what else to say. I don't think it's a good idea to merge an API and then fix it later after you start trying to use it.\r\n\r\n> respond to that depressing review comment\r\n\r\nI guess I'm sorry I looked at this PR. I like the idea of better typing of config options and improved error handling, and figured reviewing PRs about that was a positive step.",
      "created_at" : "2021-08-20T05:28:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902442106",
      "id" : 902442106,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5841yix6",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-20T05:28:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902442106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r693393118"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693393118"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r692627400\r\n\r\n> `-bind` and `-connect`\r\n\r\nWe can go down a rabbit hole about these individual cases, but this is nitpicking which I do not think is relevant to the point I am making about imperative options (which trigger behavior and don't require but can accept string values) being useful to handle differently from string options whose purpose is to set values.\r\n\r\n> you can differentiate them via some different api\r\n\r\nRight, I do not want to change the API and I do not want to change the representation. The suggestion is not a good suggestion. Even if it was a good suggestion, it would expand the scope of the PR. Even if it was a good suggestion, it could done separately as a followup.",
      "commit_id" : "c7ba71fb9165b1aae22d4b55a7f804223d5be3a0",
      "created_at" : "2021-08-21T19:39:53Z",
      "diff_hunk" : "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r693393118",
      "id" : 693393118,
      "in_reply_to_id" : 371600794,
      "line" : 398,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM5MzExOA==",
      "original_commit_id" : "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "original_line" : 398,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/test/util_tests.cpp",
      "position" : 124,
      "pull_request_review_id" : 735517335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-21T20:37:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693393118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I don't think this NACK is justified.\r\n\r\nTo summarise: 1) This PR doesn't improve behaviour (in this case, actually issuing errors/warnings when people make mistakes in the config, or removing any of the footguns for any existing option), and we should be prioritising patches that do improve things. For example, an earlier version of this API has already spent over a year merged without getting us the intended benefits during that time, and instead has resulted in needing extra PRs to revert people trying to use it. That's totally backwards. 2) When introducing a new API we should be using it immediately, both because if it's better then using it is an immediate win, and because that demonstrates the new API actually works in practice, not just in theory. 3) I don't think the new API as of the commit id I referenced is particularly great, since the obvious way to use it means existing options and new ones will behave differently in subtle and confusing ways.\r\n\r\nFor comparison, #22766 changes a bunch less code and simplifies the API in a way that's immediately used and (IMHO) obviously useful, so I'd much rather move the focus there than keep going in circles here. As far as I'm concerned that's a good approach, this isn't (well, wasn't, as of the aforementioned commit id), hence the approach nack here, vs the ack there.",
      "created_at" : "2021-09-01T07:00:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-909979400",
      "id" : 909979400,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5842PS8I",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-01T07:00:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909979400",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r699936341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699936341"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> We can go down a rabbit hole about these individual cases, but this is nitpicking which I do not think is relevant to the point I am making about imperative options (which trigger behavior and don't require but can accept string values)\r\n\r\nI went through all the examples I could find of potential \"imperative options\", and none of them fit your definition, except for the one that's been removed. I don't think \"this feature won't be used at all so there's no point implementing it\" is nitpicking.",
      "commit_id" : "c7ba71fb9165b1aae22d4b55a7f804223d5be3a0",
      "created_at" : "2021-09-01T07:10:00Z",
      "diff_hunk" : "@@ -301,6 +302,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#discussion_r699936341",
      "id" : 699936341,
      "in_reply_to_id" : 371600794,
      "line" : 398,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTkzNjM0MQ==",
      "original_commit_id" : "f42da6bbe3a327a7abe9c29ac1278bd652e86513",
      "original_line" : 398,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "src/test/util_tests.cpp",
      "position" : 124,
      "pull_request_review_id" : 743557250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16545",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-01T07:10:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699936341",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased aa3dec078fc464d7ea2b46088c789bfd4a7e2637 -> 9349a02cc41ea537873dd20636aff51e23870cbe ([`pr/argcheck.24`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.24) -> [`pr/argcheck.25`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.25), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.24-rebase..pr/argcheck.25)) due to conflict with #22217, on top of new base PR #22766 pr/argscripts.1\r\nRebased 9349a02cc41ea537873dd20636aff51e23870cbe -> c7ba71fb9165b1aae22d4b55a7f804223d5be3a0 ([`pr/argcheck.25`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.25) -> [`pr/argcheck.26`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.26), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.25-rebase..pr/argcheck.26)) on top #22766 pr/argscripts.4\r\nRebased c7ba71fb9165b1aae22d4b55a7f804223d5be3a0 -> 3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06 ([`pr/argcheck.26`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.26) -> [`pr/argcheck.27`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.27), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.26-rebase..pr/argcheck.27)) after #22766 merge\r\nUpdated 3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06 -> 26f8e60dc6b6bb1d123822e336a93352e38fe148 ([`pr/argcheck.27`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.27) -> [`pr/argcheck.28`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.28), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.27..pr/argcheck.28)) with some minor commit and code cleanups, no changes in behavior.\r\nRebased 26f8e60dc6b6bb1d123822e336a93352e38fe148 -> 770b99ea13d6800534f2aa8b6e65152a92272a94 ([`pr/argcheck.28`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.28) -> [`pr/argcheck.29`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.29), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.28-rebase..pr/argcheck.29)) due to various conflicts. Also improved commit messages and added a lot of documentation.\r\nUpdated 770b99ea13d6800534f2aa8b6e65152a92272a94 -> e6565763879e92d3c17dca296966fbccf6991a83 ([`pr/argcheck.29`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.29) -> [`pr/argcheck.30`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.30), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.29..pr/argcheck.30)) changing `TypedArg` declaration to avoid signed/unsigned int conversion",
      "created_at" : "2021-11-01T19:27:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-956523589",
      "id" : 956523589,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5845A2RF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/956523589/reactions"
      },
      "updated_at" : "2022-09-24T12:32:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/956523589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-02-09T23:11:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-1034295655",
      "id" : 1034295655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5849phln",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034295655/reactions"
      },
      "updated_at" : "2022-02-09T23:11:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034295655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2022-11-15T21:17:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-1315875219",
      "id" : 1315875219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII585ObqmT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1315875219/reactions"
      },
      "updated_at" : "2022-11-15T21:17:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1315875219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-04-21T10:42:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-1517635417",
      "id" : 1517635417,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII585adUdZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1517635417/reactions"
      },
      "updated_at" : "2023-04-21T10:42:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1517635417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-05-09T16:37:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-1540511060",
      "id" : 1540511060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII585b0lVU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1540511060/reactions"
      },
      "updated_at" : "2023-05-09T16:37:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1540511060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--13523179cfe9479db18ec6c5d236f789-->\nThere hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? â¡ï¸ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? â¡ï¸ Please close.\n* Did the author lose interest or time to work on this? â¡ï¸ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "created_at" : "2023-08-07T02:00:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-1667075122",
      "id" : 1667075122,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII585jXYwy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1667075122/reactions"
      },
      "updated_at" : "2023-08-07T02:00:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1667075122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are you still working on this? This was converted to draft 2 years ago, is it necessary to keep it as one?",
      "created_at" : "2023-09-23T16:42:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-1732361506",
      "id" : 1732361506,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII585nQb0i",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732361506/reactions"
      },
      "updated_at" : "2023-09-23T16:42:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732361506",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--2e250dc3d92b2c9115b66051148d6e47-->\nð¤ There hasn't been much activity lately and the CI seems to be failing.\n\nIf no one reviewed the current pull request by commit hash, a [rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes) can be considered. While the CI failure may be a false positive, the CI hasn't been running for some time, so there may be a real issue hiding as well. A rebase triggers the latest CI and makes sure that no silent merge conflicts have snuck in.\n",
      "created_at" : "2024-04-23T01:55:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-2071267683",
      "id" : 2071267683,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16545",
      "node_id" : "IC_kwDOABII5857dQlj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2071267683/reactions"
      },
      "updated_at" : "2024-04-23T01:55:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2071267683",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
