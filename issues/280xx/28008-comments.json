[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28100](https://github.com/bitcoin/bitcoin/pull/28100) (crypto: more `Span<std::byte>` modernization & follow-ups by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-29T22:00:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1613858567",
      "id" : 1613858567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585gMYcH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613858567/reactions"
      },
      "updated_at" : "2023-07-19T13:05:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613858567",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-07-12T18:07:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1632988853",
      "id" : 1632988853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585hVW61",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1632988853/reactions"
      },
      "updated_at" : "2023-07-12T18:07:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1632988853",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased after merge of #28065, and marked ready for review as dependencies #27993 and #27985 are in.",
      "created_at" : "2023-07-17T22:54:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1638997490",
      "id" : 1638997490,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585hsR3y",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1638997490/reactions"
      },
      "updated_at" : "2023-07-18T02:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1638997490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268163179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7\r\n\r\n(Non-blocking note:) a little unexpected that this is written out of sequence with how it's described in [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439#section-2.8); \r\n\r\n> - First, a Poly1305 one-time key is generated from the 256-bit key and nonce using the procedure described in [Section 2.6](https://datatracker.ietf.org/doc/html/rfc8439#section-2.6).\r\n> - Next, the ChaCha20 encryption function is called to encrypt the plaintext, using the same key and nonce, and with the initial counter set to 1.\r\n\r\nNo harm in writing it this way, since a `Seek64()` resets any determinant state for `Keystream64()`/`Crypt64()`, but just had to squint for a few seconds to make sure it was okay.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-19T14:29:21Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268163179",
      "id" : 1268163179,
      "line" : 86,
      "node_id" : "PRRC_kwDOABII585LlqJr",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 86,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : 86,
      "pull_request_review_id" : 1537240624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T13:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268282951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note for reviewers that RFC test vectors use network byte order (big-endian); the `Nonce96` constructor here expects little-endian representation. Hence the reversal relative to RFC vectors.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-19T15:53:45Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268282951",
      "id" : 1268282951,
      "line" : 973,
      "node_id" : "PRRC_kwDOABII585LmHZH",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 973,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 194,
      "pull_request_review_id" : 1537240624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T13:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268291488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note for reviewers that this ciphertext includes the Poly1305 tag; in the RFC, ciphertext vector omits the tag.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-19T16:00:43Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268291488",
      "id" : 1268291488,
      "line" : 978,
      "node_id" : "PRRC_kwDOABII585LmJeg",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 978,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 199,
      "pull_request_review_id" : 1537240624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T14:04:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269911157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(in commit c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9)\r\nnit: these refactoring changes in `UpdateTag` seem to be unrelated to FSChaCha20Poly1305, I think they can be already included the commit that introduces the ChaCha20Poly1305 AEAD (to avoid touching it again later and keep the diff small)? Also, `aad_padding` and `cipher_padding` could be const.",
      "commit_id" : "b0b6d11f16f65ce9b0d106372ce131eb6f179fe9",
      "created_at" : "2023-07-20T20:03:29Z",
      "diff_hunk" : "@@ -46,11 +47,11 @@ void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::by\n {\n     static const std::byte PADDING[16] = {{}};\n     // Process the padded AAD with Poly1305.\n-    poly1305.Update(aad);\n-    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    unsigned aad_padding = (16 - (aad.size() % 16)) % 16;\n+    poly1305.Update(aad).Update(Span{PADDING}.first(aad_padding));\n     // Process the padded ciphertext with Poly1305.\n-    poly1305.Update(cipher);\n-    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    unsigned cipher_padding = (16 - (cipher.size() % 16)) % 16;\n+    poly1305.Update(cipher).Update(Span{PADDING}.first(cipher_padding));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269911157",
      "id" : 1269911157,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LsU51",
      "original_commit_id" : "c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9",
      "original_line" : 54,
      "original_position" : 20,
      "original_start_line" : 49,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1539997888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-07-20T21:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269960092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could encrypt _after_ generating the poly1305 key to avoid having to `Seek64` twice, as the chacha20 object is already at the desired block count 1 after the `Keystream` call below (I think generate-poly1305-key -> encrypt -> compute tag is also the order as described in RFC8439). On the other hand, performance-wise it shouldn't make a difference as `Seek64` is quite cheap, and maybe it's even preferred to be explicit about the block counter instead. I haven't looked at any other ChaCha20Poly1305 AEAD implementation yet, so no idea what is common practice here. Just an idea.",
      "commit_id" : "b0b6d11f16f65ce9b0d106372ce131eb6f179fe9",
      "created_at" : "2023-07-20T21:03:01Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269960092",
      "id" : 1269960092,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Lsg2c",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : 67,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1539997888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-20T21:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269973943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: it might be worth introducing a generate-poly1305-key helper (or even one that also does the tag computation already, given also aad and ciphertext) that can be called in Encrypt and Decrypt, to deduplicate code?",
      "commit_id" : "b0b6d11f16f65ce9b0d106372ce131eb6f179fe9",
      "created_at" : "2023-07-20T21:14:19Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);\n+    m_chacha20.Keystream(UCharCast(first_block), sizeof(first_block));\n+    // Use the first 32 bytes of the first keystream block as poly1305 key.\n+    Poly1305 poly1305{Span{first_block}.first(Poly1305::KEYLEN)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269973943",
      "id" : 1269973943,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585LskO3",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 76,
      "original_position" : 76,
      "original_start_line" : 71,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : 78,
      "pull_request_review_id" : 1539997888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 73,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-20T21:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270122616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, I've replaced `UpdateTag` with `ComputeTag`, which does the whole tag calculation, including poly1305 key generation.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T00:30:45Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);\n+    m_chacha20.Keystream(UCharCast(first_block), sizeof(first_block));\n+    // Use the first 32 bytes of the first keystream block as poly1305 key.\n+    Poly1305 poly1305{Span{first_block}.first(Poly1305::KEYLEN)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270122616",
      "id" : 1270122616,
      "in_reply_to_id" : 1269973943,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtIh4",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 76,
      "original_position" : 76,
      "original_start_line" : 71,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1540313350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:30:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe it's better not to do that, though it really doesn't matter much.\r\n\r\nThe reason is that if we'd start by generating the key, we'd have to store that key in memory somewhere, leave it there for the whole encryption, then fetch it again (at which point it's quite possibly gone from CPU caches) to compute the tag. By seeking and deriving at the end, we only need the chacha20 key/state, which is likely still hot at that point (as it's needed every 64 bytes of encryption). And the seeking itself is trivial.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T00:32:42Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417",
      "id" : 1270123417,
      "in_reply_to_id" : 1269960092,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtIuZ",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : 67,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1540314352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T00:32:51Z",
      "diff_hunk" : "@@ -46,11 +47,11 @@ void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::by\n {\n     static const std::byte PADDING[16] = {{}};\n     // Process the padded AAD with Poly1305.\n-    poly1305.Update(aad);\n-    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    unsigned aad_padding = (16 - (aad.size() % 16)) % 16;\n+    poly1305.Update(aad).Update(Span{PADDING}.first(aad_padding));\n     // Process the padded ciphertext with Poly1305.\n-    poly1305.Update(cipher);\n-    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    unsigned cipher_padding = (16 - (cipher.size() % 16)) % 16;\n+    poly1305.Update(cipher).Update(Span{PADDING}.first(cipher_padding));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123471",
      "id" : 1270123471,
      "in_reply_to_id" : 1269911157,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtIvP",
      "original_commit_id" : "c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9",
      "original_line" : 54,
      "original_position" : 20,
      "original_start_line" : 49,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1540314438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:32:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270710501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Note for reviewers that RFC test vectors use network byte order (big-endian);\r\n\r\nThat's not really accurate. The RFC (and its test vectors) see the nonce as a 12-byte array, not as a number that needs encoding. If anything, it assumes little-endian encoding (see https://datatracker.ietf.org/doc/html/rfc8439#section-2.3, \"A 96-bit nonce, treated as a concatenation of three 32-bit little-endian integers.\").\r\n\r\n> the Nonce96 constructor here expects little-endian representation.\r\n\r\nThe Nonce96 type here is indeed a pair of 32-bit and 64-bit integers which are serialized in little-endian notation to obtain the 12-byte array nonce in the RFC8439 sense.\r\n\r\n>  Hence the reversal relative to RFC vectors.\r\n\r\nThe reversal is actually due to the fact that integer constants in C++ (and in English...) are written in big-endian. After that point, everything in the code and the spec are little-endian.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T13:59:05Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270710501",
      "id" : 1270710501,
      "in_reply_to_id" : 1268282951,
      "line" : 973,
      "node_id" : "PRRC_kwDOABII585LvYDl",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 973,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 194,
      "pull_request_review_id" : 1541213348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T14:06:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270711568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe this may be clearer now that it's been rewritten. Also see https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417 for a rationale, if you're curious.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T14:00:04Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270711568",
      "id" : 1270711568,
      "in_reply_to_id" : 1268163179,
      "line" : 86,
      "node_id" : "PRRC_kwDOABII585LvYUQ",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 86,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : 86,
      "pull_request_review_id" : 1541215141,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T14:08:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270921379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, it gives the tag separately; the RFC doesn't actually require the tag to be sent at the end.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T17:32:42Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270921379",
      "id" : 1270921379,
      "in_reply_to_id" : 1268291488,
      "line" : 978,
      "node_id" : "PRRC_kwDOABII585LwLij",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 978,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 199,
      "pull_request_review_id" : 1541557139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T17:32:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270948739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270948739"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cacc8fe2b59e45cde248a031c5ebbf9ec39c5b8f\r\n\r\n\"thag.\" Sounds Nordic.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-21T18:04:24Z",
      "diff_hunk" : "@@ -0,0 +1,142 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Compute poly1305 thag. chacha20 must be set to the right nonce, block 0. Will be at block 1 after. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270948739",
      "id" : 1270948739,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LwSOD",
      "original_commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1541600581,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 1,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270948739/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-25T16:20:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270948739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270986511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270986511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead\r\n\r\nOdd to me that `KEYLEN` doesn't live higher up in the class hierarchy, since the other `ChaCha20*` only deal in 32-byte keys, but definitely not a big deal.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-21T18:52:39Z",
      "diff_hunk" : "@@ -98,4 +108,43 @@ class ChaCha20\n     void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n };\n \n+/** Forward-secure ChaCha20\n+ *\n+ * This implements a stream cipher that automatically transitions to a new stream with a new key\n+ * and new nonce after a predefined number of encryptions or decryptions.\n+ *\n+ * See BIP324 for details.\n+ */\n+class FSChaCha20\n+{\n+private:\n+    /** Internal stream cipher. */\n+    ChaCha20 m_chacha20;\n+\n+    /** The number of encryptions/decryptions before a rekey happens. */\n+    const uint32_t m_rekey_interval;\n+\n+    /** The number of encryptions/decryptions since the last rekey. */\n+    uint32_t m_chunk_counter{0};\n+\n+    /** The number of rekey operations that have happened. */\n+    uint64_t m_rekey_counter{0};\n+\n+public:\n+    /** Length of keys expected by the constructor. */\n+    static constexpr unsigned KEYLEN = 32;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270986511",
      "id" : 1270986511,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII585LwbcP",
      "original_commit_id" : "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "original_line" : 135,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20.h",
      "position" : 59,
      "pull_request_review_id" : 1541600581,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270986511/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-25T16:20:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270986511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271064136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271064136"
         }
      },
      "author_association" : "MEMBER",
      "body" : "df4303b996f8b4f095de18edd7d3dbe281b5f124\r\n\r\nIf you have to retouch, maybe worth keeping the `BOOST_CHECK_EQUAL` (which compiles for me okay) since it'll give a printout of the mismatch.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-21T20:19:42Z",
      "diff_hunk" : "@@ -255,20 +255,37 @@ static void TestChaCha20Poly1305(const std::string& plain_hex, const std::string\n     auto key = ParseHex<std::byte>(key_hex);\n     auto expected_cipher = ParseHex<std::byte>(cipher_hex);\n \n-    std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n-    AEADChaCha20Poly1305 aead{key};\n-    aead.Encrypt(plain, aad, nonce, cipher);\n-    BOOST_CHECK(cipher == expected_cipher);\n+    for (int i = 0; i < 10; ++i) {\n+        // During i=0, use single-plain Encrypt/Decrypt; others use a split at prefix.\n+        size_t prefix = i ? InsecureRandRange(plain.size() + 1) : plain.size();\n+        // Encrypt.\n+        std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n+        AEADChaCha20Poly1305 aead{key};\n+        if (i == 0) {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(Span{plain}.first(prefix), Span{plain}.subspan(prefix), aad, nonce, cipher);\n+        }\n+        BOOST_CHECK(cipher == expected_cipher);\n \n-    std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n-    bool ret = aead.Decrypt(cipher, aad, nonce, decipher);\n-    BOOST_CHECK(ret);\n-    BOOST_CHECK(decipher == plain);\n+        // Decrypt.\n+        std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n+        bool ret{false};\n+        if (i == 0) {\n+            ret = aead.Decrypt(cipher, aad, nonce, decipher);\n+        } else {\n+            ret = aead.Decrypt(cipher, aad, nonce, Span{decipher}.first(prefix), Span{decipher}.subspan(prefix));\n+        }\n+        BOOST_CHECK(ret);\n+        BOOST_CHECK(decipher == plain);\n+    }\n \n+    // Test Keystream output.\n     std::vector<std::byte> keystream(plain.size());\n+    AEADChaCha20Poly1305 aead{key};\n     aead.Keystream(nonce, keystream);\n     for (size_t i = 0; i < plain.size(); ++i) {\n-        BOOST_CHECK_EQUAL(plain[i] ^ keystream[i], cipher[i]);\n+        BOOST_CHECK((plain[i] ^ keystream[i]) == expected_cipher[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271064136",
      "id" : 1271064136,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LwuZI",
      "original_commit_id" : "df4303b996f8b4f095de18edd7d3dbe281b5f124",
      "original_line" : 288,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1541600581,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271064136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-25T16:20:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271064136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271193421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "off-by-one, the \"message index wrong\" kind of error type (error=12) is currently not tested:\r\n```suggestion\r\n    for (unsigned error = 0; error <= 12; ++error) {\r\n```\r\n(to avoid issues like this, could add an enum with error types and give the highest error sth like ERROR_HIGHEST, to be used in the loop counter, but that's probably overkill)",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-22T01:15:49Z",
      "diff_hunk" : "@@ -89,9 +92,67 @@ void TestBIP324PacketVector(\n     BOOST_CHECK(ciphertext.size() >= out_ciphertext_endswith.size());\n     BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 11; ++error) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271193421",
      "id" : 1271193421,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII585LxN9N",
      "original_commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "original_line" : 95,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : 95,
      "pull_request_review_id" : 1541993939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-22T01:15:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271567848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271567848"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`salt` is currently not used anywhere.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-23T22:22:00Z",
      "diff_hunk" : "@@ -151,3 +153,23 @@ FUZZ_TARGET(chacha20_split_keystream)\n     FuzzedDataProvider provider{buffer.data(), buffer.size()};\n     ChaCha20SplitFuzz<false>(provider);\n }\n+\n+FUZZ_TARGET(crypto_fschacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto key = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    key.resize(FSChaCha20::KEYLEN);\n+    auto salt = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    salt.resize(FSChaCha20::KEYLEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271567848",
      "id" : 1271567848,
      "line" : 164,
      "node_id" : "PRRC_kwDOABII585LypXo",
      "original_commit_id" : "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "original_line" : 164,
      "original_position" : 21,
      "original_start_line" : 163,
      "path" : "src/test/fuzz/crypto_chacha20.cpp",
      "position" : 21,
      "pull_request_review_id" : 1542406892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271567848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 163,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-23T22:22:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271567848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1272387005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387005"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No idea where this came from. Fixed.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-24T14:59:17Z",
      "diff_hunk" : "@@ -151,3 +153,23 @@ FUZZ_TARGET(chacha20_split_keystream)\n     FuzzedDataProvider provider{buffer.data(), buffer.size()};\n     ChaCha20SplitFuzz<false>(provider);\n }\n+\n+FUZZ_TARGET(crypto_fschacha20)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto key = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    key.resize(FSChaCha20::KEYLEN);\n+    auto salt = fuzzed_data_provider.ConsumeBytes<std::byte>(FSChaCha20::KEYLEN);\n+    salt.resize(FSChaCha20::KEYLEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1272387005",
      "id" : 1272387005,
      "in_reply_to_id" : 1271567848,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L1xW9",
      "original_commit_id" : "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "original_line" : 164,
      "original_position" : 21,
      "original_start_line" : 163,
      "path" : "src/test/fuzz/crypto_chacha20.cpp",
      "position" : null,
      "pull_request_review_id" : 1543685119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387005/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-24T14:59:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1272387694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.\r\n\r\nI've chosen not to introduce an enum, because it's not a very good with with the multiple bit error cases.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-24T14:59:51Z",
      "diff_hunk" : "@@ -89,9 +92,67 @@ void TestBIP324PacketVector(\n     BOOST_CHECK(ciphertext.size() >= out_ciphertext_endswith.size());\n     BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 11; ++error) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1272387694",
      "id" : 1272387694,
      "in_reply_to_id" : 1271193421,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585L1xhu",
      "original_commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "original_line" : 95,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1543686298,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-24T14:59:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1272387694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1273858928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273858928"
         }
      },
      "author_association" : "MEMBER",
      "body" : "See #28100, which modernizes `class ChaCha20` too.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-25T17:13:59Z",
      "diff_hunk" : "@@ -98,4 +108,43 @@ class ChaCha20\n     void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n };\n \n+/** Forward-secure ChaCha20\n+ *\n+ * This implements a stream cipher that automatically transitions to a new stream with a new key\n+ * and new nonce after a predefined number of encryptions or decryptions.\n+ *\n+ * See BIP324 for details.\n+ */\n+class FSChaCha20\n+{\n+private:\n+    /** Internal stream cipher. */\n+    ChaCha20 m_chacha20;\n+\n+    /** The number of encryptions/decryptions before a rekey happens. */\n+    const uint32_t m_rekey_interval;\n+\n+    /** The number of encryptions/decryptions since the last rekey. */\n+    uint32_t m_chunk_counter{0};\n+\n+    /** The number of rekey operations that have happened. */\n+    uint64_t m_rekey_counter{0};\n+\n+public:\n+    /** Length of keys expected by the constructor. */\n+    static constexpr unsigned KEYLEN = 32;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1273858928",
      "id" : 1273858928,
      "in_reply_to_id" : 1270986511,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII585L7Ytw",
      "original_commit_id" : "5e0ca4ba371570d1a5275c5a79bc0c1253d97ead",
      "original_line" : 135,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20.h",
      "position" : 59,
      "pull_request_review_id" : 1545982178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273858928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-25T17:13:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1273858928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "After thinking/working through further PRs, I'm beginning to wonder if it isn't better if these classes support incremental computation (i.e., the entire message/packet to be encrypted/decrypted isn't required to be presented in a one (or two) contiguous block(s) of memory, at a single point in time).\n\nThe advantage would primarily be a slightly lower latency when receiving a large P2P message. As is, the entire message needs to be received before any decryption can take place. With an incremental API, it could be decrypted on-the-fly as bytes are received over the wire, allowing a possibly shorter delay after the last byte is received. To get an idea about numbers: FSChaCha20Poly1305 on my Ryzen 5950X takes ~1.6 ns/byte, which would be 3.2 ms for a 2 MB block.\n\nSo advantages:\n* Lower latency when decrypting large messages.\n* More natural ability for split processing, possibly allowing fewer intermediary buffers to assemble plaintexts.\n\nDisadvantages:\n* More complex code, needing more complex tests to cover all possible scenarios.\n* Harder to make a safe-to-use API. The current approach has the advantage that it's impossible to get a decrypted message back if it fails the authenticity check. This is virtually impossible to prevent with an incremental API.\n\nWDYT?",
      "created_at" : "2023-07-26T03:27:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1650921567",
      "id" : 1650921567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585iZxBf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650921567/reactions"
      },
      "updated_at" : "2023-07-26T03:27:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650921567",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa I think that the disadvantages you mention are much worse than the advantages it would bring. I think that keeping it simple is (at least in this implementation intended for first appearance in the `master` branch) an important feature of BIP-324.\r\n\r\nAs for me and my poor old Bitcoin node,\r\n please do not add complexity to the code.",
      "created_at" : "2023-07-26T08:50:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1651257804",
      "id" : 1651257804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585ibDHM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651257804/reactions"
      },
      "updated_at" : "2023-07-26T08:50:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651257804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/46941376?v=4",
         "events_url" : "https://api.github.com/users/carnhofdaki/events{/privacy}",
         "followers_url" : "https://api.github.com/users/carnhofdaki/followers",
         "following_url" : "https://api.github.com/users/carnhofdaki/following{/other_user}",
         "gists_url" : "https://api.github.com/users/carnhofdaki/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/carnhofdaki",
         "id" : 46941376,
         "login" : "carnhofdaki",
         "node_id" : "MDQ6VXNlcjQ2OTQxMzc2",
         "organizations_url" : "https://api.github.com/users/carnhofdaki/orgs",
         "received_events_url" : "https://api.github.com/users/carnhofdaki/received_events",
         "repos_url" : "https://api.github.com/users/carnhofdaki/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/carnhofdaki/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/carnhofdaki/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/carnhofdaki"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> To get an idea about numbers: FSChaCha20Poly1305 on my Ryzen 5950X takes ~1.6 ns/byte, which would be 3.2 ms for a 2 MB block.\r\n\r\nI was curious how this (additive?) 3.2ms delay compares to existing block connection latency, so I sampled some logs from some of the okayish-CPU-but-well-networked machines I run. The [`Connect block: XXms` logs average to 67.8ms](https://gist.github.com/jamesob/2038a3ba3322726348f7479d4ac3e8e5) from that sample (after stripping out the long startup outliers). So from my perspective, this additional latency, while not negligible, wouldn't dissuade me personally from running with v2 P2P links.\r\n\r\nBut that said, assuming those numbers (68ms average connect time, +3.2ms V2 slowdown), we are talking about a theoretical 4.7% hit to global block propagation speed. For me this is right on the cusp of risking higher stale block rates, but that's not based on anything aside from gut feeling. Maybe we need to go back and review [@cdecker's work on block propagation sensitivity...](https://www.dpss.inesc-id.pt/~ler/docencia/rcs1314/papers/P2P2013_041.pdf)\r\n\r\nOf course, assuming that a 2MB transmission is necessary to connect blocks is a pessimistic assumption - compact blocks probably makes for a much lighter message most of the time. So I should walk back that \"5% global propagation slowdown\" concern as a little bombastic.\r\n\r\nPulling average cmpctblock message sizes from the same node(s), [we find that the average is ~21807 bytes, or 0.022MB](https://gist.github.com/jamesob/ddffb11bd9eaeb3acc2618915b36fa81). In that case, we're talking about a marginal V2 slowdown of 0.035ms, or 0.05% - which is much more palatable.\r\n\r\n> WDYT?\r\n\r\nFor me, V2 is a very important feature to get deployed. I would be hesitant to block the path to its deployment with items that are not themselves critical. So my assessment would be based on the particulars:\r\n\r\n- How much more complicated do you think a \"streaming\" API would be?\r\n  - What's the rough size of the diff from this change?\r\n- If a streaming API necessarily delays the authentication of messages, what does this mean for new DoS conditions?\r\n\r\n---\r\n\r\nBut I guess after realizing that the marginal delays we're talking about will be pretty much negligible for high-bandwidth compactblock receiving nodes, my vote is that we continue with this simple and more obviously correct/safe approach, and leave a streaming reimplementation for a later day - which presumably can be done without any protocol changes.",
      "created_at" : "2023-07-26T13:41:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1651836376",
      "id" : 1651836376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585idQXY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651836376/reactions"
      },
      "updated_at" : "2023-07-26T13:41:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651836376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jamesob Thanks for your comments, I think I largely agree.\r\n\r\nIt's a good observation that the case where a large non-compact block message is necessary for block connectivity is already fairly pessimal. Some more points to put this overhead in perspective:\r\n*  If you assume - say - a 1 Gbit/s connection, then receiving a byte takes 8 ns already, so adding 1.6 ns at most adds ~20% (regardless of whether the received data is short or big), and this ignores any other processing on top for the new block. \r\n* ~~This overhead inherently exists on the sender side in a way that cannot be avoided (as the block or whatever message is not constructed incrementally). So arguably, for the overall node-to-node latency, it's at worst a 10% overhead at 1 Gbit/s.~~ EDIT: Actually, no, streaming encryption is also possible, and possibly helpful.\r\n* We can probably bring that 1.6 ns number down by a factor 2x or 4x using machine-specific optimizations if need be (which will improve both sender and receiver).\r\n\r\n---\r\n\r\n> How much more complicated do you think a \"streaming\" API would be? \r\n\r\nIt'd consist of more functions, e.g. `StartEncrypt` / `StartDecrypt`, `EncryptData` / `DecryptData`, `FinishEncrypt` / `FinishDecrypt`, instead of functions that deal with the message in one go. On the other hand, it would allow dropping the functions that currently exist which accept a split buffer plaintext.\r\n\r\nI think most of the complexity would really be in designing them in a way that doesn't break abstractions too much. E.g. can you make it so that a caller does not need to know that the precisely first byte and last 16 bytes do not need a corresponding decryption buffer, for a BIP324 packet?\r\n\r\n> What's the rough size of the diff from this change?\r\n\r\nAlmost entirely in tests I think (and harder to understand API). The actual non-test code changes would be minimal, I expect.\r\n\r\n> If a streaming API necessarily delays the authentication of messages,\r\n\r\nQuite the opposite. A streaming API means that encryption/decryption (and authentication) state can be updated any time part of a message is processed/received. When the last bytes arrive, there would just be a finalization step, rather than needing to still perform the entire computation.\r\n\r\n> what does this mean for new DoS conditions?\r\n\r\nNothing, because semantically nothing changes. The conceptual behavior *must* be:\r\n* Message is received (in full).\r\n* Message is authenticated. If this fails, disconnect.\r\n* Message is decrypted, and released to the caller.\r\n\r\nIn a streaming setting, some of that decryption and authentication computation is done during the receiving, rather than sequentially. However, the overall behavior must still be indistinguishable from the receive/authenticate/decrypt sequence. In particular, the caller cannot take any action that depends on the decrypted message content before the entire message has been authenticated (otherwise you introduce a decryption oracle). This is I think the biggest concern with a streaming API: the caller immediately gets (parts of) the decrypted message back, but is not allowed to use/inspect them in any way before the full message has been processed.\r\n",
      "created_at" : "2023-07-26T14:47:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1651962091",
      "id" : 1651962091,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585idvDr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651962091/reactions"
      },
      "updated_at" : "2023-07-26T15:10:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651962091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This is I think the biggest concern with a streaming API: the caller immediately gets (parts of) the decrypted message back, but is not allowed to use/inspect them in any way before the full message has been processed.\r\n\r\nSo just to be sure I understand, the risk is not any additional space requirement (since we need to buffer the full decrypted message anyway as things stand right now), but rather the risk of streaming is that the caller of this API will make some unwise use of a partially processed message before it has been proven to be authentic.\r\n\r\nIf correct, this strikes me as a pretty remote risk given that the consumption of this API is limited to our codebase and so it should be easy to make users aware of this caveat.\r\n\r\nAll that said, I still think we should proceed as-is, and I will continue review on this changeset.",
      "created_at" : "2023-07-26T15:10:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1652004878",
      "id" : 1652004878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585id5gO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652004878/reactions"
      },
      "updated_at" : "2023-07-26T15:10:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652004878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> So just to be sure I understand, the risk is not any additional space requirement (since we need to buffer the full decrypted message anyway as things stand right now), but rather the risk of streaming is that the caller of this API will make some unwise use of a partially processed message before it has been proven to be authentic.\r\n\r\nYes.\r\n\r\n> If correct, this strikes me as a pretty remote risk given that the consumption of this API is limited to our codebase and so it should be easy to make users aware of this caveat.\r\n\r\nI have no doubt that we're able to write correct code that doesn't do anything wrong here. Still, it will make the code harder to understand for future contributors.\r\n\r\n> All that said, I still think we should proceed as-is, and I will continue review on this changeset.\r\n\r\nMakes sense.",
      "created_at" : "2023-07-26T15:15:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1652013883",
      "id" : 1652013883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585id7s7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652013883/reactions"
      },
      "updated_at" : "2023-07-26T15:15:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652013883",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275173737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275173737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nOnly if you retouch, might be nice to declare the values that don't change here as `const auto`.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T15:48:56Z",
      "diff_hunk" : "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275173737",
      "id" : 1275173737,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MAZtp",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 53,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1548082611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275173737/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275173737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275238979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275238979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nSlightly confused by why this conditional is necessary - can you explain in what case our expected ciphertext would be empty, but the actually generated ciphertext wouldn't be? I've tried removing this conditional but I get test failures.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T16:46:33Z",
      "diff_hunk" : "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);\n+\n+    // Load keys\n+    CKey key;\n+    key.Set(in_priv_ours.begin(), in_priv_ours.end(), true);\n+    EllSwiftPubKey ellswift_ours(in_ellswift_ours);\n+    EllSwiftPubKey ellswift_theirs(in_ellswift_theirs);\n+\n+    // Instantiate encryption BIP324 cipher.\n+    BIP324Cipher cipher(key, ellswift_ours);\n+    BOOST_CHECK(!cipher);\n+    BOOST_CHECK(cipher.GetOurPubKey() == ellswift_ours);\n+    cipher.Initialize(ellswift_theirs, in_initiating);\n+    BOOST_CHECK(cipher);\n+\n+    // Compare session variables.\n+    BOOST_CHECK(Span{out_session_id} == cipher.GetSessionID());\n+    BOOST_CHECK(Span{mid_send_garbage} == cipher.GetSendGarbageTerminator());\n+    BOOST_CHECK(Span{mid_recv_garbage} == cipher.GetReceiveGarbageTerminator());\n+\n+    // Seek to the numbered packet.\n+    for (uint32_t i = 0; i < in_idx; ++i) {\n+        std::vector<std::byte> dummy(cipher.EXPANSION);\n+        cipher.Encrypt({}, {}, false, dummy);\n+    }\n+\n+    // Construct contents and encrypt it.\n+    std::vector<std::byte> contents;\n+    for (uint32_t i = 0; i < in_multiply; ++i) {\n+        contents.insert(contents.end(), in_contents.begin(), in_contents.end());\n+    }\n+    std::vector<std::byte> ciphertext(contents.size() + cipher.EXPANSION);\n+    cipher.Encrypt(contents, in_aad, in_ignore, ciphertext);\n+\n+    // Verify ciphertext.\n+    if (!out_ciphertext.empty()) BOOST_CHECK(out_ciphertext == ciphertext);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275238979",
      "id" : 1275238979,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MAppD",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1548082611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275238979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275238979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275292903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275292903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nChoice of 2**14 arbitrary?",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T17:38:13Z",
      "diff_hunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275292903",
      "id" : 1275292903,
      "line" : 122,
      "node_id" : "PRRC_kwDOABII585MA2zn",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 122,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/test/fuzz/bip324.cpp",
      "position" : 122,
      "pull_request_review_id" : 1548082611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275292903/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275292903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275295605"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275295605"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08\r\n\r\nSmall thing, but if you retouch maybe:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/bip324.cpp b/src/test/fuzz/bip324.cpp\r\nindex 5df279b7df..376728d61d 100644\r\n--- a/src/test/fuzz/bip324.cpp\r\n+++ b/src/test/fuzz/bip324.cpp\r\n@@ -109,8 +109,10 @@ FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\r\n             }\r\n         }\r\n\r\n+        auto& receiver{from_init ? responder : initiator};\r\n+\r\n         // Decrypt length\r\n-        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\r\n+        uint32_t dec_length = receiver.DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\r\n         if (!damage) {\r\n             assert(dec_length == length);\r\n         } else {\r\n@@ -123,7 +125,7 @@ FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\r\n         // Decrypt\r\n         std::vector<std::byte> decrypt(dec_length);\r\n         bool dec_ignore{false};\r\n-        bool ok = (from_init ? responder : initiator).Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);\r\n+        bool ok = receiver.Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);\r\n         // Decryption *must* fail if the packet was damaged, and succeed if it wasn't.\r\n         assert(!ok == damage);\r\n         if (!ok) break;\r\n```",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T17:41:12Z",
      "diff_hunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;\n+            // Otherwise, just append zeros if dec_length > length.\n+            ciphertext.resize(dec_length + initiator.EXPANSION);\n+        }\n+\n+        // Decrypt\n+        std::vector<std::byte> decrypt(dec_length);\n+        bool dec_ignore{false};\n+        bool ok = (from_init ? responder : initiator).Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275295605",
      "id" : 1275295605,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MA3d1",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/test/fuzz/bip324.cpp",
      "position" : null,
      "pull_request_review_id" : 1548082611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275295605/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275295605",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment to explain.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T21:12:23Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488694",
      "id" : 1275488694,
      "in_reply_to_id" : 1268291488,
      "line" : 981,
      "node_id" : "PRRC_kwDOABII585MBmm2",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 981,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 202,
      "pull_request_review_id" : 1548603142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T21:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488776"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488776"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T21:12:30Z",
      "diff_hunk" : "@@ -0,0 +1,142 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Compute poly1305 thag. chacha20 must be set to the right nonce, block 0. Will be at block 1 after. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488776",
      "id" : 1275488776,
      "in_reply_to_id" : 1270948739,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MBmoI",
      "original_commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1548603280,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488776/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T21:12:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488776",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488845"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488845"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T21:12:36Z",
      "diff_hunk" : "@@ -255,20 +255,37 @@ static void TestChaCha20Poly1305(const std::string& plain_hex, const std::string\n     auto key = ParseHex<std::byte>(key_hex);\n     auto expected_cipher = ParseHex<std::byte>(cipher_hex);\n \n-    std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n-    AEADChaCha20Poly1305 aead{key};\n-    aead.Encrypt(plain, aad, nonce, cipher);\n-    BOOST_CHECK(cipher == expected_cipher);\n+    for (int i = 0; i < 10; ++i) {\n+        // During i=0, use single-plain Encrypt/Decrypt; others use a split at prefix.\n+        size_t prefix = i ? InsecureRandRange(plain.size() + 1) : plain.size();\n+        // Encrypt.\n+        std::vector<std::byte> cipher(plain.size() + AEADChaCha20Poly1305::EXPANSION);\n+        AEADChaCha20Poly1305 aead{key};\n+        if (i == 0) {\n+            aead.Encrypt(plain, aad, nonce, cipher);\n+        } else {\n+            aead.Encrypt(Span{plain}.first(prefix), Span{plain}.subspan(prefix), aad, nonce, cipher);\n+        }\n+        BOOST_CHECK(cipher == expected_cipher);\n \n-    std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n-    bool ret = aead.Decrypt(cipher, aad, nonce, decipher);\n-    BOOST_CHECK(ret);\n-    BOOST_CHECK(decipher == plain);\n+        // Decrypt.\n+        std::vector<std::byte> decipher(cipher.size() - AEADChaCha20Poly1305::EXPANSION);\n+        bool ret{false};\n+        if (i == 0) {\n+            ret = aead.Decrypt(cipher, aad, nonce, decipher);\n+        } else {\n+            ret = aead.Decrypt(cipher, aad, nonce, Span{decipher}.first(prefix), Span{decipher}.subspan(prefix));\n+        }\n+        BOOST_CHECK(ret);\n+        BOOST_CHECK(decipher == plain);\n+    }\n \n+    // Test Keystream output.\n     std::vector<std::byte> keystream(plain.size());\n+    AEADChaCha20Poly1305 aead{key};\n     aead.Keystream(nonce, keystream);\n     for (size_t i = 0; i < plain.size(); ++i) {\n-        BOOST_CHECK_EQUAL(plain[i] ^ keystream[i], cipher[i]);\n+        BOOST_CHECK((plain[i] ^ keystream[i]) == expected_cipher[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488845",
      "id" : 1275488845,
      "in_reply_to_id" : 1271064136,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MBmpN",
      "original_commit_id" : "df4303b996f8b4f095de18edd7d3dbe281b5f124",
      "original_line" : 288,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1548603397,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488845/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T21:12:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488966"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T21:12:47Z",
      "diff_hunk" : "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275488966",
      "id" : 1275488966,
      "in_reply_to_id" : 1275173737,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MBmrG",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 53,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1548603611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488966/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T21:12:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275488966",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490262"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment to explain, and restructured a bit.\r\n\r\nThe BIP's test vectors specify either `out_ciphertext` (for short messages) or `out_ciphertext_endswith` (for long messages), the other one is empty. We should only compare the one that was provided.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T21:14:33Z",
      "diff_hunk" : "@@ -0,0 +1,238 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <test/util/random.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+\n+#include <array>\n+#include <vector>\n+#include <cstddef>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace {\n+\n+void TestBIP324PacketVector(\n+    uint32_t in_idx,\n+    const std::string& in_priv_ours_hex,\n+    const std::string& in_ellswift_ours_hex,\n+    const std::string& in_ellswift_theirs_hex,\n+    bool in_initiating,\n+    const std::string& in_contents_hex,\n+    uint32_t in_multiply,\n+    const std::string& in_aad_hex,\n+    bool in_ignore,\n+    const std::string& mid_send_garbage_hex,\n+    const std::string& mid_recv_garbage_hex,\n+    const std::string& out_session_id_hex,\n+    const std::string& out_ciphertext_hex,\n+    const std::string& out_ciphertext_endswith_hex)\n+{\n+    // Convert input from hex to char/byte vectors/arrays.\n+    auto in_priv_ours = ParseHex(in_priv_ours_hex);\n+    auto in_ellswift_ours_vec = ParseHex<std::byte>(in_ellswift_ours_hex);\n+    assert(in_ellswift_ours_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_ours;\n+    std::copy(in_ellswift_ours_vec.begin(), in_ellswift_ours_vec.end(), in_ellswift_ours.begin());\n+    auto in_ellswift_theirs_vec = ParseHex<std::byte>(in_ellswift_theirs_hex);\n+    assert(in_ellswift_theirs_vec.size() == 64);\n+    std::array<std::byte, 64> in_ellswift_theirs;\n+    std::copy(in_ellswift_theirs_vec.begin(), in_ellswift_theirs_vec.end(), in_ellswift_theirs.begin());\n+    auto in_contents = ParseHex<std::byte>(in_contents_hex);\n+    auto in_aad = ParseHex<std::byte>(in_aad_hex);\n+    auto mid_send_garbage = ParseHex<std::byte>(mid_send_garbage_hex);\n+    auto mid_recv_garbage = ParseHex<std::byte>(mid_recv_garbage_hex);\n+    auto out_session_id = ParseHex<std::byte>(out_session_id_hex);\n+    auto out_ciphertext = ParseHex<std::byte>(out_ciphertext_hex);\n+    auto out_ciphertext_endswith = ParseHex<std::byte>(out_ciphertext_endswith_hex);\n+\n+    // Load keys\n+    CKey key;\n+    key.Set(in_priv_ours.begin(), in_priv_ours.end(), true);\n+    EllSwiftPubKey ellswift_ours(in_ellswift_ours);\n+    EllSwiftPubKey ellswift_theirs(in_ellswift_theirs);\n+\n+    // Instantiate encryption BIP324 cipher.\n+    BIP324Cipher cipher(key, ellswift_ours);\n+    BOOST_CHECK(!cipher);\n+    BOOST_CHECK(cipher.GetOurPubKey() == ellswift_ours);\n+    cipher.Initialize(ellswift_theirs, in_initiating);\n+    BOOST_CHECK(cipher);\n+\n+    // Compare session variables.\n+    BOOST_CHECK(Span{out_session_id} == cipher.GetSessionID());\n+    BOOST_CHECK(Span{mid_send_garbage} == cipher.GetSendGarbageTerminator());\n+    BOOST_CHECK(Span{mid_recv_garbage} == cipher.GetReceiveGarbageTerminator());\n+\n+    // Seek to the numbered packet.\n+    for (uint32_t i = 0; i < in_idx; ++i) {\n+        std::vector<std::byte> dummy(cipher.EXPANSION);\n+        cipher.Encrypt({}, {}, false, dummy);\n+    }\n+\n+    // Construct contents and encrypt it.\n+    std::vector<std::byte> contents;\n+    for (uint32_t i = 0; i < in_multiply; ++i) {\n+        contents.insert(contents.end(), in_contents.begin(), in_contents.end());\n+    }\n+    std::vector<std::byte> ciphertext(contents.size() + cipher.EXPANSION);\n+    cipher.Encrypt(contents, in_aad, in_ignore, ciphertext);\n+\n+    // Verify ciphertext.\n+    if (!out_ciphertext.empty()) BOOST_CHECK(out_ciphertext == ciphertext);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490262",
      "id" : 1275490262,
      "in_reply_to_id" : 1275238979,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MBm_W",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1548605650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490262/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T21:14:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490861"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Kind of. Permitting this to grow too large makes the test slower. The plaintext also has this restriction.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T21:15:19Z",
      "diff_hunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490861",
      "id" : 1275490861,
      "in_reply_to_id" : 1275292903,
      "line" : 122,
      "node_id" : "PRRC_kwDOABII585MBnIt",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 122,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/test/fuzz/bip324.cpp",
      "position" : 122,
      "pull_request_review_id" : 1548606542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490861/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T21:15:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490952"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-26T21:15:25Z",
      "diff_hunk" : "@@ -0,0 +1,133 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bip324.h>\n+#include <chainparams.h>\n+#include <span.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/xoroshiro128plusplus.h>\n+\n+#include <cstdint>\n+#include <tuple>\n+#include <vector>\n+\n+namespace {\n+\n+void Initialize()\n+{\n+    ECC_Start();\n+    SelectParams(ChainType::MAIN);\n+}\n+\n+}  // namespace\n+\n+FUZZ_TARGET(bip324_cipher_roundtrip, .init=Initialize)\n+{\n+    // Test that BIP324Cipher's encryption and decryption agree.\n+\n+    // Load keys from fuzzer.\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    // Initiator key\n+    auto init_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    init_key_data.resize(32);\n+    CKey init_key;\n+    init_key.Set(init_key_data.begin(), init_key_data.end(), true);\n+    if (!init_key.IsValid()) return;\n+    // Initiator entropy\n+    auto init_ent = provider.ConsumeBytes<std::byte>(32);\n+    init_ent.resize(32);\n+    // Responder key\n+    auto resp_key_data = provider.ConsumeBytes<unsigned char>(32);\n+    resp_key_data.resize(32);\n+    CKey resp_key;\n+    resp_key.Set(resp_key_data.begin(), resp_key_data.end(), true);\n+    if (!resp_key.IsValid()) return;\n+    // Responder entropy\n+    auto resp_ent = provider.ConsumeBytes<std::byte>(32);\n+    resp_ent.resize(32);\n+\n+    // Initialize ciphers by exchanging public keys.\n+    BIP324Cipher initiator(init_key, init_ent);\n+    assert(!initiator);\n+    BIP324Cipher responder(resp_key, resp_ent);\n+    assert(!responder);\n+    initiator.Initialize(responder.GetOurPubKey(), true);\n+    assert(initiator);\n+    responder.Initialize(initiator.GetOurPubKey(), false);\n+    assert(responder);\n+\n+    // Initialize RNG deterministically, to generate contents and AAD. We assume that there are no\n+    // (potentially buggy) edge cases triggered by specific values of contents/AAD, so we can avoid\n+    // reading the actual data for those from the fuzzer input (which would need large amounts of\n+    // data).\n+    XoRoShiRo128PlusPlus rng(provider.ConsumeIntegral<uint64_t>());\n+\n+    // Compare session IDs and garbage terminators.\n+    assert(initiator.GetSessionID() == responder.GetSessionID());\n+    assert(initiator.GetSendGarbageTerminator() == responder.GetReceiveGarbageTerminator());\n+    assert(initiator.GetReceiveGarbageTerminator() == responder.GetSendGarbageTerminator());\n+\n+    LIMITED_WHILE(provider.remaining_bytes(), 1000) {\n+        // Mode:\n+        // - Bit 0: whether the ignore bit is set in message\n+        // - Bit 1: whether the responder (0) or initiator (1) sends\n+        // - Bit 2: whether this ciphertext will be corrupted (making it the last sent one)\n+        // - Bit 3-4: controls the maximum aad length (max 511 bytes)\n+        // - Bit 5-7: controls the maximum content length (max 16383 bytes, for performance reasons)\n+        unsigned mode = provider.ConsumeIntegral<uint8_t>();\n+        bool ignore = mode & 1;\n+        bool from_init = mode & 2;\n+        bool damage = mode & 4;\n+        unsigned aad_length_bits = 3 * ((mode >> 3) & 3);\n+        unsigned aad_length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << aad_length_bits) - 1);\n+        unsigned length_bits = 2 * ((mode >> 5) & 7);\n+        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, (1 << length_bits) - 1);\n+        // Generate aad and content.\n+        std::vector<std::byte> aad(aad_length);\n+        for (auto& val : aad) val = std::byte{(uint8_t)rng()};\n+        std::vector<std::byte> contents(length);\n+        for (auto& val : contents) val = std::byte{(uint8_t)rng()};\n+\n+        // Encrypt\n+        std::vector<std::byte> ciphertext(length + initiator.EXPANSION);\n+        (from_init ? initiator : responder).Encrypt(contents, aad, ignore, ciphertext);\n+\n+        // Optionally damage 1 bit in either the ciphertext (corresponding to a change in transit)\n+        // or the aad (to make sure that decryption will fail if the AAD mismatches).\n+        if (damage) {\n+            unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,\n+                (ciphertext.size() + aad.size()) * 8U - 1U);\n+            unsigned damage_pos = damage_bit >> 3;\n+            std::byte damage_val{(uint8_t)(1U << (damage_bit & 3))};\n+            if (damage_pos >= ciphertext.size()) {\n+                aad[damage_pos - ciphertext.size()] ^= damage_val;\n+            } else {\n+                ciphertext[damage_pos] ^= damage_val;\n+            }\n+        }\n+\n+        // Decrypt length\n+        uint32_t dec_length = (from_init ? responder : initiator).DecryptLength(Span{ciphertext}.first(initiator.LENGTH_LEN));\n+        if (!damage) {\n+            assert(dec_length == length);\n+        } else {\n+            // For performance reasons, don't try to decode if length got increased too much.\n+            if (dec_length > 16384 + length) break;\n+            // Otherwise, just append zeros if dec_length > length.\n+            ciphertext.resize(dec_length + initiator.EXPANSION);\n+        }\n+\n+        // Decrypt\n+        std::vector<std::byte> decrypt(dec_length);\n+        bool dec_ignore{false};\n+        bool ok = (from_init ? responder : initiator).Decrypt(Span{ciphertext}.subspan(initiator.LENGTH_LEN), aad, dec_ignore, decrypt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1275490952",
      "id" : 1275490952,
      "in_reply_to_id" : 1275295605,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585MBnKI",
      "original_commit_id" : "9e65744c4f44ce89f3176870d3cc25ac2b6bdc08",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/test/fuzz/bip324.cpp",
      "position" : null,
      "pull_request_review_id" : 1548606652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490952/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-26T21:15:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1275490952",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1277460913"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277460913"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "tiny-nit (or more, a curiosity question): Was it intended to derive the bit position within the byte randomly? Due to the choice of having 8 error values for this case, I was assuming that the idea was to systematically damage with all bit positions 0..7.\r\n```suggestion\r\n            to_decrypt[InsecureRandRange(to_decrypt.size())] ^= std::byte(1U << (error - 2));\r\n```\r\nBut in practice it shouldn't really matter and I guess both are fine.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-28T12:00:59Z",
      "diff_hunk" : "@@ -93,9 +96,68 @@ void TestBIP324PacketVector(\n         BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n     }\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 12; ++error) {\n+        // error selects a type of error introduced:\n+        // - error=0: no errors, decryption should be successful\n+        // - error=1: wrong side\n+        // - error=2..9: bit error in ciphertext\n+        // - error=10: bit error in aad\n+        // - error=11: extra 0x00 at end of aad\n+        // - error=12: message index wrong\n+\n+        // Instantiate self-decrypting BIP324 cipher.\n+        BIP324Cipher dec_cipher(key, ellswift_ours);\n+        BOOST_CHECK(!dec_cipher);\n+        BOOST_CHECK(dec_cipher.GetOurPubKey() == ellswift_ours);\n+        dec_cipher.Initialize(ellswift_theirs, (error == 1) ^ in_initiating, /*self_decrypt=*/true);\n+        BOOST_CHECK(dec_cipher);\n+\n+        // Compare session variables.\n+        BOOST_CHECK((Span{out_session_id} == dec_cipher.GetSessionID()) == (error != 1));\n+        BOOST_CHECK((Span{mid_send_garbage} == dec_cipher.GetSendGarbageTerminator()) == (error != 1));\n+        BOOST_CHECK((Span{mid_recv_garbage} == dec_cipher.GetReceiveGarbageTerminator()) == (error != 1));\n+\n+        // Seek to the numbered packet.\n+        if (in_idx == 0 && error == 12) continue;\n+        uint32_t dec_idx = in_idx ^ (error == 12 ? (1U << InsecureRandRange(16)) : 0);\n+        for (uint32_t i = 0; i < dec_idx; ++i) {\n+            unsigned use_idx = i < in_idx ? i : 0;\n+            bool dec_ignore{false};\n+            dec_cipher.DecryptLength(Span{dummies[use_idx]}.first(cipher.LENGTH_LEN));\n+            dec_cipher.Decrypt(Span{dummies[use_idx]}.subspan(cipher.LENGTH_LEN), {}, dec_ignore, {});\n+        }\n+\n+        // Construct copied (and possibly damaged) copy of ciphertext.\n+        // Decrypt length\n+        auto to_decrypt = ciphertext;\n+        if (error >= 2 && error <= 9) {\n+            to_decrypt[InsecureRandRange(to_decrypt.size())] ^= std::byte(1U << InsecureRandRange(8));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1277460913",
      "id" : 1277460913,
      "line" : 134,
      "node_id" : "PRRC_kwDOABII585MJIGx",
      "original_commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_line" : 134,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : 134,
      "pull_request_review_id" : 1551988560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277460913/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-28T12:11:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1277460913",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1278562569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278562569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That very much sounds like it could have been my intent, but I honestly can't remember. I'll make this change if I retouch.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-07-30T12:44:22Z",
      "diff_hunk" : "@@ -93,9 +96,68 @@ void TestBIP324PacketVector(\n         BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n     }\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 12; ++error) {\n+        // error selects a type of error introduced:\n+        // - error=0: no errors, decryption should be successful\n+        // - error=1: wrong side\n+        // - error=2..9: bit error in ciphertext\n+        // - error=10: bit error in aad\n+        // - error=11: extra 0x00 at end of aad\n+        // - error=12: message index wrong\n+\n+        // Instantiate self-decrypting BIP324 cipher.\n+        BIP324Cipher dec_cipher(key, ellswift_ours);\n+        BOOST_CHECK(!dec_cipher);\n+        BOOST_CHECK(dec_cipher.GetOurPubKey() == ellswift_ours);\n+        dec_cipher.Initialize(ellswift_theirs, (error == 1) ^ in_initiating, /*self_decrypt=*/true);\n+        BOOST_CHECK(dec_cipher);\n+\n+        // Compare session variables.\n+        BOOST_CHECK((Span{out_session_id} == dec_cipher.GetSessionID()) == (error != 1));\n+        BOOST_CHECK((Span{mid_send_garbage} == dec_cipher.GetSendGarbageTerminator()) == (error != 1));\n+        BOOST_CHECK((Span{mid_recv_garbage} == dec_cipher.GetReceiveGarbageTerminator()) == (error != 1));\n+\n+        // Seek to the numbered packet.\n+        if (in_idx == 0 && error == 12) continue;\n+        uint32_t dec_idx = in_idx ^ (error == 12 ? (1U << InsecureRandRange(16)) : 0);\n+        for (uint32_t i = 0; i < dec_idx; ++i) {\n+            unsigned use_idx = i < in_idx ? i : 0;\n+            bool dec_ignore{false};\n+            dec_cipher.DecryptLength(Span{dummies[use_idx]}.first(cipher.LENGTH_LEN));\n+            dec_cipher.Decrypt(Span{dummies[use_idx]}.subspan(cipher.LENGTH_LEN), {}, dec_ignore, {});\n+        }\n+\n+        // Construct copied (and possibly damaged) copy of ciphertext.\n+        // Decrypt length\n+        auto to_decrypt = ciphertext;\n+        if (error >= 2 && error <= 9) {\n+            to_decrypt[InsecureRandRange(to_decrypt.size())] ^= std::byte(1U << InsecureRandRange(8));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1278562569",
      "id" : 1278562569,
      "in_reply_to_id" : 1277460913,
      "line" : 134,
      "node_id" : "PRRC_kwDOABII585MNVEJ",
      "original_commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "original_line" : 134,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : 134,
      "pull_request_review_id" : 1553637032,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278562569/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-30T12:44:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1278562569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284724692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284724692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 0fee267792eb8cbdd48ad78f1712420b5d8d905b \"crypto: add FSChaCha20, a rekeying wrapper around ChaCha20\"\r\n\r\nWe have `secure_allocator` which handles this cleaning when the object is destroyed, could we use that instead of having to remember to explicitly `memory_cleanse` secret data?",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-08-04T18:25:11Z",
      "diff_hunk" : "@@ -318,3 +324,38 @@ void ChaCha20::Crypt(const unsigned char* m, unsigned char* c, size_t bytes)\n         m_bufleft = 64 - bytes;\n     }\n }\n+\n+ChaCha20::~ChaCha20()\n+{\n+    memory_cleanse(m_buffer, sizeof(m_buffer));\n+}\n+\n+FSChaCha20::FSChaCha20(Span<const std::byte> key, uint32_t rekey_interval) noexcept :\n+    m_chacha20(UCharCast(key.data())), m_rekey_interval(rekey_interval)\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void FSChaCha20::Crypt(Span<const std::byte> input, Span<std::byte> output) noexcept\n+{\n+    assert(input.size() == output.size());\n+\n+    // Invoke internal stream cipher for actual encryption/decryption.\n+    m_chacha20.Crypt(UCharCast(input.data()), UCharCast(output.data()), input.size());\n+\n+    // Rekey after m_rekey_interval encryptions/decryptions.\n+    if (++m_chunk_counter == m_rekey_interval) {\n+        // Get new key from the stream cipher.\n+        std::byte new_key[KEYLEN];\n+        m_chacha20.Keystream(UCharCast(new_key), sizeof(new_key));\n+        // Update its key.\n+        m_chacha20.SetKey32(UCharCast(new_key));\n+        // Wipe the key (a copy remains inside m_chacha20, where it'll be wiped on the next rekey\n+        // or on destruction).\n+        memory_cleanse(new_key, sizeof(new_key));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284724692",
      "id" : 1284724692,
      "line" : 355,
      "node_id" : "PRRC_kwDOABII585Mk1fU",
      "original_commit_id" : "0fee267792eb8cbdd48ad78f1712420b5d8d905b",
      "original_line" : 355,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20.cpp",
      "position" : 52,
      "pull_request_review_id" : 1563364681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284724692/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T19:41:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284724692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284733846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284733846"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In aa8cee93342ee857931afec9af3ff5dbd8ce7749 \"crypto: add FSChaCha20Poly1305, rekeying wrapper around ChaCha20Poly1305\"\r\n\r\nThis variable could live outside of the loop and just be reused every time.",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-08-04T18:38:07Z",
      "diff_hunk" : "@@ -264,6 +264,41 @@ static void TestChaCha20Poly1305(const std::string& plain_hex, const std::string\n     bool ret = aead.Decrypt(cipher, aad, nonce, decipher);\n     BOOST_CHECK(ret);\n     BOOST_CHECK(decipher == plain);\n+\n+    std::vector<std::byte> keystream(plain.size());\n+    aead.Keystream(nonce, keystream);\n+    for (size_t i = 0; i < plain.size(); ++i) {\n+        BOOST_CHECK_EQUAL(plain[i] ^ keystream[i], cipher[i]);\n+    }\n+}\n+\n+static void TestFSChaCha20Poly1305(const std::string& plain_hex, const std::string& aad_hex, const std::string& key_hex, uint64_t msg_idx, const std::string& cipher_hex)\n+{\n+    auto plain = ParseHex<std::byte>(plain_hex);\n+    auto aad = ParseHex<std::byte>(aad_hex);\n+    auto key = ParseHex<std::byte>(key_hex);\n+    auto expected_cipher = ParseHex<std::byte>(cipher_hex);\n+    std::vector<std::byte> cipher(plain.size() + FSChaCha20Poly1305::EXPANSION);\n+\n+    FSChaCha20Poly1305 enc_aead{key, 224};\n+    for (uint64_t i = 0; i < msg_idx; ++i) {\n+        std::byte dummy_tag[FSChaCha20Poly1305::EXPANSION] = {{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284733846",
      "id" : 1284733846,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mk3uW",
      "original_commit_id" : "aa8cee93342ee857931afec9af3ff5dbd8ce7749",
      "original_line" : 285,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1563364681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284733846/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T19:41:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284733846",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284753030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284753030"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 9ff0768bdcca06836ccc673eacfa648e801930cb \"crypto: add the ChaCha20Poly1305 AEAD as specified in RFC8439\"\r\n\r\nThis could be made easier to read using `cipher.last()`.\r\n\r\n```suggestion\r\n    if (timingsafe_bcmp(UCharCast(expected_tag), UCharCast(cipher.last(EXPANSION).data()), EXPANSION)) return false;\r\n```",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-08-04T19:05:07Z",
      "diff_hunk" : "@@ -0,0 +1,101 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Compute poly1305 tag. chacha20 must be set to the right nonce, block 0. Will be at block 1 after. */\n+void ComputeTag(ChaCha20& chacha20, Span<const std::byte> aad, Span<const std::byte> cipher, Span<std::byte> tag) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+\n+    // Get block of keystream (use a full 64 byte buffer to avoid the need for chacha20's own buffering).\n+    std::byte first_block[64];\n+    chacha20.Keystream(UCharCast(first_block), sizeof(first_block));\n+\n+    // Use the first 32 bytes of the first keystream block as poly1305 key.\n+    Poly1305 poly1305{Span{first_block}.first(Poly1305::KEYLEN)};\n+\n+    // Compute tag:\n+    // - Process the padded AAD with Poly1305.\n+    const unsigned aad_padding_length = (16 - (aad.size() % 16)) % 16;\n+    poly1305.Update(aad).Update(Span{PADDING}.first(aad_padding_length));\n+    // - Process the padded ciphertext with Poly1305.\n+    const unsigned cipher_padding_length = (16 - (cipher.size() % 16)) % 16;\n+    poly1305.Update(cipher).Update(Span{PADDING}.first(cipher_padding_length));\n+    // - Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[Poly1305::TAGLEN];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+\n+    // Output tag.\n+    poly1305.Finalize(tag);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at block 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Seek to block 0, and compute tag using key drawn from there.\n+    m_chacha20.Seek64(nonce, 0);\n+    ComputeTag(m_chacha20, aad, cipher.first(plain.size()), cipher.last(EXPANSION));\n+}\n+\n+bool AEADChaCha20Poly1305::Decrypt(Span<const std::byte> cipher, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> plain) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Verify tag (using key drawn from block 0).\n+    m_chacha20.Seek64(nonce, 0);\n+    std::byte expected_tag[EXPANSION];\n+    ComputeTag(m_chacha20, aad, cipher.first(plain.size()), expected_tag);\n+    if (timingsafe_bcmp(UCharCast(expected_tag), UCharCast(cipher.data() + plain.size()), EXPANSION)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284753030",
      "id" : 1284753030,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mk8aG",
      "original_commit_id" : "9ff0768bdcca06836ccc673eacfa648e801930cb",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1563364681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284753030/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T19:41:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284753030",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284765020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284765020"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 990f0f8da92a2d11828a7c05ca93bf0520b2a95e \"Add BIP324Cipher, encapsulating key agreement, derivation, and stream/AEAD ciphers\"\r\n\r\nCould you add a comment explaining what the values for `initiator` mean?",
      "commit_id" : "1c7582ead6e1119899922041c1af2b4169b0bc74",
      "created_at" : "2023-08-04T19:16:46Z",
      "diff_hunk" : "@@ -0,0 +1,90 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_BIP324_H\n+#define BITCOIN_BIP324_H\n+\n+#include <cstddef>\n+#include <optional>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/chacha20poly1305.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <span.h>\n+\n+/** The BIP324 packet cipher, encapsulating its key derivation, stream cipher, and AEAD. */\n+class BIP324Cipher\n+{\n+public:\n+    static constexpr unsigned SESSION_ID_LEN{32};\n+    static constexpr unsigned GARBAGE_TERMINATOR_LEN{16};\n+    static constexpr unsigned REKEY_INTERVAL{224};\n+    static constexpr unsigned LENGTH_LEN{3};\n+    static constexpr unsigned HEADER_LEN{1};\n+    static constexpr unsigned EXPANSION = LENGTH_LEN + HEADER_LEN + FSChaCha20Poly1305::EXPANSION;\n+    static constexpr std::byte IGNORE_BIT{0x80};\n+\n+private:\n+    std::optional<FSChaCha20> m_send_l_cipher;\n+    std::optional<FSChaCha20> m_recv_l_cipher;\n+    std::optional<FSChaCha20Poly1305> m_send_p_cipher;\n+    std::optional<FSChaCha20Poly1305> m_recv_p_cipher;\n+\n+    CKey m_key;\n+    EllSwiftPubKey m_our_pubkey;\n+\n+    std::array<std::byte, SESSION_ID_LEN> m_session_id;\n+    std::array<std::byte, GARBAGE_TERMINATOR_LEN> m_send_garbage_terminator;\n+    std::array<std::byte, GARBAGE_TERMINATOR_LEN> m_recv_garbage_terminator;\n+\n+public:\n+    /** Initialize a BIP324 cipher with securely generated random keys. */\n+    BIP324Cipher() noexcept;\n+\n+    /** Initialize a BIP324 cipher with specified key and encoding entropy (testing only). */\n+    BIP324Cipher(const CKey& key, Span<const std::byte> ent32) noexcept;\n+\n+    /** Initialize a BIP324 cipher with specified key (testing only). */\n+    BIP324Cipher(const CKey& key, const EllSwiftPubKey& pubkey) noexcept;\n+\n+    /** Retrieve our public key. */\n+    const EllSwiftPubKey& GetOurPubKey() const noexcept { return m_our_pubkey; }\n+\n+    /** Initialize when the other side's public key is received. Can only be called once. */\n+    void Initialize(const EllSwiftPubKey& their_pubkey, bool initiator) noexcept;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1284765020",
      "id" : 1284765020,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Mk_Vc",
      "original_commit_id" : "990f0f8da92a2d11828a7c05ca93bf0520b2a95e",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/bip324.h",
      "position" : null,
      "pull_request_review_id" : 1563364681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284765020/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-08-04T19:41:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1284765020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
