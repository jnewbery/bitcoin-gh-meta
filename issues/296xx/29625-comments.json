[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29625).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theuni](https://github.com/bitcoin/bitcoin/pull/29625#pullrequestreview-2083365482) |\n| Stale ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/29625#pullrequestreview-2066132059), [EthanHeilman](https://github.com/bitcoin/bitcoin/pull/29625#pullrequestreview-2106304644) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30202](https://github.com/bitcoin/bitcoin/pull/30202) (netbase: extend CreateSock() to support creating arbitrary sockets by vasild)\n* [#30160](https://github.com/bitcoin/bitcoin/pull/30160) (util: add BitSet by sipa)\n* [#30126](https://github.com/bitcoin/bitcoin/pull/30126) (Low-level cluster linearization code by sipa)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n* [#29543](https://github.com/bitcoin/bitcoin/pull/29543) (refactor: Avoid unsigned integer overflow in `script/interpreter.cpp` by hebasto)\n* [#29536](https://github.com/bitcoin/bitcoin/pull/29536) (fuzz: fuzz connman with non-empty addrman + ASMap by brunoerg)\n* [#29480](https://github.com/bitcoin/bitcoin/pull/29480) (Drop log category in `SeedStartup` by hebasto)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) ([WIP] Cluster mempool implementation by sdaftuar)\n* [#26114](https://github.com/bitcoin/bitcoin/pull/26114) (net: Make AddrFetch connections to fixed seeds by mzumsande)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2024-03-11T19:36:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1989283694",
      "id" : 1989283694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5852kg9u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1989283694/reactions"
      },
      "updated_at" : "2024-06-11T23:19:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1989283694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22530315845</sub>",
      "created_at" : "2024-03-12T04:41:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1990350891",
      "id" : 1990350891,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5852olgr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1990350891/reactions"
      },
      "updated_at" : "2024-03-12T04:41:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1990350891",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nThere are a few places in the fuzz tests where this will allow to easily replace `FastRandomContext` with a `InsecureRandomContext`, which is beneficial for performance (e.g. the addrman harnesses partially fill the addrman with addresses from rng) and we don't need cryptographic rng there anyway.\r\n\r\n> During tests, all randomness is made deterministic \r\n\r\nGreat, this should help with #29018",
      "created_at" : "2024-03-12T10:09:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1991256586",
      "id" : 1991256586,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5852sCoK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991256586/reactions"
      },
      "updated_at" : "2024-03-12T10:09:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991256586",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "What's the impact on the fuzz corpus of switching to a different (?) deterministic RNG?",
      "created_at" : "2024-03-12T15:11:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1991884113",
      "id" : 1991884113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5852ub1R",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991884113/reactions"
      },
      "updated_at" : "2024-03-12T15:11:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991884113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> What's the impact on the fuzz corpus of switching to a different (?) deterministic RNG?\r\n\r\nI would expect that switching to a **different** rng should have no meaningful effect on the corpus itself. The corpus for a particular harness might change but the coverage for the code we intend to test should remain the same. This is because using rng in a fuzz harness only makes sense in very rare cases. It should never be used in a way that can significantly affect the coverage reached, otherwise there is no point in using a coverage-guided fuzzer, we could just pipe /dev/random to our harnesses.\r\n\r\nFor example, if we need to populate some data that we don't really expect to have an impact on the thing we are testing, we might use rng instead of consuming from the fuzz input (we do this in the p2p transport harnesses to fill message contents, which are essentially irrelevant to the transport logic).\r\n\r\nSwitching to **deterministic** rng can cause a corpus' coverage to grow because coverage-guided feedback loops start working more reliably when the code under test is deterministic. This can vary from harness to harness, but we've seen coverage-guided fuzzers find bugs once we've improved on determinism.",
      "created_at" : "2024-03-12T15:53:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1991989979",
      "id" : 1991989979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5852u1rb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991989979/reactions"
      },
      "updated_at" : "2024-03-12T15:53:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991989979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm baffled by what is happening here. In the fuzz test CI job, the *data directory* gets deleted in between two fuzz input runs??",
      "created_at" : "2024-03-14T23:21:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1998634935",
      "id" : 1998634935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5853IL-3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1998634935/reactions"
      },
      "updated_at" : "2024-03-14T23:21:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1998634935",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This is expected, because all fuzz tests in this pull request branch use the same datadir (`5a19fd2bc079272a9b138710c6e50c5ea512c1a0736333c9817c4df1d77c8518`). Maybe the randomness is too deterministic and returns a constant?\r\n\r\nYou can double check with something like:\r\n\r\n```diff\r\ndiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp\r\nindex 2c18184261..422f495246 100644\r\n--- a/src/test/util/setup_common.cpp\r\n+++ b/src/test/util/setup_common.cpp\r\n@@ -153,6 +153,7 @@ BasicTestingSetup::BasicTestingSetup(const ChainType chainType, const std::vecto\r\n         const auto rand_str{g_insecure_rand_ctx_temp_path.rand256().ToString()};\r\n         m_path_root = fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / rand_str;\r\n         TryCreateDirectories(m_path_root);\r\n+        Assert(util::LockDirectory(m_path_root, \".lock\", /*probe_only=*/false) == util::LockResult::Success) ;\r\n     } else {\r\n         // Custom data directory\r\n         m_has_custom_datadir = true;\r\n```\r\n\r\nwhich will print:\r\n\r\n```\r\nRun addrman_serdeser with args ['/bitcoin-core/src/test/fuzz/fuzz', '-runs=1', PosixPath('folder_3/addrman_serdeser')]test/util/setup_common.cpp:156 BasicTestingSetup: Assertion `util::LockDirectory(m_path_root, \".lock\", false) == util::LockResult::Success' failed.\r\n```\r\n\r\nAlso, the issue should happen locally as well, not only on CI. Something like `./test/fuzz/test_runner.py -j 9 -l DEBUG ./folder_temp` reproduces it for me.\r\n\r\n\r\n\r\nEdit:\r\n\r\n```\r\n25d4e22d8b25c33f60b91193673336e4ad1c9406 is the first bad commit\r\n",
      "created_at" : "2024-03-15T08:57:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1999205501",
      "id" : 1999205501,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5853KXR9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 1,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1999205501/reactions"
      },
      "updated_at" : "2024-03-15T09:02:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1999205501",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@maflcko Thank you! I suspect that is it. I indeed made all fuzz test use the same deterministic seed. I've dropped that change now.",
      "created_at" : "2024-03-15T12:55:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-1999608898",
      "id" : 1999608898,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5853L5xC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1999608898/reactions"
      },
      "updated_at" : "2024-03-15T12:55:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1999608898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22719690018</sub>",
      "created_at" : "2024-03-15T19:04:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2000281667",
      "id" : 2000281667,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5853OeBD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2000281667/reactions"
      },
      "updated_at" : "2024-03-15T19:04:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2000281667",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ready for review.",
      "created_at" : "2024-03-17T15:50:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2002515874",
      "id" : 2002515874,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5853W_ei",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2002515874/reactions"
      },
      "updated_at" : "2024-03-17T15:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2002515874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors \r\n\r\n> What's the impact on the fuzz corpus of switching to a different (?) deterministic RNG?\r\n\r\nLet's break it down into cases:\r\n* **The main \"random.h\" RNG** (`GetRand()` and friends, default-constructed `FastRandomContext` objects, ...). This used to be truly random in fuzz tests, and will now be deterministic with a fixed seed. In theory this should have no impact, because the fuzz tests shouldn't be relying on this randomness in the first place. But possibly there are some which do, indirectly through code that wasn't properly mocked or otherwise avoiding it, in which case making things deterministic should be a strict improvement by not making the fuzzer waste time on chasing the effects of that randomness.\r\n* **XoRoShiRo128PlusPlus**. There are a few fuzz tests (bip324, crypto_chacha20, p2p_transport_serialization, poolresource) that use this very fast deterministic RNG to construct certain data. This PR changes the behavior of some of them by replacing ad-hoc code to use that randomness with general helper functions that become available for all RNGs. In theory this might invalidate part of the fuzz corpus for those tests, but in practice I expect it won't, because the data drawn from those RNGs is data that *shouldn't* matter for the test much (if it did, it'd be drawn from the fuzz input instead).\r\n\r\nSo overall, it might invalidate a few tests' corpus (but probably not), and for others it should either have no effect or be a strict improvement.\r\n",
      "created_at" : "2024-03-23T13:23:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2016494476",
      "id" : 2016494476,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5854MUOM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2016494476/reactions"
      },
      "updated_at" : "2024-03-23T17:57:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2016494476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa I plan to do a review of this next week",
      "created_at" : "2024-04-05T22:10:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2040694615",
      "id" : 2040694615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII5855oodX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2040694615/reactions"
      },
      "updated_at" : "2024-04-05T22:10:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2040694615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1584428294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1584428294"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/28558 made PeerManager own a FastRandomContext, so we could (should?) use `m_rng` here instead (otherwise `PeerManager::Options::deterministic_rng` still only applies to some of the randomness).\r\n\r\nSince this PR kind of makes individual \"make this component deterministic\" options redudant, we could consider reverting #28558 (not necessarily in this PR)?\r\n\r\nI was thinking that in the long run we could break the dependencies between components and the specific rng they use (maybe something like `template<RandomNumberGenerator R> class PeerManager { ... }`), which would allow more fine grained mocking than a global \"make rng deterministic\" in tests (e.g. we could have a \"rng\" type that consumes from a `FuzzedDataProvider`). I guess this can be done by using globals as well.",
      "commit_id" : "5904c0c828982e43c6868567d8f527ff67489cba",
      "created_at" : "2024-04-30T09:18:02Z",
      "diff_hunk" : "@@ -5501,7 +5503,7 @@ void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, Peer& peer, std::chrono::mi\n             MakeAndPushMessage(pto, NetMsgType::FEEFILTER, filterToSend);\n             peer.m_fee_filter_sent = filterToSend;\n         }\n-        peer.m_next_send_feefilter = GetExponentialRand(current_time, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+        peer.m_next_send_feefilter = current_time + FastRandomContext().rand_expo_duration(AVG_FEEFILTER_BROADCAST_INTERVAL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1584428294",
      "id" : 1584428294,
      "line" : 5506,
      "node_id" : "PRRC_kwDOABII585ecHUG",
      "original_commit_id" : "1779a379726b34cccc71ed1555f25975f1e073f5",
      "original_line" : 5506,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 64,
      "pull_request_review_id" : 2030738805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1584428294/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-30T09:44:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1584428294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1585458355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1585458355"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> #28558 made PeerManager own a FastRandomContext, so we could (should?) use `m_rng` here instead (otherwise `PeerManager::Options::deterministic_rng` still only applies to some of the randomness).\r\n\r\nI've changed the PR to reuse `PeerManagerImpl::m_rng`.\r\n\r\n\r\n\r\n> Since this PR kind of makes individual \"make this component deterministic\" options redudant, we could consider reverting #28558 (not necessarily in this PR)?\r\n\r\nMaybe. I've opted to use it where possible for now as it's a smaller change, and has some (possibly negligible) performance advantage (no need to lock the global RNG mutex to get randomness when you already hold `g_msgproc_mutex`), but I think that can be reconsidered.\r\n\r\nIndependently, we may be able to just drop `PeerManager::Options::deterministic_rng`, relying on global deterministic mode instead.\r\n\r\n\r\n\r\n> I was thinking that in the long run we could break the dependencies between components and the specific rng they use (maybe something like `template<RandomNumberGenerator R> class PeerManager { ... }`), which would allow more fine grained mocking than a global \"make rng deterministic\" in tests (e.g. we could have a \"rng\" type that consumes from a `FuzzedDataProvider`). I guess this can be done by using globals as well.\r\n\r\nMaybe, though that means testing something very different from what we're doing here: testing under conditions where the RNG returns actually decidedly non-random results (which is different from a deterministic `FastRandomContext` which is still cryptographically-strong, just deterministic. I don't know for how many things this makes sense.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-04-30T19:55:57Z",
      "diff_hunk" : "@@ -5501,7 +5503,7 @@ void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, Peer& peer, std::chrono::mi\n             MakeAndPushMessage(pto, NetMsgType::FEEFILTER, filterToSend);\n             peer.m_fee_filter_sent = filterToSend;\n         }\n-        peer.m_next_send_feefilter = GetExponentialRand(current_time, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+        peer.m_next_send_feefilter = current_time + FastRandomContext().rand_expo_duration(AVG_FEEFILTER_BROADCAST_INTERVAL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1585458355",
      "id" : 1585458355,
      "in_reply_to_id" : 1584428294,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585egCyz",
      "original_commit_id" : "1779a379726b34cccc71ed1555f25975f1e073f5",
      "original_line" : 5506,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 2032409067,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1585458355/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-30T19:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1585458355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617597271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617597271"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Neat :)",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T16:32:32Z",
      "diff_hunk" : "@@ -135,50 +135,68 @@ void RandAddPeriodic() noexcept;\n  */\n void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617597271",
      "id" : 1617597271,
      "line" : 137,
      "node_id" : "PRRC_kwDOABII585gapNX",
      "original_commit_id" : "91f0e3cc55ee6f152ef09e1d0cc58c92353ede55",
      "original_line" : 137,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 162,
      "pull_request_review_id" : 2083365482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617597271/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T19:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617597271",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617727453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617727453"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add a quick zero-case here too?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T18:24:17Z",
      "diff_hunk" : "@@ -219,6 +219,40 @@ class RandomMixin\n         return ret & ((uint64_t{1} << bits) - 1);\n     }\n \n+    /** Same as above, but with compile-time fixed bits count. */\n+    template<int Bits>\n+    uint64_t randbits() noexcept\n+    {\n+        static_assert(Bits >= 0 && Bits <= 64);\n+        if constexpr (Bits == 64) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617727453",
      "id" : 1617727453,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gbI_d",
      "original_commit_id" : "f9bf239a930e130c3897779be5e61fbe5162b956",
      "original_line" : 227,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2083365482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617727453/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T19:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617727453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617743561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617743561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why not do a rand32() if size() >= 4 first?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T18:39:21Z",
      "diff_hunk" : "@@ -267,6 +265,20 @@ class RandomMixin\n         }\n     }\n \n+    /** Fill a Span with random bytes. */\n+    void fillrand(Span<std::byte> span) noexcept\n+    {\n+        while (span.size() >= 8) {\n+            uint64_t gen = Impl().rand64();\n+            WriteLE64(UCharCast(span.data()), gen);\n+            span = span.subspan(8);\n+        }\n+        while (span.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617743561",
      "id" : 1617743561,
      "line" : 283,
      "node_id" : "PRRC_kwDOABII585gbM7J",
      "original_commit_id" : "89fa561ab9cbc165eb2ab260a72b85fa4389e89c",
      "original_line" : 283,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 358,
      "pull_request_review_id" : 2083365482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617743561/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T19:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617743561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617765084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617765084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unrelated change?\r\n\r\nEdit: Or because of use of m_rng?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T18:59:51Z",
      "diff_hunk" : "@@ -508,7 +508,7 @@ class PeerManagerImpl final : public PeerManager\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex, !m_most_recent_block_mutex, g_msgproc_mutex);\n \n     /** Implement PeerManager */\n-    void StartScheduledTasks(CScheduler& scheduler) override;\n+    void StartScheduledTasks(CScheduler& scheduler) override EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617765084",
      "id" : 1617765084,
      "line" : 516,
      "node_id" : "PRRC_kwDOABII585gbSLc",
      "original_commit_id" : "8504bfc5dc8e1ff906f0a2b845dce8c37528b67b",
      "original_line" : 516,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 2083365482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617765084/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T19:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617765084",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617782150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617782150"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is kinda sneaky and surprising (to me at least) to see with CRTP.\r\n\r\nIt would be nice to specify as part of the concept which functions are _not_ allowed to be overridden, but sadly \r\n[std::experimental::detected_t](https://en.cppreference.com/w/cpp/experimental/is_detected) is.. well.. experimental.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T19:17:18Z",
      "diff_hunk" : "@@ -351,19 +363,19 @@ class FastRandomContext : public RandomMixin<FastRandomContext>\n         return ReadLE64(UCharCast(buf.data()));\n     }\n \n-    /** Fill a byte Span with random bytes. */\n+    /** Fill a byte Span with random bytes. This overrides the RandomMixin version. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617782150",
      "id" : 1617782150,
      "line" : 407,
      "node_id" : "PRRC_kwDOABII585gbWWG",
      "original_commit_id" : "89fa561ab9cbc165eb2ab260a72b85fa4389e89c",
      "original_line" : 407,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 495,
      "pull_request_review_id" : 2083670646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617782150/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T19:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617782150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617796685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617796685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well being able to ad-hoc override individual functions, while still being able to have non-overridden functions be able to refer to it, is sort of the point of CRTP (virtual functions have the same behavior, but CRTP gives it without runtime overhead). If we didn't want this ability, it'd be possible to just have a `template<typename R> class  RNGUtility { R m_int; ...}`, where there are low-level `ChaCha20RNG` and `XoRoShiRo128PlusPlusRNG` classes, and high-level `using FastRandomContext = RNGUtility<ChaCha20RNG>;` and `using InsecureRandomContext = RNGUtility<XoRoShiRo128PlusPlusRNG>`.\r\n\r\nBeing able to selectively mark certain functions as non-overridable would be nice of course, but I don't see a way to do that currently.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T19:29:38Z",
      "diff_hunk" : "@@ -351,19 +363,19 @@ class FastRandomContext : public RandomMixin<FastRandomContext>\n         return ReadLE64(UCharCast(buf.data()));\n     }\n \n-    /** Fill a byte Span with random bytes. */\n+    /** Fill a byte Span with random bytes. This overrides the RandomMixin version. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617796685",
      "id" : 1617796685,
      "in_reply_to_id" : 1617782150,
      "line" : 407,
      "node_id" : "PRRC_kwDOABII585gbZ5N",
      "original_commit_id" : "89fa561ab9cbc165eb2ab260a72b85fa4389e89c",
      "original_line" : 407,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 495,
      "pull_request_review_id" : 2083694483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617796685/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T19:29:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617796685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617811698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617811698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It appeared to be necessary, IIRC.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T19:44:20Z",
      "diff_hunk" : "@@ -508,7 +508,7 @@ class PeerManagerImpl final : public PeerManager\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex, !m_most_recent_block_mutex, g_msgproc_mutex);\n \n     /** Implement PeerManager */\n-    void StartScheduledTasks(CScheduler& scheduler) override;\n+    void StartScheduledTasks(CScheduler& scheduler) override EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617811698",
      "id" : 1617811698,
      "in_reply_to_id" : 1617765084,
      "line" : 516,
      "node_id" : "PRRC_kwDOABII585gbdjy",
      "original_commit_id" : "8504bfc5dc8e1ff906f0a2b845dce8c37528b67b",
      "original_line" : 516,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 2083718448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617811698/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T19:44:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617811698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617833166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617833166"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T20:06:16Z",
      "diff_hunk" : "@@ -267,6 +265,20 @@ class RandomMixin\n         }\n     }\n \n+    /** Fill a Span with random bytes. */\n+    void fillrand(Span<std::byte> span) noexcept\n+    {\n+        while (span.size() >= 8) {\n+            uint64_t gen = Impl().rand64();\n+            WriteLE64(UCharCast(span.data()), gen);\n+            span = span.subspan(8);\n+        }\n+        while (span.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617833166",
      "id" : 1617833166,
      "in_reply_to_id" : 1617743561,
      "line" : 283,
      "node_id" : "PRRC_kwDOABII585gbizO",
      "original_commit_id" : "89fa561ab9cbc165eb2ab260a72b85fa4389e89c",
      "original_line" : 283,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 358,
      "pull_request_review_id" : 2083753859,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617833166/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T20:06:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617833166",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617833753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617833753"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think I decided that the compiler should be smart enough to optimize the final \"else\" case with `Bits == 0` to effectively a `return 0;`, but it's more obvious to just make it explicit. Done.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-28T20:06:57Z",
      "diff_hunk" : "@@ -219,6 +219,40 @@ class RandomMixin\n         return ret & ((uint64_t{1} << bits) - 1);\n     }\n \n+    /** Same as above, but with compile-time fixed bits count. */\n+    template<int Bits>\n+    uint64_t randbits() noexcept\n+    {\n+        static_assert(Bits >= 0 && Bits <= 64);\n+        if constexpr (Bits == 64) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1617833753",
      "id" : 1617833753,
      "in_reply_to_id" : 1617727453,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gbi8Z",
      "original_commit_id" : "f9bf239a930e130c3897779be5e61fbe5162b956",
      "original_line" : 227,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2083754908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617833753/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-28T20:06:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1617833753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\n node0 stderr random.h:218:26: runtime error: shift exponent -23 is negative\r\n    #0 0x61cb8c410ee5 in RandomMixin<FastRandomContext>::randbits(int) src/./random.h:218:26\r\n    #1 0x61cb8c460b2c in long RandomMixin<FastRandomContext>::randrange<long>(long) src/./random.h:270:35\r\n    #2 0x61cb8c460b2c in std::chrono::duration<long, std::ratio<1l, 1000l>> RandomMixin<FastRandomContext>::randrange<std::chrono::duration<long, std::ratio<1l, 1000l>>>(std::common_type<std::chrono::duration<long, std::ratio<1l, 1000l>>>::type) src/./random.h:352:27\r\n    #3 0x61cb8c460b2c in (anonymous namespace)::PeerManagerImpl::StartScheduledTasks(CScheduler&) src/net_processing.cpp:2080:38\r\n    #4 0x61cb8c340ea6 in AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*) src/init.cpp:1980:37\r\n    #5 0x61cb8c2fa474 in AppInit(node::NodeContext&) src/bitcoind.cpp:227:43\r\n    #6 0x61cb8c2fa474 in main src/bitcoind.cpp:273:10\r\n    #7 0x77f2e3bd21c9  (/lib/x86_64-linux-gnu/libc.so.6+0x2a1c9) (BuildId: 4d9090d61bf70e6b3225d583f0f08193f54670b2)\r\n    #8 0x77f2e3bd228a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2a28a) (BuildId: 4d9090d61bf70e6b3225d583f0f08193f54670b2)\r\n    #9 0x61cb8c21cfe4 in _start (/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/bitcoind+0xa1dfe4) (BuildId: 478a61c7d2f8deae95e82eb455a5b93dcb36ffa7)\r\nSUMMARY: UndefinedBehaviorSanitizer: invalid-shift-exponent random.h:218:26 ",
      "created_at" : "2024-05-29T14:02:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2137496121",
      "id" : 2137496121,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII585_Z5o5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2137496121/reactions"
      },
      "updated_at" : "2024-05-29T14:02:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2137496121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@maflcko That makes absolutely no sense. The shift value is `bits - bitbuf_size`, and it's inside a branch on conditional `bits > bitbuf_size`...?!",
      "created_at" : "2024-05-29T16:12:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2137789019",
      "id" : 2137789019,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII585_bBJb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2137789019/reactions"
      },
      "updated_at" : "2024-05-29T16:12:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2137789019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1619482803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619482803"
         }
      },
      "author_association" : "MEMBER",
      "body" : "While you're at it, how about replacing these move assignments with `Reseed()` functions?\r\n\r\nI find the idea of moving an rng to be unintuitive. And as far as I can tell, every case of \r\n\r\n`RandomMixin = foo` and `FastRandomContext = foo` and `InsecureRandomContext = foo` (all in tests) really just means \"reseed\".",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-29T21:12:42Z",
      "diff_hunk" : "@@ -135,50 +135,68 @@ void RandAddPeriodic() noexcept;\n  */\n void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */\n+template<typename T>\n+concept RandomNumberGenerator = requires(T& rng, Span<std::byte> s) {\n+    // A random number generator must provide rand64().\n+    { rng.rand64() } noexcept -> std::same_as<uint64_t>;\n+    // A random number generator must provide randfill(Span<std::byte>).\n+    { rng.fillrand(s) } noexcept;\n+    // A random number generator must derive from RandomMixin, which adds other rand* functions.\n+    requires std::derived_from<std::remove_reference_t<T>, RandomMixin<std::remove_reference_t<T>>>;\n+};\n+\n+/** Mixin class that provides helper randomness functions.\n  *\n- * This class is not thread-safe.\n+ * Intended to be used through CRTP: https://en.cppreference.com/w/cpp/language/crtp.\n+ * An RNG class FunkyRNG would derive publicly from RandomMixin<FunkyRNG>. This permits\n+ * RandomMixin from accessing the derived class's rand64() function, while also allowing\n+ * the derived class to provide more.\n+ *\n+ * The derived class must satisfy the RandomNumberGenerator concept.\n  */\n-class FastRandomContext\n+template<typename T>\n+class RandomMixin\n {\n private:\n-    bool requires_seed;\n-    ChaCha20 rng;\n-\n     uint64_t bitbuf;\n-    int bitbuf_size;\n+    int bitbuf_size{0};\n \n-    void RandomSeed();\n+    /** Access the underlying generator.\n+     *\n+     * This also enforces the RandomNumberGenerator concept. We cannot declare that in the template\n+     * (no template<RandomNumberGenerator T>) because the type isn't fully instantiated yet there.\n+     */\n+    RandomNumberGenerator auto& Impl() { return static_cast<T&>(*this); }\n \n     void FillBitBuffer()\n     {\n-        bitbuf = rand64();\n+        bitbuf = Impl().rand64();\n         bitbuf_size = 64;\n     }\n \n public:\n-    explicit FastRandomContext(bool fDeterministic = false) noexcept;\n-\n-    /** Initialize with explicit seed (only for testing) */\n-    explicit FastRandomContext(const uint256& seed) noexcept;\n+    RandomMixin() noexcept = default;\n \n-    // Do not permit copying a FastRandomContext (move it, or create a new one to get reseeded).\n-    FastRandomContext(const FastRandomContext&) = delete;\n-    FastRandomContext(FastRandomContext&&) = delete;\n-    FastRandomContext& operator=(const FastRandomContext&) = delete;\n+    // Do not permit copying an RNG.\n+    RandomMixin(const RandomMixin&) = delete;\n+    RandomMixin& operator=(const RandomMixin&) = delete;\n \n-    /** Move a FastRandomContext. If the original one is used again, it will be reseeded. */\n-    FastRandomContext& operator=(FastRandomContext&& from) noexcept;\n+    RandomMixin(RandomMixin&& other) noexcept : bitbuf(other.bitbuf), bitbuf_size(other.bitbuf_size)\n+    {\n+        other.bitbuf_size = 0;\n+    }\n \n-    /** Generate a random 64-bit integer. */\n-    uint64_t rand64() noexcept\n+    RandomMixin& operator=(RandomMixin&& other) noexcept",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1619482803",
      "id" : 1619482803,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gh1iz",
      "original_commit_id" : "84dcdac57558c0c72b8f45856965ca3029f1899d",
      "original_line" : 192,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2086514071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619482803/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-29T21:12:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619482803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1620494947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620494947"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n node1 stderr bitcoind: random.h:218: uint64_t RandomMixin<FastRandomContext>::randbits(int) [T = FastRandomContext]: Assertion `bits >= bitbuf_size' failed. \r\n```\r\n\r\nI guess this is a compiler bug. I'll try to take a look here.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-30T11:06:59Z",
      "diff_hunk" : "@@ -215,6 +215,7 @@ class RandomMixin\n             // number becomes the new bitbuf.\n             uint64_t gen = Impl().rand64();\n             ret = (gen << bitbuf_size) | bitbuf;\n+            assert(bits >= bitbuf_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1620494947",
      "id" : 1620494947,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585glspj",
      "original_commit_id" : "6ce883eb1f6eccc80e35a2fc7067c6756b6c3366",
      "original_line" : 218,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2087961384,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620494947/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-30T11:06:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620494947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1620962324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620962324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I tried to track down if/how it could be a race condition, but given that it's in init and all locks seems to be in place, I don't see how that could possibly be the case.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-30T15:32:01Z",
      "diff_hunk" : "@@ -215,6 +215,7 @@ class RandomMixin\n             // number becomes the new bitbuf.\n             uint64_t gen = Impl().rand64();\n             ret = (gen << bitbuf_size) | bitbuf;\n+            assert(bits >= bitbuf_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1620962324",
      "id" : 1620962324,
      "in_reply_to_id" : 1620494947,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gnewU",
      "original_commit_id" : "6ce883eb1f6eccc80e35a2fc7067c6756b6c3366",
      "original_line" : 218,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2088639691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620962324/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-30T15:32:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1620962324",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1621830415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1621830415"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, I can't reproduce it so far. So a corrupt CI machine is more likely.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-31T06:52:10Z",
      "diff_hunk" : "@@ -215,6 +215,7 @@ class RandomMixin\n             // number becomes the new bitbuf.\n             uint64_t gen = Impl().rand64();\n             ret = (gen << bitbuf_size) | bitbuf;\n+            assert(bits >= bitbuf_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1621830415",
      "id" : 1621830415,
      "in_reply_to_id" : 1620494947,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gqysP",
      "original_commit_id" : "6ce883eb1f6eccc80e35a2fc7067c6756b6c3366",
      "original_line" : 218,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2090016295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1621830415/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-31T06:52:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1621830415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1622387886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622387886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Clearing the cache helped, for some reason. (Adding the assert should have already cleared the ccache entry for this translation unit, but now it seems to work :shrug: )",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-31T13:01:33Z",
      "diff_hunk" : "@@ -215,6 +215,7 @@ class RandomMixin\n             // number becomes the new bitbuf.\n             uint64_t gen = Impl().rand64();\n             ret = (gen << bitbuf_size) | bitbuf;\n+            assert(bits >= bitbuf_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1622387886",
      "id" : 1622387886,
      "in_reply_to_id" : 1620494947,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gs6yu",
      "original_commit_id" : "6ce883eb1f6eccc80e35a2fc7067c6756b6c3366",
      "original_line" : 218,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2090780122,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622387886/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-31T13:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622387886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1622525854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622525854"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@theuni Nice idea, done.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-31T14:39:48Z",
      "diff_hunk" : "@@ -135,50 +135,68 @@ void RandAddPeriodic() noexcept;\n  */\n void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */\n+template<typename T>\n+concept RandomNumberGenerator = requires(T& rng, Span<std::byte> s) {\n+    // A random number generator must provide rand64().\n+    { rng.rand64() } noexcept -> std::same_as<uint64_t>;\n+    // A random number generator must provide randfill(Span<std::byte>).\n+    { rng.fillrand(s) } noexcept;\n+    // A random number generator must derive from RandomMixin, which adds other rand* functions.\n+    requires std::derived_from<std::remove_reference_t<T>, RandomMixin<std::remove_reference_t<T>>>;\n+};\n+\n+/** Mixin class that provides helper randomness functions.\n  *\n- * This class is not thread-safe.\n+ * Intended to be used through CRTP: https://en.cppreference.com/w/cpp/language/crtp.\n+ * An RNG class FunkyRNG would derive publicly from RandomMixin<FunkyRNG>. This permits\n+ * RandomMixin from accessing the derived class's rand64() function, while also allowing\n+ * the derived class to provide more.\n+ *\n+ * The derived class must satisfy the RandomNumberGenerator concept.\n  */\n-class FastRandomContext\n+template<typename T>\n+class RandomMixin\n {\n private:\n-    bool requires_seed;\n-    ChaCha20 rng;\n-\n     uint64_t bitbuf;\n-    int bitbuf_size;\n+    int bitbuf_size{0};\n \n-    void RandomSeed();\n+    /** Access the underlying generator.\n+     *\n+     * This also enforces the RandomNumberGenerator concept. We cannot declare that in the template\n+     * (no template<RandomNumberGenerator T>) because the type isn't fully instantiated yet there.\n+     */\n+    RandomNumberGenerator auto& Impl() { return static_cast<T&>(*this); }\n \n     void FillBitBuffer()\n     {\n-        bitbuf = rand64();\n+        bitbuf = Impl().rand64();\n         bitbuf_size = 64;\n     }\n \n public:\n-    explicit FastRandomContext(bool fDeterministic = false) noexcept;\n-\n-    /** Initialize with explicit seed (only for testing) */\n-    explicit FastRandomContext(const uint256& seed) noexcept;\n+    RandomMixin() noexcept = default;\n \n-    // Do not permit copying a FastRandomContext (move it, or create a new one to get reseeded).\n-    FastRandomContext(const FastRandomContext&) = delete;\n-    FastRandomContext(FastRandomContext&&) = delete;\n-    FastRandomContext& operator=(const FastRandomContext&) = delete;\n+    // Do not permit copying an RNG.\n+    RandomMixin(const RandomMixin&) = delete;\n+    RandomMixin& operator=(const RandomMixin&) = delete;\n \n-    /** Move a FastRandomContext. If the original one is used again, it will be reseeded. */\n-    FastRandomContext& operator=(FastRandomContext&& from) noexcept;\n+    RandomMixin(RandomMixin&& other) noexcept : bitbuf(other.bitbuf), bitbuf_size(other.bitbuf_size)\n+    {\n+        other.bitbuf_size = 0;\n+    }\n \n-    /** Generate a random 64-bit integer. */\n-    uint64_t rand64() noexcept\n+    RandomMixin& operator=(RandomMixin&& other) noexcept",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1622525854",
      "id" : 1622525854,
      "in_reply_to_id" : 1619482803,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gtcee",
      "original_commit_id" : "84dcdac57558c0c72b8f45856965ca3029f1899d",
      "original_line" : 192,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2091022522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622525854/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-31T14:39:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622525854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1622999723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622999723"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@maflcko Thanks, problem seems fixed indeed!",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-05-31T22:34:04Z",
      "diff_hunk" : "@@ -215,6 +215,7 @@ class RandomMixin\n             // number becomes the new bitbuf.\n             uint64_t gen = Impl().rand64();\n             ret = (gen << bitbuf_size) | bitbuf;\n+            assert(bits >= bitbuf_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1622999723",
      "id" : 1622999723,
      "in_reply_to_id" : 1620494947,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585gvQKr",
      "original_commit_id" : "6ce883eb1f6eccc80e35a2fc7067c6756b6c3366",
      "original_line" : 218,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2091793613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622999723/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-31T22:34:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1622999723",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1626823379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1626823379"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 309f00b59485454117416dcfcae37e2c675069b7 \"random: Improve RandomMixin::randbits\"\r\n\r\nShould probably include `bits > 64` here since it seems like larger numbers would be problematic below.\r\n\r\n```suggestion\r\n        if (bits >= 64) return Impl().rand64();\r\n```\r\n\r\nOr maybe just assert that `bits` is in range.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T01:54:39Z",
      "diff_hunk" : "@@ -188,31 +182,41 @@ class RandomMixin\n \n     RandomMixin(RandomMixin&& other) noexcept : bitbuf(other.bitbuf), bitbuf_size(other.bitbuf_size)\n     {\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n     }\n \n     RandomMixin& operator=(RandomMixin&& other) noexcept\n     {\n         bitbuf = other.bitbuf;\n         bitbuf_size = other.bitbuf_size;\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n         return *this;\n     }\n \n     /** Generate a random (bits)-bit integer. */\n     uint64_t randbits(int bits) noexcept\n     {\n-        if (bits == 0) {\n-            return 0;\n-        } else if (bits > 32) {\n-            return Impl().rand64() >> (64 - bits);\n-        } else {\n-            if (bitbuf_size < bits) FillBitBuffer();\n-            uint64_t ret = bitbuf & (~uint64_t{0} >> (64 - bits));\n+        // Requests for the full 64 bits are passed through.\n+        if (bits == 64) return Impl().rand64();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1626823379",
      "id" : 1626823379,
      "line" : 200,
      "node_id" : "PRRC_kwDOABII585g91rT",
      "original_commit_id" : "309f00b59485454117416dcfcae37e2c675069b7",
      "original_line" : 200,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 263,
      "pull_request_review_id" : 2097721638,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1626823379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-05T02:17:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1626823379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627554476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627554476"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in 0b92cd2ae4a317be4fe0dfd208017a7d05d1eb2a:\r\n\r\nLooks like this commit is doing several things at once. It may be easier to review if move-only stuff (like moving rand256 and randbytes function bodies to the header file, and removing the explicit template instantiation) was done in a separate prepare commit?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T11:16:24Z",
      "diff_hunk" : "@@ -659,31 +659,13 @@ void FastRandomContext::RandomSeed()\n     requires_seed = false;\n }\n \n-uint256 FastRandomContext::rand256() noexcept\n-{\n-    if (requires_seed) RandomSeed();\n-    uint256 ret;\n-    rng.Keystream(MakeWritableByteSpan(ret));\n-    return ret;\n-}\n-\n-template <typename B>\n-std::vector<B> FastRandomContext::randbytes(size_t len)\n-{\n-    std::vector<B> ret(len);\n-    fillrand(MakeWritableByteSpan(ret));\n-    return ret;\n-}\n-template std::vector<unsigned char> FastRandomContext::randbytes(size_t);\n-template std::vector<std::byte> FastRandomContext::randbytes(size_t);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627554476",
      "id" : 1627554476,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hAoKs",
      "original_commit_id" : "0b92cd2ae4a317be4fe0dfd208017a7d05d1eb2a",
      "original_line" : 678,
      "original_position" : 20,
      "original_start_line" : 662,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2098835816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627554476/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-06-05T13:38:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627554476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627567196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627567196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in 0b92cd2ae4a317be4fe0dfd208017a7d05d1eb2a: Not sure I understand this concept. Is there anything that is not already enforced normally in C++ that would be enforced by this concept?\r\n\r\nFor example, `static_cast` in the `Impl()` method, which enforces this concept should already check for inheritance:\r\n\r\n```\r\n<source>:17:40: error: static_cast from 'Mixin<FRC> *' to 'FRC *', which are not related by inheritance, is not allowed\r\n```\r\n\r\nConversely, if the class wasn't derived from `RandomMixin`, the `RandomMixin::Impl()` method wouldn't be called and this check would be skipped anyway.\r\n\r\nEven when the code is rewritten to C++23 using `__cpp_explicit_this_parameter`, the same should hold.\r\n\r\nSimilarly, calling `rand64`, when it is not provided should also result in a compile failure without this concept.\r\n\r\nI guess it enforces the function signature of `rand64` is noexcept?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T11:24:57Z",
      "diff_hunk" : "@@ -135,50 +135,68 @@ void RandAddPeriodic() noexcept;\n  */\n void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */\n+template<typename T>\n+concept RandomNumberGenerator = requires(T& rng, Span<std::byte> s) {\n+    // A random number generator must provide rand64().\n+    { rng.rand64() } noexcept -> std::same_as<uint64_t>;\n+    // A random number generator must provide randfill(Span<std::byte>).\n+    { rng.fillrand(s) } noexcept;\n+    // A random number generator must derive from RandomMixin, which adds other rand* functions.\n+    requires std::derived_from<std::remove_reference_t<T>, RandomMixin<std::remove_reference_t<T>>>;\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627567196",
      "id" : 1627567196,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hArRc",
      "original_commit_id" : "0b92cd2ae4a317be4fe0dfd208017a7d05d1eb2a",
      "original_line" : 144,
      "original_position" : 20,
      "original_start_line" : 143,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2098835816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627567196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-05T13:38:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627567196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627736240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627736240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unrelated q in 6370a51aac06a430ec53f29fe03f5bbd08371b34: Can you explain where one finds this \"copy()\" method?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T13:08:28Z",
      "diff_hunk" : "@@ -357,6 +357,57 @@ class FastRandomContext : public RandomMixin<FastRandomContext>\n     void fillrand(Span<std::byte> output) noexcept;\n };\n \n+/** xoroshiro128++ PRNG. Extremely fast, not appropriate for cryptographic purposes.\n+ *\n+ * Memory footprint is 128bit, period is 2^128 - 1.\n+ * This class is not thread-safe.\n+ *\n+ * Reference implementation available at https://prng.di.unimi.it/xoroshiro128plusplus.c\n+ * See https://prng.di.unimi.it/\n+ */\n+class XoRoShiRo128PlusPlus\n+{\n+    uint64_t m_s0;\n+    uint64_t m_s1;\n+\n+    [[nodiscard]] constexpr static uint64_t SplitMix64(uint64_t& seedval) noexcept\n+    {\n+        uint64_t z = (seedval += 0x9e3779b97f4a7c15);\n+        z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9;\n+        z = (z ^ (z >> 27)) * 0x94d049bb133111eb;\n+        return z ^ (z >> 31);\n+    }\n+\n+public:\n+    using result_type = uint64_t;\n+\n+    constexpr explicit XoRoShiRo128PlusPlus(uint64_t seedval) noexcept\n+        : m_s0(SplitMix64(seedval)), m_s1(SplitMix64(seedval)) {}\n+\n+    // no copy - that is dangerous, we don't want accidentally copy the RNG and then have two streams\n+    // with exactly the same results. If you need a copy, call copy().",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627736240",
      "id" : 1627736240,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hBUiw",
      "original_commit_id" : "6370a51aac06a430ec53f29fe03f5bbd08371b34",
      "original_line" : 447,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2098835816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627736240/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-05T13:38:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627736240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627796687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627796687"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added an Assume that `bits` is in range.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T13:32:43Z",
      "diff_hunk" : "@@ -188,31 +182,41 @@ class RandomMixin\n \n     RandomMixin(RandomMixin&& other) noexcept : bitbuf(other.bitbuf), bitbuf_size(other.bitbuf_size)\n     {\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n     }\n \n     RandomMixin& operator=(RandomMixin&& other) noexcept\n     {\n         bitbuf = other.bitbuf;\n         bitbuf_size = other.bitbuf_size;\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n         return *this;\n     }\n \n     /** Generate a random (bits)-bit integer. */\n     uint64_t randbits(int bits) noexcept\n     {\n-        if (bits == 0) {\n-            return 0;\n-        } else if (bits > 32) {\n-            return Impl().rand64() >> (64 - bits);\n-        } else {\n-            if (bitbuf_size < bits) FillBitBuffer();\n-            uint64_t ret = bitbuf & (~uint64_t{0} >> (64 - bits));\n+        // Requests for the full 64 bits are passed through.\n+        if (bits == 64) return Impl().rand64();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627796687",
      "id" : 1627796687,
      "in_reply_to_id" : 1626823379,
      "line" : 200,
      "node_id" : "PRRC_kwDOABII585hBjTP",
      "original_commit_id" : "309f00b59485454117416dcfcae37e2c675069b7",
      "original_line" : 200,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 263,
      "pull_request_review_id" : 2099222931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627796687/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-05T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627796687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627807244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627807244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in c099cd2e3c20fc416e3f7fc1da4798bb8042af1c: Could increase the severity to `LogError()` while touching this?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T13:39:18Z",
      "diff_hunk" : "@@ -45,13 +45,15 @@\n #include <sys/auxv.h>\n #endif\n \n-[[noreturn]] static void RandFailure()\n+namespace {\n+\n+[[noreturn]] void RandFailure()\n {\n     LogPrintf(\"Failed to read randomness, aborting\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627807244",
      "id" : 1627807244,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hBl4M",
      "original_commit_id" : "c099cd2e3c20fc416e3f7fc1da4798bb8042af1c",
      "original_line" : 52,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2099240800,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627807244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-05T13:39:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627807244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627821690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627821690"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well in my view, concepts are really a kind of compiler-enforced documentation. Their primary purpose is giving a readable compiler error when template instantiation ought to be failing, but often also would be failing anyway. In this case, someone implementing a new RNG `class FancyRNG : public RandomMixin<FancyRNG>` but say missing `rand64`, would instead of getting an error in the instantiation of `RandomMixin` get an error message that references `RandomNumberGenerator`, which then explicitly lists what one is required to do to make it work.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T13:47:55Z",
      "diff_hunk" : "@@ -135,50 +135,68 @@ void RandAddPeriodic() noexcept;\n  */\n void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */\n+template<typename T>\n+concept RandomNumberGenerator = requires(T& rng, Span<std::byte> s) {\n+    // A random number generator must provide rand64().\n+    { rng.rand64() } noexcept -> std::same_as<uint64_t>;\n+    // A random number generator must provide randfill(Span<std::byte>).\n+    { rng.fillrand(s) } noexcept;\n+    // A random number generator must derive from RandomMixin, which adds other rand* functions.\n+    requires std::derived_from<std::remove_reference_t<T>, RandomMixin<std::remove_reference_t<T>>>;\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627821690",
      "id" : 1627821690,
      "in_reply_to_id" : 1627567196,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hBpZ6",
      "original_commit_id" : "0b92cd2ae4a317be4fe0dfd208017a7d05d1eb2a",
      "original_line" : 144,
      "original_position" : 20,
      "original_start_line" : 143,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2099264027,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627821690/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-05T13:48:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627821690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627952167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627952167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Did you really push it? https://github.com/bitcoin/bitcoin/compare/a92e28e852f213c522df9858e240470299e4ecaa..471d27d5d740f82fd9f51a6e909a8ae3bdd75828 says no changes.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T14:59:08Z",
      "diff_hunk" : "@@ -188,31 +182,41 @@ class RandomMixin\n \n     RandomMixin(RandomMixin&& other) noexcept : bitbuf(other.bitbuf), bitbuf_size(other.bitbuf_size)\n     {\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n     }\n \n     RandomMixin& operator=(RandomMixin&& other) noexcept\n     {\n         bitbuf = other.bitbuf;\n         bitbuf_size = other.bitbuf_size;\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n         return *this;\n     }\n \n     /** Generate a random (bits)-bit integer. */\n     uint64_t randbits(int bits) noexcept\n     {\n-        if (bits == 0) {\n-            return 0;\n-        } else if (bits > 32) {\n-            return Impl().rand64() >> (64 - bits);\n-        } else {\n-            if (bitbuf_size < bits) FillBitBuffer();\n-            uint64_t ret = bitbuf & (~uint64_t{0} >> (64 - bits));\n+        // Requests for the full 64 bits are passed through.\n+        if (bits == 64) return Impl().rand64();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627952167",
      "id" : 1627952167,
      "in_reply_to_id" : 1626823379,
      "line" : 200,
      "node_id" : "PRRC_kwDOABII585hCJQn",
      "original_commit_id" : "309f00b59485454117416dcfcae37e2c675069b7",
      "original_line" : 200,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 263,
      "pull_request_review_id" : 2099479013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627952167/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-05T14:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627952167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627952472"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627952472"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, fair enough.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-05T14:59:19Z",
      "diff_hunk" : "@@ -135,50 +135,68 @@ void RandAddPeriodic() noexcept;\n  */\n void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */\n+template<typename T>\n+concept RandomNumberGenerator = requires(T& rng, Span<std::byte> s) {\n+    // A random number generator must provide rand64().\n+    { rng.rand64() } noexcept -> std::same_as<uint64_t>;\n+    // A random number generator must provide randfill(Span<std::byte>).\n+    { rng.fillrand(s) } noexcept;\n+    // A random number generator must derive from RandomMixin, which adds other rand* functions.\n+    requires std::derived_from<std::remove_reference_t<T>, RandomMixin<std::remove_reference_t<T>>>;\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1627952472",
      "id" : 1627952472,
      "in_reply_to_id" : 1627567196,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hCJVY",
      "original_commit_id" : "0b92cd2ae4a317be4fe0dfd208017a7d05d1eb2a",
      "original_line" : 144,
      "original_position" : 20,
      "original_start_line" : 143,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2099479485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627952472/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-05T14:59:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1627952472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632035840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632035840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added a few preparatory commits before this one, please have a look.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T12:25:01Z",
      "diff_hunk" : "@@ -659,31 +659,13 @@ void FastRandomContext::RandomSeed()\n     requires_seed = false;\n }\n \n-uint256 FastRandomContext::rand256() noexcept\n-{\n-    if (requires_seed) RandomSeed();\n-    uint256 ret;\n-    rng.Keystream(MakeWritableByteSpan(ret));\n-    return ret;\n-}\n-\n-template <typename B>\n-std::vector<B> FastRandomContext::randbytes(size_t len)\n-{\n-    std::vector<B> ret(len);\n-    fillrand(MakeWritableByteSpan(ret));\n-    return ret;\n-}\n-template std::vector<unsigned char> FastRandomContext::randbytes(size_t);\n-template std::vector<std::byte> FastRandomContext::randbytes(size_t);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632035840",
      "id" : 1632035840,
      "in_reply_to_id" : 1627554476,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hRuQA",
      "original_commit_id" : "0b92cd2ae4a317be4fe0dfd208017a7d05d1eb2a",
      "original_line" : 678,
      "original_position" : 20,
      "original_start_line" : 662,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2105840678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632035840/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-06-08T12:25:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632035840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632036023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632036023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, in an additional commit.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T12:26:13Z",
      "diff_hunk" : "@@ -45,13 +45,15 @@\n #include <sys/auxv.h>\n #endif\n \n-[[noreturn]] static void RandFailure()\n+namespace {\n+\n+[[noreturn]] void RandFailure()\n {\n     LogPrintf(\"Failed to read randomness, aborting\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632036023",
      "id" : 1632036023,
      "in_reply_to_id" : 1627807244,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hRuS3",
      "original_commit_id" : "c099cd2e3c20fc416e3f7fc1da4798bb8042af1c",
      "original_line" : 52,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2105840815,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632036023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-08T12:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632036023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632043452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632043452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems I did not. Done now.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T13:24:05Z",
      "diff_hunk" : "@@ -188,31 +182,41 @@ class RandomMixin\n \n     RandomMixin(RandomMixin&& other) noexcept : bitbuf(other.bitbuf), bitbuf_size(other.bitbuf_size)\n     {\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n     }\n \n     RandomMixin& operator=(RandomMixin&& other) noexcept\n     {\n         bitbuf = other.bitbuf;\n         bitbuf_size = other.bitbuf_size;\n+        other.bitbuf = 0;\n         other.bitbuf_size = 0;\n         return *this;\n     }\n \n     /** Generate a random (bits)-bit integer. */\n     uint64_t randbits(int bits) noexcept\n     {\n-        if (bits == 0) {\n-            return 0;\n-        } else if (bits > 32) {\n-            return Impl().rand64() >> (64 - bits);\n-        } else {\n-            if (bitbuf_size < bits) FillBitBuffer();\n-            uint64_t ret = bitbuf & (~uint64_t{0} >> (64 - bits));\n+        // Requests for the full 64 bits are passed through.\n+        if (bits == 64) return Impl().rand64();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632043452",
      "id" : 1632043452,
      "in_reply_to_id" : 1626823379,
      "line" : 200,
      "node_id" : "PRRC_kwDOABII585hRwG8",
      "original_commit_id" : "309f00b59485454117416dcfcae37e2c675069b7",
      "original_line" : 200,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : 263,
      "pull_request_review_id" : 2105847687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632043452/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-08T13:24:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632043452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632043992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632043992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It was added in #26153, with a commit originally taken from #25325. I assume it originally had an explicit `copy()` member function, which was removed before merge. I've added a commit to remove it.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T13:28:38Z",
      "diff_hunk" : "@@ -357,6 +357,57 @@ class FastRandomContext : public RandomMixin<FastRandomContext>\n     void fillrand(Span<std::byte> output) noexcept;\n };\n \n+/** xoroshiro128++ PRNG. Extremely fast, not appropriate for cryptographic purposes.\n+ *\n+ * Memory footprint is 128bit, period is 2^128 - 1.\n+ * This class is not thread-safe.\n+ *\n+ * Reference implementation available at https://prng.di.unimi.it/xoroshiro128plusplus.c\n+ * See https://prng.di.unimi.it/\n+ */\n+class XoRoShiRo128PlusPlus\n+{\n+    uint64_t m_s0;\n+    uint64_t m_s1;\n+\n+    [[nodiscard]] constexpr static uint64_t SplitMix64(uint64_t& seedval) noexcept\n+    {\n+        uint64_t z = (seedval += 0x9e3779b97f4a7c15);\n+        z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9;\n+        z = (z ^ (z >> 27)) * 0x94d049bb133111eb;\n+        return z ^ (z >> 31);\n+    }\n+\n+public:\n+    using result_type = uint64_t;\n+\n+    constexpr explicit XoRoShiRo128PlusPlus(uint64_t seedval) noexcept\n+        : m_s0(SplitMix64(seedval)), m_s1(SplitMix64(seedval)) {}\n+\n+    // no copy - that is dangerous, we don't want accidentally copy the RNG and then have two streams\n+    // with exactly the same results. If you need a copy, call copy().",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632043992",
      "id" : 1632043992,
      "in_reply_to_id" : 1627736240,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hRwPY",
      "original_commit_id" : "6370a51aac06a430ec53f29fe03f5bbd08371b34",
      "original_line" : 447,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2105848133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632043992/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-08T13:28:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632043992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've rebased on top of the now-merged #30161, and believe I've addressed outstanding comments.",
      "created_at" : "2024-06-08T13:29:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2156037857",
      "id" : 2156037857,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII586Agobh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2156037857/reactions"
      },
      "updated_at" : "2024-06-08T13:29:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2156037857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632130266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632130266"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the change from milliseconds to microseconds intentional?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T23:14:46Z",
      "diff_hunk" : "@@ -3475,7 +3475,8 @@ std::vector<CAddress> CConnman::GetAddresses(CNode& requestor, size_t max_addres\n         // nodes to be \"terrible\" (see IsTerrible()) if the timestamps are older than 30 days,\n         // max. 24 hours of \"penalty\" due to cache shouldn't make any meaningful difference\n         // in terms of the freshness of the response.\n-        cache_entry.m_cache_entry_expiration = current_time + std::chrono::hours(21) + GetRandMillis(std::chrono::hours(6));\n+        cache_entry.m_cache_entry_expiration = current_time +\n+            21h + FastRandomContext().randrange<std::chrono::microseconds>(6h);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632130266",
      "id" : 1632130266,
      "line" : 3479,
      "node_id" : "PRRC_kwDOABII585hSFTa",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 3479,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 41,
      "pull_request_review_id" : 2105998276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632130266/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T00:14:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632130266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632131052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632131052"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Why not rand_exp_duration instead? It is one character shorter and `exp` reads more clearly to me as exponential than `expo`?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T23:22:40Z",
      "diff_hunk" : "@@ -50,207 +51,417 @@\n  *   - Strengthen the entropy for 10 ms using repeated SHA512.\n  *   This is run once every minute.\n  *\n- * On first use of the RNG (regardless of what function is called first), all entropy\n- * sources used in the 'slow' seeder are included, but also:\n- * - 256 bits from the hardware RNG (rdseed or rdrand) when available.\n- * - Dynamic environment data (performance monitoring, ...)\n- * - Static environment data\n- * - Strengthen the entropy for 100 ms using repeated SHA512.\n+ * - On first use of the RNG (regardless of what function is called first), all entropy\n+ *   sources used in the 'slow' seeder are included, but also:\n+ *   - 256 bits from the hardware RNG (rdseed or rdrand) when available.\n+ *   - Dynamic environment data (performance monitoring, ...)\n+ *   - Static environment data\n+ *   - Strengthen the entropy for 100 ms using repeated SHA512.\n  *\n  * When mixing in new entropy, H = SHA512(entropy || old_rng_state) is computed, and\n  * (up to) the first 32 bytes of H are produced as output, while the last 32 bytes\n  * become the new RNG state.\n */\n \n+\n+/* ============================= INITIALIZATION AND ADDING ENTROPY ============================= */\n+\n /**\n- * Generate random data via the internal PRNG.\n+ * Initialize global RNG state and log any CPU features that are used.\n  *\n- * These functions are designed to be fast (sub microsecond), but do not necessarily\n- * meaningfully add entropy to the PRNG state.\n+ * Calling this function is optional. RNG state will be initialized when first\n+ * needed if it is not called.\n+ */\n+void RandomInit();\n+\n+/**\n+ * Gather entropy from various expensive sources, and feed them to the PRNG state.\n  *\n  * Thread-safe.\n  */\n-void GetRandBytes(Span<unsigned char> bytes) noexcept;\n-/** Generate a uniform random integer in the range [0..range). Precondition: range > 0 */\n-uint64_t GetRandInternal(uint64_t nMax) noexcept;\n-/** Generate a uniform random integer of type T in the range [0..nMax)\n- *  nMax defaults to std::numeric_limits<T>::max()\n- *  Precondition: nMax > 0, T is an integral type, no larger than uint64_t\n- */\n-template<typename T>\n-T GetRand(T nMax=std::numeric_limits<T>::max()) noexcept {\n-    static_assert(std::is_integral<T>(), \"T must be integral\");\n-    static_assert(std::numeric_limits<T>::max() <= std::numeric_limits<uint64_t>::max(), \"GetRand only supports up to uint64_t\");\n-    return T(GetRandInternal(nMax));\n-}\n-/** Generate a uniform random duration in the range [0..max). Precondition: max.count() > 0 */\n-template <typename D>\n-D GetRandomDuration(typename std::common_type<D>::type max) noexcept\n-// Having the compiler infer the template argument from the function argument\n-// is dangerous, because the desired return value generally has a different\n-// type than the function argument. So std::common_type is used to force the\n-// call site to specify the type of the return value.\n-{\n-    assert(max.count() > 0);\n-    return D{GetRand(max.count())};\n-};\n-constexpr auto GetRandMicros = GetRandomDuration<std::chrono::microseconds>;\n-constexpr auto GetRandMillis = GetRandomDuration<std::chrono::milliseconds>;\n+void RandAddPeriodic() noexcept;\n \n /**\n- * Return a timestamp in the future sampled from an exponential distribution\n- * (https://en.wikipedia.org/wiki/Exponential_distribution). This distribution\n- * is memoryless and should be used for repeated network events (e.g. sending a\n- * certain type of message) to minimize leaking information to observers.\n+ * Gathers entropy from the low bits of the time at which events occur. Should\n+ * be called with a uint32_t describing the event at the time an event occurs.\n  *\n- * The probability of an event occurring before time x is 1 - e^-(x/a) where a\n- * is the average interval between events.\n- * */\n-std::chrono::microseconds GetExponentialRand(std::chrono::microseconds now, std::chrono::seconds average_interval);\n+ * Thread-safe.\n+ */\n+void RandAddEvent(const uint32_t event_info) noexcept;\n+\n \n-uint256 GetRandHash() noexcept;\n+/* =========================== BASE RANDOMNESS GENERATION FUNCTIONS ===========================\n+ *\n+ * All produced randomness is eventually generated by one of these functions.\n+ */\n \n /**\n- * Gather entropy from various sources, feed it into the internal PRNG, and\n- * generate random data using it.\n+ * Generate random data via the internal PRNG.\n  *\n- * This function will cause failure whenever the OS RNG fails.\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaningfully add entropy to the PRNG state.\n+ *\n+ * In test mode (see SeedRandomForTest in src/test/util/random.h), the normal PRNG state is\n+ * bypassed, and a deterministic, seeded, PRNG is used instead.\n  *\n  * Thread-safe.\n  */\n-void GetStrongRandBytes(Span<unsigned char> bytes) noexcept;\n+void GetRandBytes(Span<unsigned char> bytes) noexcept;\n \n /**\n- * Gather entropy from various expensive sources, and feed them to the PRNG state.\n+ * Gather entropy from various sources, feed it into the internal PRNG, and\n+ * generate random data using it.\n+ *\n+ * This function will cause failure whenever the OS RNG fails.\n+ *\n+ * The normal PRNG is never bypassed here, even in test mode.\n  *\n  * Thread-safe.\n  */\n-void RandAddPeriodic() noexcept;\n+void GetStrongRandBytes(Span<unsigned char> bytes) noexcept;\n \n-/**\n- * Gathers entropy from the low bits of the time at which events occur. Should\n- * be called with a uint32_t describing the event at the time an event occurs.\n+\n+/* ============================= RANDOM NUMBER GENERATION CLASSES =============================\n  *\n- * Thread-safe.\n+ * In this section, 3 classes are defined:\n+ * - RandomMixin:            a base class that adds functionality to all RNG classes.\n+ * - FastRandomContext:      a cryptographic RNG (seeded through GetRandBytes in its default\n+ *                           constructor).\n+ * - InsecureRandomContext:  a non-cryptographic, very fast, RNG.\n  */\n-void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */\n+template<typename T>\n+concept RandomNumberGenerator = requires(T& rng, Span<std::byte> s) {\n+    // A random number generator must provide rand64().\n+    { rng.rand64() } noexcept -> std::same_as<uint64_t>;\n+    // A random number generator must derive from RandomMixin, which adds other rand* functions.\n+    requires std::derived_from<std::remove_reference_t<T>, RandomMixin<std::remove_reference_t<T>>>;\n+};\n+\n+/** A concept for C++ std::chrono durations. */\n+template<typename T>\n+concept StdChronoDuration = requires {\n+    []<class Rep, class Period>(std::type_identity<std::chrono::duration<Rep, Period>>){}(\n+        std::type_identity<T>());\n+};\n+\n+/** Given a uniformly random 64-bit value uniform, return an exponentially distributed value with mean 1. */\n+double MakeExponentiallyDistributed(uint64_t uniform) noexcept;\n+\n+/** Mixin class that provides helper randomness functions.\n  *\n- * This class is not thread-safe.\n+ * Intended to be used through CRTP: https://en.cppreference.com/w/cpp/language/crtp.\n+ * An RNG class FunkyRNG would derive publicly from RandomMixin<FunkyRNG>. This permits\n+ * RandomMixin from accessing the derived class's rand64() function, while also allowing\n+ * the derived class to provide more.\n+ *\n+ * The derived class must satisfy the RandomNumberGenerator concept.\n  */\n-class FastRandomContext\n+template<typename T>\n+class RandomMixin\n {\n private:\n-    bool requires_seed;\n-    ChaCha20 rng;\n-\n-    uint64_t bitbuf;\n-    int bitbuf_size;\n+    uint64_t bitbuf{0};\n+    int bitbuf_size{0};\n \n-    void RandomSeed();\n+    /** Access the underlying generator.\n+     *\n+     * This also enforces the RandomNumberGenerator concept. We cannot declare that in the template\n+     * (no template<RandomNumberGenerator T>) because the type isn't fully instantiated yet there.\n+     */\n+    RandomNumberGenerator auto& Impl() noexcept { return static_cast<T&>(*this); }\n \n-    void FillBitBuffer()\n+protected:\n+    constexpr void FlushCache() noexcept\n     {\n-        bitbuf = rand64();\n-        bitbuf_size = 64;\n+        bitbuf = 0;\n+        bitbuf_size = 0;\n     }\n \n public:\n-    explicit FastRandomContext(bool fDeterministic = false) noexcept;\n-\n-    /** Initialize with explicit seed (only for testing) */\n-    explicit FastRandomContext(const uint256& seed) noexcept;\n-\n-    // Do not permit copying a FastRandomContext (move it, or create a new one to get reseeded).\n-    FastRandomContext(const FastRandomContext&) = delete;\n-    FastRandomContext(FastRandomContext&&) = delete;\n-    FastRandomContext& operator=(const FastRandomContext&) = delete;\n+    constexpr RandomMixin() noexcept = default;\n \n-    /** Move a FastRandomContext. If the original one is used again, it will be reseeded. */\n-    FastRandomContext& operator=(FastRandomContext&& from) noexcept;\n-\n-    /** Generate a random 64-bit integer. */\n-    uint64_t rand64() noexcept\n-    {\n-        if (requires_seed) RandomSeed();\n-        std::array<std::byte, 8> buf;\n-        rng.Keystream(buf);\n-        return ReadLE64(UCharCast(buf.data()));\n-    }\n+    // Do not permit copying or moving an RNG.\n+    RandomMixin(const RandomMixin&) = delete;\n+    RandomMixin& operator=(const RandomMixin&) = delete;\n+    RandomMixin(RandomMixin&&) = delete;\n+    RandomMixin& operator=(RandomMixin&&) = delete;\n \n     /** Generate a random (bits)-bit integer. */\n     uint64_t randbits(int bits) noexcept\n     {\n-        if (bits == 0) {\n-            return 0;\n-        } else if (bits > 32) {\n-            return rand64() >> (64 - bits);\n-        } else {\n-            if (bitbuf_size < bits) FillBitBuffer();\n-            uint64_t ret = bitbuf & (~uint64_t{0} >> (64 - bits));\n+        Assume(bits <= 64);\n+        // Requests for the full 64 bits are passed through.\n+        if (bits == 64) return Impl().rand64();\n+        uint64_t ret;\n+        if (bits <= bitbuf_size) {\n+            // If there is enough entropy left in bitbuf, return its bottom bits bits.\n+            ret = bitbuf;\n             bitbuf >>= bits;\n             bitbuf_size -= bits;\n+        } else {\n+            // If not, return all of bitbuf, supplemented with the (bits - bitbuf_size) bottom\n+            // bits of a newly generated 64-bit number on top. The remainder of that generated\n+            // number becomes the new bitbuf.\n+            uint64_t gen = Impl().rand64();\n+            ret = (gen << bitbuf_size) | bitbuf;\n+            bitbuf = gen >> (bits - bitbuf_size);\n+            bitbuf_size = 64 + bitbuf_size - bits;\n+        }\n+        // Return the bottom bits bits of ret.\n+        return ret & ((uint64_t{1} << bits) - 1);\n+    }\n+\n+    /** Same as above, but with compile-time fixed bits count. */\n+    template<int Bits>\n+    uint64_t randbits() noexcept\n+    {\n+        static_assert(Bits >= 0 && Bits <= 64);\n+        if constexpr (Bits == 0) {\n+            return 0;\n+        } else if constexpr (Bits == 64) {\n+            return Impl().rand64();\n+        } else if constexpr (Bits == 1) {\n+            uint64_t ret;\n+            if (bitbuf_size == 0) {\n+                bitbuf = Impl().rand64();\n+                bitbuf_size = 64;\n+            }\n+            ret = bitbuf & 1;\n+            bitbuf >>= 1;\n+            bitbuf_size -= 1;\n             return ret;\n+        } else {\n+            uint64_t ret;\n+            if (Bits <= bitbuf_size) {\n+                ret = bitbuf;\n+                bitbuf >>= Bits;\n+                bitbuf_size -= Bits;\n+            } else {\n+                uint64_t gen = Impl().rand64();\n+                ret = (gen << bitbuf_size) | bitbuf;\n+                bitbuf = gen >> (Bits - bitbuf_size);\n+                bitbuf_size = 64 + bitbuf_size - Bits;\n+            }\n+            constexpr uint64_t MASK = (uint64_t{1} << Bits) - 1;\n+            return ret & MASK;\n         }\n     }\n \n-    /** Generate a random integer in the range [0..range).\n-     * Precondition: range > 0.\n-     */\n-    uint64_t randrange(uint64_t range) noexcept\n+    /** Generate a random integer in the range [0..range), with range > 0. */\n+    template<std::integral I>\n+    I randrange(I range) noexcept\n     {\n-        assert(range);\n-        --range;\n-        int bits = std::bit_width(range);\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max());\n+        Assume(range > 0);\n+        uint64_t maxval = range - 1U;\n+        int bits = std::bit_width(maxval);\n         while (true) {\n-            uint64_t ret = randbits(bits);\n-            if (ret <= range) return ret;\n+            uint64_t ret = Impl().randbits(bits);\n+            if (ret <= maxval) return ret;\n         }\n     }\n \n-    /** Generate random bytes. */\n-    template <typename B = unsigned char>\n-    std::vector<B> randbytes(size_t len);\n+    /** Fill a Span with random bytes. */\n+    void fillrand(Span<std::byte> span) noexcept\n+    {\n+        while (span.size() >= 8) {\n+            uint64_t gen = Impl().rand64();\n+            WriteLE64(UCharCast(span.data()), gen);\n+            span = span.subspan(8);\n+        }\n+        if (span.size() >= 4) {\n+            uint32_t gen = Impl().rand32();\n+            WriteLE32(UCharCast(span.data()), gen);\n+            span = span.subspan(4);\n+        }\n+        while (span.size()) {\n+            span[0] = std::byte(Impl().template randbits<8>());\n+            span = span.subspan(1);\n+        }\n+    }\n+\n+    /** Generate a random integer in its entire (non-negative) range. */\n+    template<std::integral I>\n+    I rand() noexcept\n+    {\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max());\n+        static constexpr auto BITS = std::bit_width(uint64_t(std::numeric_limits<I>::max()));\n+        static_assert(std::numeric_limits<I>::max() == std::numeric_limits<uint64_t>::max() >> (64 - BITS));\n+        return I(Impl().template randbits<BITS>());\n+    }\n \n-    /** Fill a byte Span with random bytes. */\n-    void fillrand(Span<std::byte> output);\n+    /** Generate random bytes. */\n+    template <BasicByte B = unsigned char>\n+    std::vector<B> randbytes(size_t len) noexcept\n+    {\n+        std::vector<B> ret(len);\n+        Impl().fillrand(MakeWritableByteSpan(ret));\n+        return ret;\n+    }\n \n     /** Generate a random 32-bit integer. */\n-    uint32_t rand32() noexcept { return randbits(32); }\n+    uint32_t rand32() noexcept { return Impl().template randbits<32>(); }\n \n     /** generate a random uint256. */\n-    uint256 rand256() noexcept;\n+    uint256 rand256() noexcept\n+    {\n+        uint256 ret;\n+        Impl().fillrand(MakeWritableByteSpan(ret));\n+        return ret;\n+    }\n \n     /** Generate a random boolean. */\n-    bool randbool() noexcept { return randbits(1); }\n+    bool randbool() noexcept { return Impl().template randbits<1>(); }\n \n     /** Return the time point advanced by a uniform random duration. */\n     template <typename Tp>\n-    Tp rand_uniform_delay(const Tp& time, typename Tp::duration range)\n+    Tp rand_uniform_delay(const Tp& time, typename Tp::duration range) noexcept\n     {\n-        return time + rand_uniform_duration<Tp>(range);\n+        return time + Impl().template rand_uniform_duration<Tp>(range);\n     }\n \n     /** Generate a uniform random duration in the range from 0 (inclusive) to range (exclusive). */\n-    template <typename Chrono>\n+    template <typename Chrono> requires StdChronoDuration<typename Chrono::duration>\n     typename Chrono::duration rand_uniform_duration(typename Chrono::duration range) noexcept\n     {\n         using Dur = typename Chrono::duration;\n-        return range.count() > 0 ? /* interval [0..range) */ Dur{randrange(range.count())} :\n-               range.count() < 0 ? /* interval (range..0] */ -Dur{randrange(-range.count())} :\n+        return range.count() > 0 ? /* interval [0..range) */ Dur{Impl().randrange(range.count())} :\n+               range.count() < 0 ? /* interval (range..0] */ -Dur{Impl().randrange(-range.count())} :\n                                    /* interval [0..0] */ Dur{0};\n     };\n \n+    /** Generate a uniform random duration in the range [0..max). Precondition: max.count() > 0 */\n+    template <StdChronoDuration Dur>\n+    Dur randrange(typename std::common_type_t<Dur> range) noexcept\n+    // Having the compiler infer the template argument from the function argument\n+    // is dangerous, because the desired return value generally has a different\n+    // type than the function argument. So std::common_type is used to force the\n+    // call site to specify the type of the return value.\n+    {\n+        return Dur{Impl().randrange(range.count())};\n+    }\n+\n+    /**\n+     * Return a duration sampled from an exponential distribution\n+     * (https://en.wikipedia.org/wiki/Exponential_distribution). Successive events\n+     * whose intervals are distributed according to this form a memoryless Poisson\n+     * process. This should be used for repeated network events (e.g. sending a\n+     * certain type of message) to minimize leaking information to observers.\n+     *\n+     * The probability of an event occurring before time x is 1 - e^-(x/a) where a\n+     * is the average interval between events.\n+     * */\n+    std::chrono::microseconds rand_expo_duration(std::chrono::microseconds mean) noexcept",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632131052",
      "id" : 1632131052,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSFfs",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 360,
      "original_position" : 445,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2105998276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632131052/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T00:14:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632131052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632132631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632132631"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As far as I can tell GetOSRand is unchanged in this PR. Why move below the `class RNGState` declaration? ",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T23:38:44Z",
      "diff_hunk" : "@@ -345,64 +348,6 @@ static void Strengthen(const unsigned char (&seed)[32], SteadyClock::duration du\n }\n #endif\n \n-/** Get 32 bytes of system entropy. */\n-void GetOSRand(unsigned char *ent32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632132631",
      "id" : 1632132631,
      "line" : 349,
      "node_id" : "PRRC_kwDOABII585hSF4X",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 349,
      "original_position" : 164,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : 164,
      "pull_request_review_id" : 2105998276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632132631/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T00:14:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632132631",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632133792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632133792"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This confused me because MixExtract is a deterministic function based on hasher, m_counter, and m_state. Unless I am mistaken the non-determinism comes from the calling function determining on the value of ret. Why not address strengthen ret value in the calling function rather than here?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T23:49:32Z",
      "diff_hunk" : "@@ -457,11 +406,21 @@ class RNGState {\n         m_events_hasher.Write(events_hash, 32);\n     }\n \n+    /** Make the output of MixExtract (if allow_deterministic) deterministic, with specified seed. */\n+    void MakeDeterministic(const uint256& seed) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_deterministic_prng.emplace(MakeByteSpan(seed));\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n+     *\n+     * If allow_deterministic is true, and MakeDeterministic has been called before, output\n+     * from the deterministic PRNG is output instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632133792",
      "id" : 1632133792,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSGKg",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 421,
      "original_position" : 251,
      "original_start_line" : 420,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2105998276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632133792/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-09T00:14:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632133792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632133956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632133956"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n     * If allow_deterministic is true, and MakeDeterministic has been called before, output\r\n     * from the deterministic PRNG.\r\n```",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T23:51:28Z",
      "diff_hunk" : "@@ -457,11 +406,21 @@ class RNGState {\n         m_events_hasher.Write(events_hash, 32);\n     }\n \n+    /** Make the output of MixExtract (if allow_deterministic) deterministic, with specified seed. */\n+    void MakeDeterministic(const uint256& seed) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_deterministic_prng.emplace(MakeByteSpan(seed));\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n+     *\n+     * If allow_deterministic is true, and MakeDeterministic has been called before, output\n+     * from the deterministic PRNG is output instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632133956",
      "id" : 1632133956,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSGNE",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 421,
      "original_position" : 251,
      "original_start_line" : 420,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2105998276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632133956/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-09T00:14:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632133956",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632134959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632134959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If I am understanding this logic correctly, if `m_deterministic_prng.has_value()` is true then MixExtract in SeedStrengthen will never use m_counter or m_state to do MixExtract? \r\n\r\nStrengthen is going to make the output of this call non-deterministic anyways, so what value does `allow_deterministic=true` as an argument provide in MixExtract? Shouldn't this be false?\r\n\r\nIs the intention to make Strengthen deterministic at some later point?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-08T23:59:53Z",
      "diff_hunk" : "@@ -549,16 +514,16 @@ static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n }\n \n /** Extract entropy from rng, strengthen it, and feed it into hasher. */\n-static void SeedStrengthen(CSHA512& hasher, RNGState& rng, SteadyClock::duration dur) noexcept\n+void SeedStrengthen(CSHA512& hasher, RNGState& rng, SteadyClock::duration dur) noexcept\n {\n     // Generate 32 bytes of entropy from the RNG, and a copy of the entropy already in hasher.\n     unsigned char strengthen_seed[32];\n-    rng.MixExtract(strengthen_seed, sizeof(strengthen_seed), CSHA512(hasher), false);\n+    rng.MixExtract(strengthen_seed, sizeof(strengthen_seed), CSHA512(hasher), false, /*allow_deterministic=*/true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632134959",
      "id" : 1632134959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSGcv",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 521,
      "original_position" : 314,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2105998276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632134959/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T00:17:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632134959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632135242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632135242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Does `allow_deterministic=false` and `m_deterministic_prng.has_value()=true` imply that something has gone wrong? Should we log an error or take some action or are there cases where this is expected behavior?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T00:02:49Z",
      "diff_hunk" : "@@ -479,6 +438,13 @@ class RNGState {\n             hasher.Finalize(buf);\n             // Store the last 32 bytes of the hash output as new RNG state.\n             memcpy(m_state, buf + 32, 32);\n+            // Handle requests for deterministic randomness.\n+            if (allow_deterministic && m_deterministic_prng.has_value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632135242",
      "id" : 1632135242,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSGhK",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 442,
      "original_position" : 263,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2105998276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632135242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T00:14:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632135242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632256491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632256491"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is done in commit e5658e7a40f03b0b07b1f83f22a9d834bc8fd5c6 which only improves the code organization. Specifically here the reason for moving is to have all the non-exposed functions in `random.cpp` within one anonymous `namespace` at the start of the file, and all public one below.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T12:24:02Z",
      "diff_hunk" : "@@ -345,64 +348,6 @@ static void Strengthen(const unsigned char (&seed)[32], SteadyClock::duration du\n }\n #endif\n \n-/** Get 32 bytes of system entropy. */\n-void GetOSRand(unsigned char *ent32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632256491",
      "id" : 1632256491,
      "in_reply_to_id" : 1632132631,
      "line" : 349,
      "node_id" : "PRRC_kwDOABII585hSkHr",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 349,
      "original_position" : 164,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : 164,
      "pull_request_review_id" : 2106167263,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632256491/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T12:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632256491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632268413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632268413"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see how this is confusing; `MixExtract` is indeed a deterministic function, and arguably, all of `RNGState` is deterministic when considered in isolation.\r\n\r\nThe \"determinism\" referred here is the introduction of a new deterministic mode for the entire RNG (module-wide, including seeding/initializations/hardware, ...). In order to do that, a separate RNG is embedded within `RNGState` which is only ever explicitly initialized, and if it is, `MixExtract` can be asked to draw its output from there instead of from its normal SHA512-based mechanism. The entropy fed to `MixExtract` is still processed normally in this case because for some purposes (cryptographic keys) I think we always want normal high-quality randomness for belt-and-suspenders reasons. Finally, all of this is done inside `MixExtract` instead of elsewhere so that the same lock can be used for everything (`RNGState::m_mutex`), meaning the performance penalty of introducing this mechanism is limited to the `if (allow_deterministic && m_deterministic_prng.has_value())` conditional, which involves no atomics or locks.\r\n\r\nSo really I think we want to call the RNG-wide name for this feature \"deterministic mode\" (e.g. at `ProcRand`), but maybe using the same name at the level of `RNGState` is confusing? Would it help to call it call it something else?",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T12:37:04Z",
      "diff_hunk" : "@@ -457,11 +406,21 @@ class RNGState {\n         m_events_hasher.Write(events_hash, 32);\n     }\n \n+    /** Make the output of MixExtract (if allow_deterministic) deterministic, with specified seed. */\n+    void MakeDeterministic(const uint256& seed) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_deterministic_prng.emplace(MakeByteSpan(seed));\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n+     *\n+     * If allow_deterministic is true, and MakeDeterministic has been called before, output\n+     * from the deterministic PRNG is output instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632268413",
      "id" : 1632268413,
      "in_reply_to_id" : 1632133792,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSnB9",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 421,
      "original_position" : 251,
      "original_start_line" : 420,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2106177477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632268413/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-09T13:14:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632268413",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632290445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632290445"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmm. The intent was that this is supported behavior; `GetStrongRandBytes()` never sets `allow_deterministic`, and thus in deterministic mode would still return from the normal fully-seeded RNG (because I don't want to introduce anything in the code path of `GetStrongRandBytes` that could return anything but high quality randomness). This means that if `GetStrongRandBytes` is called anywhere in test code that enables deterministic randomness, the condition you state occurs.\r\n\r\nIt's probably possible to instead make the behavior to abort if `allow_deterministic=false` and `m_deterministic_prng.has_value()=true`, but it would involve going over all cases where tests use `GetStrongRandBytes` (directly, or indirectly). I don't think I want to do that in this PR.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T13:06:51Z",
      "diff_hunk" : "@@ -479,6 +438,13 @@ class RNGState {\n             hasher.Finalize(buf);\n             // Store the last 32 bytes of the hash output as new RNG state.\n             memcpy(m_state, buf + 32, 32);\n+            // Handle requests for deterministic randomness.\n+            if (allow_deterministic && m_deterministic_prng.has_value()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632290445",
      "id" : 1632290445,
      "in_reply_to_id" : 1632135242,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSsaN",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 442,
      "original_position" : 263,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2106208213,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632290445/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T13:07:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632290445",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632292752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632292752"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, because `m_cache_entry_expiration` is expressed in microseconds anyway; no need to reduce accuracy. I've moved the behavior change to a separate commit.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T13:09:17Z",
      "diff_hunk" : "@@ -3475,7 +3475,8 @@ std::vector<CAddress> CConnman::GetAddresses(CNode& requestor, size_t max_addres\n         // nodes to be \"terrible\" (see IsTerrible()) if the timestamps are older than 30 days,\n         // max. 24 hours of \"penalty\" due to cache shouldn't make any meaningful difference\n         // in terms of the freshness of the response.\n-        cache_entry.m_cache_entry_expiration = current_time + std::chrono::hours(21) + GetRandMillis(std::chrono::hours(6));\n+        cache_entry.m_cache_entry_expiration = current_time +\n+            21h + FastRandomContext().randrange<std::chrono::microseconds>(6h);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632292752",
      "id" : 1632292752,
      "in_reply_to_id" : 1632130266,
      "line" : 3479,
      "node_id" : "PRRC_kwDOABII585hSs-Q",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 3479,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 41,
      "pull_request_review_id" : 2106211999,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632292752/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T13:09:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632292752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632293002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293002"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think I was inspired by Python's `random.expovariate`, but I agree \"exp\" is much more naturally associated with \"exponential\". Done.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T13:10:37Z",
      "diff_hunk" : "@@ -50,207 +51,417 @@\n  *   - Strengthen the entropy for 10 ms using repeated SHA512.\n  *   This is run once every minute.\n  *\n- * On first use of the RNG (regardless of what function is called first), all entropy\n- * sources used in the 'slow' seeder are included, but also:\n- * - 256 bits from the hardware RNG (rdseed or rdrand) when available.\n- * - Dynamic environment data (performance monitoring, ...)\n- * - Static environment data\n- * - Strengthen the entropy for 100 ms using repeated SHA512.\n+ * - On first use of the RNG (regardless of what function is called first), all entropy\n+ *   sources used in the 'slow' seeder are included, but also:\n+ *   - 256 bits from the hardware RNG (rdseed or rdrand) when available.\n+ *   - Dynamic environment data (performance monitoring, ...)\n+ *   - Static environment data\n+ *   - Strengthen the entropy for 100 ms using repeated SHA512.\n  *\n  * When mixing in new entropy, H = SHA512(entropy || old_rng_state) is computed, and\n  * (up to) the first 32 bytes of H are produced as output, while the last 32 bytes\n  * become the new RNG state.\n */\n \n+\n+/* ============================= INITIALIZATION AND ADDING ENTROPY ============================= */\n+\n /**\n- * Generate random data via the internal PRNG.\n+ * Initialize global RNG state and log any CPU features that are used.\n  *\n- * These functions are designed to be fast (sub microsecond), but do not necessarily\n- * meaningfully add entropy to the PRNG state.\n+ * Calling this function is optional. RNG state will be initialized when first\n+ * needed if it is not called.\n+ */\n+void RandomInit();\n+\n+/**\n+ * Gather entropy from various expensive sources, and feed them to the PRNG state.\n  *\n  * Thread-safe.\n  */\n-void GetRandBytes(Span<unsigned char> bytes) noexcept;\n-/** Generate a uniform random integer in the range [0..range). Precondition: range > 0 */\n-uint64_t GetRandInternal(uint64_t nMax) noexcept;\n-/** Generate a uniform random integer of type T in the range [0..nMax)\n- *  nMax defaults to std::numeric_limits<T>::max()\n- *  Precondition: nMax > 0, T is an integral type, no larger than uint64_t\n- */\n-template<typename T>\n-T GetRand(T nMax=std::numeric_limits<T>::max()) noexcept {\n-    static_assert(std::is_integral<T>(), \"T must be integral\");\n-    static_assert(std::numeric_limits<T>::max() <= std::numeric_limits<uint64_t>::max(), \"GetRand only supports up to uint64_t\");\n-    return T(GetRandInternal(nMax));\n-}\n-/** Generate a uniform random duration in the range [0..max). Precondition: max.count() > 0 */\n-template <typename D>\n-D GetRandomDuration(typename std::common_type<D>::type max) noexcept\n-// Having the compiler infer the template argument from the function argument\n-// is dangerous, because the desired return value generally has a different\n-// type than the function argument. So std::common_type is used to force the\n-// call site to specify the type of the return value.\n-{\n-    assert(max.count() > 0);\n-    return D{GetRand(max.count())};\n-};\n-constexpr auto GetRandMicros = GetRandomDuration<std::chrono::microseconds>;\n-constexpr auto GetRandMillis = GetRandomDuration<std::chrono::milliseconds>;\n+void RandAddPeriodic() noexcept;\n \n /**\n- * Return a timestamp in the future sampled from an exponential distribution\n- * (https://en.wikipedia.org/wiki/Exponential_distribution). This distribution\n- * is memoryless and should be used for repeated network events (e.g. sending a\n- * certain type of message) to minimize leaking information to observers.\n+ * Gathers entropy from the low bits of the time at which events occur. Should\n+ * be called with a uint32_t describing the event at the time an event occurs.\n  *\n- * The probability of an event occurring before time x is 1 - e^-(x/a) where a\n- * is the average interval between events.\n- * */\n-std::chrono::microseconds GetExponentialRand(std::chrono::microseconds now, std::chrono::seconds average_interval);\n+ * Thread-safe.\n+ */\n+void RandAddEvent(const uint32_t event_info) noexcept;\n+\n \n-uint256 GetRandHash() noexcept;\n+/* =========================== BASE RANDOMNESS GENERATION FUNCTIONS ===========================\n+ *\n+ * All produced randomness is eventually generated by one of these functions.\n+ */\n \n /**\n- * Gather entropy from various sources, feed it into the internal PRNG, and\n- * generate random data using it.\n+ * Generate random data via the internal PRNG.\n  *\n- * This function will cause failure whenever the OS RNG fails.\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaningfully add entropy to the PRNG state.\n+ *\n+ * In test mode (see SeedRandomForTest in src/test/util/random.h), the normal PRNG state is\n+ * bypassed, and a deterministic, seeded, PRNG is used instead.\n  *\n  * Thread-safe.\n  */\n-void GetStrongRandBytes(Span<unsigned char> bytes) noexcept;\n+void GetRandBytes(Span<unsigned char> bytes) noexcept;\n \n /**\n- * Gather entropy from various expensive sources, and feed them to the PRNG state.\n+ * Gather entropy from various sources, feed it into the internal PRNG, and\n+ * generate random data using it.\n+ *\n+ * This function will cause failure whenever the OS RNG fails.\n+ *\n+ * The normal PRNG is never bypassed here, even in test mode.\n  *\n  * Thread-safe.\n  */\n-void RandAddPeriodic() noexcept;\n+void GetStrongRandBytes(Span<unsigned char> bytes) noexcept;\n \n-/**\n- * Gathers entropy from the low bits of the time at which events occur. Should\n- * be called with a uint32_t describing the event at the time an event occurs.\n+\n+/* ============================= RANDOM NUMBER GENERATION CLASSES =============================\n  *\n- * Thread-safe.\n+ * In this section, 3 classes are defined:\n+ * - RandomMixin:            a base class that adds functionality to all RNG classes.\n+ * - FastRandomContext:      a cryptographic RNG (seeded through GetRandBytes in its default\n+ *                           constructor).\n+ * - InsecureRandomContext:  a non-cryptographic, very fast, RNG.\n  */\n-void RandAddEvent(const uint32_t event_info) noexcept;\n \n-/**\n- * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and does not gather more entropy after that.\n+// Forward declaration of RandomMixin, used in RandomNumberGenerator concept.\n+template<typename T>\n+class RandomMixin;\n+\n+/** A concept for RandomMixin-based random number generators. */\n+template<typename T>\n+concept RandomNumberGenerator = requires(T& rng, Span<std::byte> s) {\n+    // A random number generator must provide rand64().\n+    { rng.rand64() } noexcept -> std::same_as<uint64_t>;\n+    // A random number generator must derive from RandomMixin, which adds other rand* functions.\n+    requires std::derived_from<std::remove_reference_t<T>, RandomMixin<std::remove_reference_t<T>>>;\n+};\n+\n+/** A concept for C++ std::chrono durations. */\n+template<typename T>\n+concept StdChronoDuration = requires {\n+    []<class Rep, class Period>(std::type_identity<std::chrono::duration<Rep, Period>>){}(\n+        std::type_identity<T>());\n+};\n+\n+/** Given a uniformly random 64-bit value uniform, return an exponentially distributed value with mean 1. */\n+double MakeExponentiallyDistributed(uint64_t uniform) noexcept;\n+\n+/** Mixin class that provides helper randomness functions.\n  *\n- * This class is not thread-safe.\n+ * Intended to be used through CRTP: https://en.cppreference.com/w/cpp/language/crtp.\n+ * An RNG class FunkyRNG would derive publicly from RandomMixin<FunkyRNG>. This permits\n+ * RandomMixin from accessing the derived class's rand64() function, while also allowing\n+ * the derived class to provide more.\n+ *\n+ * The derived class must satisfy the RandomNumberGenerator concept.\n  */\n-class FastRandomContext\n+template<typename T>\n+class RandomMixin\n {\n private:\n-    bool requires_seed;\n-    ChaCha20 rng;\n-\n-    uint64_t bitbuf;\n-    int bitbuf_size;\n+    uint64_t bitbuf{0};\n+    int bitbuf_size{0};\n \n-    void RandomSeed();\n+    /** Access the underlying generator.\n+     *\n+     * This also enforces the RandomNumberGenerator concept. We cannot declare that in the template\n+     * (no template<RandomNumberGenerator T>) because the type isn't fully instantiated yet there.\n+     */\n+    RandomNumberGenerator auto& Impl() noexcept { return static_cast<T&>(*this); }\n \n-    void FillBitBuffer()\n+protected:\n+    constexpr void FlushCache() noexcept\n     {\n-        bitbuf = rand64();\n-        bitbuf_size = 64;\n+        bitbuf = 0;\n+        bitbuf_size = 0;\n     }\n \n public:\n-    explicit FastRandomContext(bool fDeterministic = false) noexcept;\n-\n-    /** Initialize with explicit seed (only for testing) */\n-    explicit FastRandomContext(const uint256& seed) noexcept;\n-\n-    // Do not permit copying a FastRandomContext (move it, or create a new one to get reseeded).\n-    FastRandomContext(const FastRandomContext&) = delete;\n-    FastRandomContext(FastRandomContext&&) = delete;\n-    FastRandomContext& operator=(const FastRandomContext&) = delete;\n+    constexpr RandomMixin() noexcept = default;\n \n-    /** Move a FastRandomContext. If the original one is used again, it will be reseeded. */\n-    FastRandomContext& operator=(FastRandomContext&& from) noexcept;\n-\n-    /** Generate a random 64-bit integer. */\n-    uint64_t rand64() noexcept\n-    {\n-        if (requires_seed) RandomSeed();\n-        std::array<std::byte, 8> buf;\n-        rng.Keystream(buf);\n-        return ReadLE64(UCharCast(buf.data()));\n-    }\n+    // Do not permit copying or moving an RNG.\n+    RandomMixin(const RandomMixin&) = delete;\n+    RandomMixin& operator=(const RandomMixin&) = delete;\n+    RandomMixin(RandomMixin&&) = delete;\n+    RandomMixin& operator=(RandomMixin&&) = delete;\n \n     /** Generate a random (bits)-bit integer. */\n     uint64_t randbits(int bits) noexcept\n     {\n-        if (bits == 0) {\n-            return 0;\n-        } else if (bits > 32) {\n-            return rand64() >> (64 - bits);\n-        } else {\n-            if (bitbuf_size < bits) FillBitBuffer();\n-            uint64_t ret = bitbuf & (~uint64_t{0} >> (64 - bits));\n+        Assume(bits <= 64);\n+        // Requests for the full 64 bits are passed through.\n+        if (bits == 64) return Impl().rand64();\n+        uint64_t ret;\n+        if (bits <= bitbuf_size) {\n+            // If there is enough entropy left in bitbuf, return its bottom bits bits.\n+            ret = bitbuf;\n             bitbuf >>= bits;\n             bitbuf_size -= bits;\n+        } else {\n+            // If not, return all of bitbuf, supplemented with the (bits - bitbuf_size) bottom\n+            // bits of a newly generated 64-bit number on top. The remainder of that generated\n+            // number becomes the new bitbuf.\n+            uint64_t gen = Impl().rand64();\n+            ret = (gen << bitbuf_size) | bitbuf;\n+            bitbuf = gen >> (bits - bitbuf_size);\n+            bitbuf_size = 64 + bitbuf_size - bits;\n+        }\n+        // Return the bottom bits bits of ret.\n+        return ret & ((uint64_t{1} << bits) - 1);\n+    }\n+\n+    /** Same as above, but with compile-time fixed bits count. */\n+    template<int Bits>\n+    uint64_t randbits() noexcept\n+    {\n+        static_assert(Bits >= 0 && Bits <= 64);\n+        if constexpr (Bits == 0) {\n+            return 0;\n+        } else if constexpr (Bits == 64) {\n+            return Impl().rand64();\n+        } else if constexpr (Bits == 1) {\n+            uint64_t ret;\n+            if (bitbuf_size == 0) {\n+                bitbuf = Impl().rand64();\n+                bitbuf_size = 64;\n+            }\n+            ret = bitbuf & 1;\n+            bitbuf >>= 1;\n+            bitbuf_size -= 1;\n             return ret;\n+        } else {\n+            uint64_t ret;\n+            if (Bits <= bitbuf_size) {\n+                ret = bitbuf;\n+                bitbuf >>= Bits;\n+                bitbuf_size -= Bits;\n+            } else {\n+                uint64_t gen = Impl().rand64();\n+                ret = (gen << bitbuf_size) | bitbuf;\n+                bitbuf = gen >> (Bits - bitbuf_size);\n+                bitbuf_size = 64 + bitbuf_size - Bits;\n+            }\n+            constexpr uint64_t MASK = (uint64_t{1} << Bits) - 1;\n+            return ret & MASK;\n         }\n     }\n \n-    /** Generate a random integer in the range [0..range).\n-     * Precondition: range > 0.\n-     */\n-    uint64_t randrange(uint64_t range) noexcept\n+    /** Generate a random integer in the range [0..range), with range > 0. */\n+    template<std::integral I>\n+    I randrange(I range) noexcept\n     {\n-        assert(range);\n-        --range;\n-        int bits = std::bit_width(range);\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max());\n+        Assume(range > 0);\n+        uint64_t maxval = range - 1U;\n+        int bits = std::bit_width(maxval);\n         while (true) {\n-            uint64_t ret = randbits(bits);\n-            if (ret <= range) return ret;\n+            uint64_t ret = Impl().randbits(bits);\n+            if (ret <= maxval) return ret;\n         }\n     }\n \n-    /** Generate random bytes. */\n-    template <typename B = unsigned char>\n-    std::vector<B> randbytes(size_t len);\n+    /** Fill a Span with random bytes. */\n+    void fillrand(Span<std::byte> span) noexcept\n+    {\n+        while (span.size() >= 8) {\n+            uint64_t gen = Impl().rand64();\n+            WriteLE64(UCharCast(span.data()), gen);\n+            span = span.subspan(8);\n+        }\n+        if (span.size() >= 4) {\n+            uint32_t gen = Impl().rand32();\n+            WriteLE32(UCharCast(span.data()), gen);\n+            span = span.subspan(4);\n+        }\n+        while (span.size()) {\n+            span[0] = std::byte(Impl().template randbits<8>());\n+            span = span.subspan(1);\n+        }\n+    }\n+\n+    /** Generate a random integer in its entire (non-negative) range. */\n+    template<std::integral I>\n+    I rand() noexcept\n+    {\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max());\n+        static constexpr auto BITS = std::bit_width(uint64_t(std::numeric_limits<I>::max()));\n+        static_assert(std::numeric_limits<I>::max() == std::numeric_limits<uint64_t>::max() >> (64 - BITS));\n+        return I(Impl().template randbits<BITS>());\n+    }\n \n-    /** Fill a byte Span with random bytes. */\n-    void fillrand(Span<std::byte> output);\n+    /** Generate random bytes. */\n+    template <BasicByte B = unsigned char>\n+    std::vector<B> randbytes(size_t len) noexcept\n+    {\n+        std::vector<B> ret(len);\n+        Impl().fillrand(MakeWritableByteSpan(ret));\n+        return ret;\n+    }\n \n     /** Generate a random 32-bit integer. */\n-    uint32_t rand32() noexcept { return randbits(32); }\n+    uint32_t rand32() noexcept { return Impl().template randbits<32>(); }\n \n     /** generate a random uint256. */\n-    uint256 rand256() noexcept;\n+    uint256 rand256() noexcept\n+    {\n+        uint256 ret;\n+        Impl().fillrand(MakeWritableByteSpan(ret));\n+        return ret;\n+    }\n \n     /** Generate a random boolean. */\n-    bool randbool() noexcept { return randbits(1); }\n+    bool randbool() noexcept { return Impl().template randbits<1>(); }\n \n     /** Return the time point advanced by a uniform random duration. */\n     template <typename Tp>\n-    Tp rand_uniform_delay(const Tp& time, typename Tp::duration range)\n+    Tp rand_uniform_delay(const Tp& time, typename Tp::duration range) noexcept\n     {\n-        return time + rand_uniform_duration<Tp>(range);\n+        return time + Impl().template rand_uniform_duration<Tp>(range);\n     }\n \n     /** Generate a uniform random duration in the range from 0 (inclusive) to range (exclusive). */\n-    template <typename Chrono>\n+    template <typename Chrono> requires StdChronoDuration<typename Chrono::duration>\n     typename Chrono::duration rand_uniform_duration(typename Chrono::duration range) noexcept\n     {\n         using Dur = typename Chrono::duration;\n-        return range.count() > 0 ? /* interval [0..range) */ Dur{randrange(range.count())} :\n-               range.count() < 0 ? /* interval (range..0] */ -Dur{randrange(-range.count())} :\n+        return range.count() > 0 ? /* interval [0..range) */ Dur{Impl().randrange(range.count())} :\n+               range.count() < 0 ? /* interval (range..0] */ -Dur{Impl().randrange(-range.count())} :\n                                    /* interval [0..0] */ Dur{0};\n     };\n \n+    /** Generate a uniform random duration in the range [0..max). Precondition: max.count() > 0 */\n+    template <StdChronoDuration Dur>\n+    Dur randrange(typename std::common_type_t<Dur> range) noexcept\n+    // Having the compiler infer the template argument from the function argument\n+    // is dangerous, because the desired return value generally has a different\n+    // type than the function argument. So std::common_type is used to force the\n+    // call site to specify the type of the return value.\n+    {\n+        return Dur{Impl().randrange(range.count())};\n+    }\n+\n+    /**\n+     * Return a duration sampled from an exponential distribution\n+     * (https://en.wikipedia.org/wiki/Exponential_distribution). Successive events\n+     * whose intervals are distributed according to this form a memoryless Poisson\n+     * process. This should be used for repeated network events (e.g. sending a\n+     * certain type of message) to minimize leaking information to observers.\n+     *\n+     * The probability of an event occurring before time x is 1 - e^-(x/a) where a\n+     * is the average interval between events.\n+     * */\n+    std::chrono::microseconds rand_expo_duration(std::chrono::microseconds mean) noexcept",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632293002",
      "id" : 1632293002,
      "in_reply_to_id" : 1632131052,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hStCK",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 360,
      "original_position" : 445,
      "original_start_line" : null,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 2106212231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293002/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T13:10:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632293085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293085"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done (I left the \"instead\" in place).",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T13:10:58Z",
      "diff_hunk" : "@@ -457,11 +406,21 @@ class RNGState {\n         m_events_hasher.Write(events_hash, 32);\n     }\n \n+    /** Make the output of MixExtract (if allow_deterministic) deterministic, with specified seed. */\n+    void MakeDeterministic(const uint256& seed) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_deterministic_prng.emplace(MakeByteSpan(seed));\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n+     *\n+     * If allow_deterministic is true, and MakeDeterministic has been called before, output\n+     * from the deterministic PRNG is output instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632293085",
      "id" : 1632293085,
      "in_reply_to_id" : 1632133956,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hStDd",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 421,
      "original_position" : 251,
      "original_start_line" : 420,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2106212304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293085/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-09T13:10:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293085",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632293173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice catch. Done, and added a comment to explain.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T13:11:19Z",
      "diff_hunk" : "@@ -549,16 +514,16 @@ static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n }\n \n /** Extract entropy from rng, strengthen it, and feed it into hasher. */\n-static void SeedStrengthen(CSHA512& hasher, RNGState& rng, SteadyClock::duration dur) noexcept\n+void SeedStrengthen(CSHA512& hasher, RNGState& rng, SteadyClock::duration dur) noexcept\n {\n     // Generate 32 bytes of entropy from the RNG, and a copy of the entropy already in hasher.\n     unsigned char strengthen_seed[32];\n-    rng.MixExtract(strengthen_seed, sizeof(strengthen_seed), CSHA512(hasher), false);\n+    rng.MixExtract(strengthen_seed, sizeof(strengthen_seed), CSHA512(hasher), false, /*allow_deterministic=*/true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632293173",
      "id" : 1632293173,
      "in_reply_to_id" : 1632134959,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hStE1",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 521,
      "original_position" : 314,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2106212390,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T13:11:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632293173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632311931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632311931"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That makes sense. This improved organization is worth it.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T14:24:06Z",
      "diff_hunk" : "@@ -345,64 +348,6 @@ static void Strengthen(const unsigned char (&seed)[32], SteadyClock::duration du\n }\n #endif\n \n-/** Get 32 bytes of system entropy. */\n-void GetOSRand(unsigned char *ent32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632311931",
      "id" : 1632311931,
      "in_reply_to_id" : 1632132631,
      "line" : 349,
      "node_id" : "PRRC_kwDOABII585hSxp7",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 349,
      "original_position" : 164,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : 164,
      "pull_request_review_id" : 2106241335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632311931/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-09T14:24:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632311931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632314639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632314639"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "1. If I understand, you don't want to replace `MixExtract` entirely when the deterministic test RNG is used, because when `MixExtract` to still run and add/mix entropy in case someone decides to generate a keying material while the deterministic test RNG is on. This was what I was missing.\r\n\r\n2. I like the name deterministic mode because it makes it more clear this is a RNG wide change.\r\n\r\n3. Thought I had after waking up this morning was to change this to `bool fail_on_deterministic_mode`. Thus if someone had the deterministic test RNG activated and then tried to generate a key it would throw an error because `fail_on_deterministic_mode=true`. That said, I'm not sure this works with the current approach since if someone calls SeedStrengthen with the deterministic test RNG activated it would fail and it is reasonable to call SeedStrengthen in tests/fuzzing. **Edit:** You make a similar point in the next comment. I don't think my proposed change here is worth making in this PR.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T14:38:36Z",
      "diff_hunk" : "@@ -457,11 +406,21 @@ class RNGState {\n         m_events_hasher.Write(events_hash, 32);\n     }\n \n+    /** Make the output of MixExtract (if allow_deterministic) deterministic, with specified seed. */\n+    void MakeDeterministic(const uint256& seed) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_deterministic_prng.emplace(MakeByteSpan(seed));\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n+     *\n+     * If allow_deterministic is true, and MakeDeterministic has been called before, output\n+     * from the deterministic PRNG is output instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632314639",
      "id" : 1632314639,
      "in_reply_to_id" : 1632133792,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSyUP",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 421,
      "original_position" : 251,
      "original_start_line" : 420,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2106243849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632314639/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-09T14:49:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632314639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/274814?v=4",
         "events_url" : "https://api.github.com/users/EthanHeilman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/EthanHeilman/followers",
         "following_url" : "https://api.github.com/users/EthanHeilman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/EthanHeilman",
         "id" : 274814,
         "login" : "EthanHeilman",
         "node_id" : "MDQ6VXNlcjI3NDgxNA==",
         "organizations_url" : "https://api.github.com/users/EthanHeilman/orgs",
         "received_events_url" : "https://api.github.com/users/EthanHeilman/received_events",
         "repos_url" : "https://api.github.com/users/EthanHeilman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/EthanHeilman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/EthanHeilman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632321305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632321305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How about having an `always_use_real_rng` bool instead, with meaning `!allow_deterministic`. That means the \"deterministic\" terminology would be more clearly referring to the mode (is the deterministic PRNG enabled), but not to the produced numbers.",
      "commit_id" : "125509f395a214465ebf379164e41e4c6d19d443",
      "created_at" : "2024-06-09T15:10:32Z",
      "diff_hunk" : "@@ -457,11 +406,21 @@ class RNGState {\n         m_events_hasher.Write(events_hash, 32);\n     }\n \n+    /** Make the output of MixExtract (if allow_deterministic) deterministic, with specified seed. */\n+    void MakeDeterministic(const uint256& seed) noexcept EXCLUSIVE_LOCKS_REQUIRED(!m_mutex)\n+    {\n+        LOCK(m_mutex);\n+        m_deterministic_prng.emplace(MakeByteSpan(seed));\n+    }\n+\n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n+     *\n+     * If allow_deterministic is true, and MakeDeterministic has been called before, output\n+     * from the deterministic PRNG is output instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1632321305",
      "id" : 1632321305,
      "in_reply_to_id" : 1632133792,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585hSz8Z",
      "original_commit_id" : "462cca90c4ce25eb8e103971dd635facdb042310",
      "original_line" : 421,
      "original_position" : 251,
      "original_start_line" : 420,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 2106277195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632321305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-06-09T15:10:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632321305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The false positive CI error still happens. I am taking another look.",
      "created_at" : "2024-06-10T11:30:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2158091611",
      "id" : 2158091611,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII586Aod1b",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2158091611/reactions"
      },
      "updated_at" : "2024-06-10T11:30:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2158091611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I could reproduce once outside the CI env on a 24.04 Ubuntu vm:\r\n\r\n```\r\n./configure CC='clang-18 -ftrivial-auto-var-init=pattern' CXX='clang++-18 -ftrivial-auto-var-init=pattern' --with-sanitizers=float-divide-by-zero,integer,undefined --enable-usdt --enable-zmq --with-incompatible-bdb --with-gui=qt5  && make\r\n\r\nwhile ( UBSAN_OPTIONS=\"suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\" ./test/functional/test_runner.py -j 22 --timeout-factor=2  ) ; do ( echo 1 >> /tmp/ok ) ; done\r\n```\r\n\r\nRequired diff to remove known UB from leveldb:\r\n\r\n```diff\r\ndiff --git a/src/leveldb/db/db_impl.cc b/src/leveldb/db/db_impl.cc\r\nindex 65e31724b..f61b47195 100644\r\n--- a/src/leveldb/db/db_impl.cc\r\n+++ b/src/leveldb/db/db_impl.cc\r\n@@ -1028,9 +1028,6 @@ Status DBImpl::DoCompactionWork(CompactionState* compact) {\r\n       stats.bytes_read += compact->compaction->input(which, i)->file_size;\r\n     }\r\n   }\r\n-  for (size_t i = 0; i < compact->outputs.size(); i++) {\r\n-    stats.bytes_written += compact->outputs[i].file_size;\r\n-  }\r\n \r\n   mutex_.Lock();\r\n   stats_[compact->compaction->level() + 1].Add(stats);\r\n```\r\n\r\nWill try some more stuff later on.\r\n\r\n<!--\r\n\r\n    1  export DEBIAN_FRONTEND=noninteractive && apt update && apt install curl wget htop git vim ccache -y && git clone https://github.com/bitcoin/bitcoin.git  --depth=1 ./bitcoin-core && cd bitcoin-core && apt install libc++abi-dev libc++-dev clang llvm build-essential libtool autotools-dev automake pkg-config bsdmainutils python3-zmq      make automake cmake curl g++-multilib libtool binutils bsdmainutils pkg-config python3 patch bison        -y  && ./autogen.sh && apt-get install clang ccache build-essential libtool autotools-dev automake pkg-config bsdmainutils python3-zmq libevent-dev libboost-dev -y && apt install libsqlite3-dev systemtap-sdt-dev libminiupnpc-dev libnatpmp-dev qtbase5-dev qttools5-dev qttools5-dev-tools qtwayland5 libqrencode-dev -y && ./configure CC='clang-18 -ftrivial-auto-var-init=pattern' CXX='clang++-18 -ftrivial-auto-var-init=pattern' --with-sanitizers=float-divide-by-zero,integer,undefined --enable-usdt --enable-zmq --with-incompatible-bdb --with-gui=qt5  && make clean && make -j $(nproc) \r\n    2  make -j 22 && while ( UBSAN_OPTIONS=\"suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\" ./test/functional/test_runner.py -j 22 --timeout-factor=2  ) ; do ( echo 1 >> /tmp/ok ) ; done \r\n    3  cat ci/test/03_test_script.sh |less\r\n    4  vim /tmp/a\r\n    5  cat /tmp/a|git apply \r\n    6  make -j 22 && while ( UBSAN_OPTIONS=\"suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\" ./test/functional/test_runner.py -j 22 --timeout-factor=2  ) ; do ( echo 1 >> /tmp/ok ) ; done \r\n    7  git log \r\n    8  git log -1\r\n    9  git fetch origin 125509f395a214465ebf379164e41e4c6d19d443 \r\n   10  git checkout 125509f395a214465ebf379164e41e4c6d19d443\r\n   11  make -j 22 && while ( UBSAN_OPTIONS=\"suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\" ./test/functional/test_runner.py -j 22 --timeout-factor=2  ) ; do ( echo 1 >> /tmp/ok ) ; done \r\n   12  history \r\n   13  ./configure CC='clang-18 -ftrivial-auto-var-init=pattern' CXX='clang++-18 -ftrivial-auto-var-init=pattern' --with-sanitizers=float-divide-by-zero,integer,undefined --enable-usdt --enable-zmq --with-incompatible-bdb --with-gui=qt5  && make clean && make -j $(nproc) \r\n   14  ./auto&& ./configure CC='clang-18 -ftrivial-auto-var-init=pattern' CXX='clang++-18 -ftrivial-auto-var-init=pattern' --with-sanitizers=float-divide-by-zero,integer,undefined --enable-usdt --enable-zmq --with-incompatible-bdb --with-gui=qt5  && make clean && make -j $(nproc)  \r\n   15  ./autogen.sh && ./configure CC='clang-18 -ftrivial-auto-var-init=pattern' CXX='clang++-18 -ftrivial-auto-var-init=pattern' --with-sanitizers=float-divide-by-zero,integer,undefined --enable-usdt --enable-zmq --with-incompatible-bdb --with-gui=qt5  && make clean && make -j $(nproc)  \r\n   16  cat /tmp/a\r\n   17  make -j 22 && while ( UBSAN_OPTIONS=\"suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\" ./test/functional/test_runner.py -j 22 --timeout-factor=2  ) ; do ( echo 1 >> /tmp/ok ) ; done \r\n   18  history \r\n",
      "created_at" : "2024-06-10T20:34:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2159234188",
      "id" : 2159234188,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII586As0yM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159234188/reactions"
      },
      "updated_at" : "2024-06-10T20:35:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159234188",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@maflcko Thanks, I can also reproduce that way.",
      "created_at" : "2024-06-10T23:17:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2159465142",
      "id" : 2159465142,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII586AttK2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159465142/reactions"
      },
      "updated_at" : "2024-06-10T23:17:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159465142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2024-06-11T23:19:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2161757848",
      "id" : 2161757848,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII586A2c6Y",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2161757848/reactions"
      },
      "updated_at" : "2024-06-11T23:19:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2161757848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/26102938676</sub>",
      "created_at" : "2024-06-12T07:52:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#issuecomment-2162346676",
      "id" : 2162346676,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29625",
      "node_id" : "IC_kwDOABII586A4sq0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2162346676/reactions"
      },
      "updated_at" : "2024-06-12T07:52:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2162346676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1640954007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1640954007"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> It appeared to be necessary, IIRC.\r\n\r\nYes, it is required. However, adding the annotation will only silence the compiler warning.\r\n\r\n`FastRandomContext` is not thread safe, so the lock will actually have to be taken.\r\n\r\nPutting an `EXCLUSIVE_LOCKS_REQUIRED` only into the c++ file and leaving it out from the header file will not work, because the compiler has no way to see the annotation outside of the module. For example, it can not be seen from `init.cpp`.",
      "commit_id" : "6e905f86fec6ca7ab8b1137f39522a40a5eced82",
      "created_at" : "2024-06-15T09:32:15Z",
      "diff_hunk" : "@@ -508,7 +508,7 @@ class PeerManagerImpl final : public PeerManager\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex, !m_most_recent_block_mutex, g_msgproc_mutex);\n \n     /** Implement PeerManager */\n-    void StartScheduledTasks(CScheduler& scheduler) override;\n+    void StartScheduledTasks(CScheduler& scheduler) override EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1640954007",
      "id" : 1640954007,
      "in_reply_to_id" : 1617765084,
      "line" : 516,
      "node_id" : "PRRC_kwDOABII585hzviX",
      "original_commit_id" : "8504bfc5dc8e1ff906f0a2b845dce8c37528b67b",
      "original_line" : 516,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 2120293332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1640954007/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-15T09:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1640954007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1641145353"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641145353"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, apparently these annotations are not nearly as smart as I assumed they were!",
      "commit_id" : "6e905f86fec6ca7ab8b1137f39522a40a5eced82",
      "created_at" : "2024-06-15T12:52:14Z",
      "diff_hunk" : "@@ -508,7 +508,7 @@ class PeerManagerImpl final : public PeerManager\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex, !m_most_recent_block_mutex, g_msgproc_mutex);\n \n     /** Implement PeerManager */\n-    void StartScheduledTasks(CScheduler& scheduler) override;\n+    void StartScheduledTasks(CScheduler& scheduler) override EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1641145353",
      "id" : 1641145353,
      "in_reply_to_id" : 1617765084,
      "line" : 516,
      "node_id" : "PRRC_kwDOABII585h0eQJ",
      "original_commit_id" : "8504bfc5dc8e1ff906f0a2b845dce8c37528b67b",
      "original_line" : 516,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 2120427316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641145353/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-15T12:52:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641145353",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1641289196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641289196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Lol, I even spent a few hours looking directly at this and trying to figure out if this could be a threading problem.\r\n\r\nð¤¦\r\n\r\nI suppose I trusted the annotations so much I didn't even notice that the code didn't take the lock. That's embarrassing!\r\n\r\nLooks like [this is our issue](https://github.com/llvm/llvm-project/pull/67520).\r\n\r\nI'll give that patched branch a shot next week and see if it turns up anything else in our codebase. Will chime in upstream with a +1 as well (assuming it works).",
      "commit_id" : "6e905f86fec6ca7ab8b1137f39522a40a5eced82",
      "created_at" : "2024-06-15T16:38:09Z",
      "diff_hunk" : "@@ -508,7 +508,7 @@ class PeerManagerImpl final : public PeerManager\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, !m_recent_confirmed_transactions_mutex, !m_most_recent_block_mutex, g_msgproc_mutex);\n \n     /** Implement PeerManager */\n-    void StartScheduledTasks(CScheduler& scheduler) override;\n+    void StartScheduledTasks(CScheduler& scheduler) override EXCLUSIVE_LOCKS_REQUIRED(g_msgproc_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29625#discussion_r1641289196",
      "id" : 1641289196,
      "in_reply_to_id" : 1617765084,
      "line" : 516,
      "node_id" : "PRRC_kwDOABII585h1BXs",
      "original_commit_id" : "8504bfc5dc8e1ff906f0a2b845dce8c37528b67b",
      "original_line" : 516,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 2120605682,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29625",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641289196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-06-15T16:38:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1641289196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
