[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-08-10T16:30:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28252#issuecomment-1673546508",
      "id" : 1673546508,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28252",
      "node_id" : "IC_kwDOABII585jwEsM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673546508/reactions"
      },
      "updated_at" : "2023-08-10T16:30:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673546508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-08-10T17:32:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28252#issuecomment-1673628224",
      "id" : 1673628224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28252",
      "node_id" : "IC_kwDOABII585jwYpA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673628224/reactions"
      },
      "updated_at" : "2023-08-10T17:32:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673628224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Most of the API simply shifts from `CConnman::DoX(CNode*)` to `CConnman::DoX(NodeId)`\r\n\r\nThat seems undesirable to me? Where possible, acting directly on the node via a pointer/reference is much better than taking a global lock, doing a lookup, and then acting.\r\n\r\n> * We can't test PeerManager in isolation if it is not the owner of its own state.\r\n\r\nI think it's a mistake trying to have many different owners of \"per-node\" state -- that increases the lookups, locks and coordination required when adding/removing nodes. I think a simpler approach would be to add a `unique_ptr<Peer>` (and perhaps likewise for other per-peer data) to `CNode`, which is initialized via `NetEventsInterface::InitializeNode`. If you want to test `PeerManager` without a `CConnman`, it then becomes the test framework's job to set up a bunch of `CNode` objects and initialize them. In that world, the `Peer` struct is just the processing-related data members of `CNode`, and largely not something that should be passed around independently (let alone in addition to) the `CNode` its embedded in.",
      "created_at" : "2023-08-11T02:07:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28252#issuecomment-1674134771",
      "id" : 1674134771,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28252",
      "node_id" : "IC_kwDOABII585jyUTz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674134771/reactions"
      },
      "updated_at" : "2023-08-11T02:07:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674134771",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns Thanks for the quick feedback! I think we'll mostly disagree here but I appreciate your opinion.\r\n\r\n>> Most of the API simply shifts from CConnman::DoX(CNode*) to CConnman::DoX(NodeId)\r\n>\r\n> That seems undesirable to me? Where possible, acting directly on the node via a pointer/reference is much better than taking a global lock, doing a lookup, and then acting.\r\n\r\nWhile it is obviously true that directly accessing the CNode pointers is more performant (no locking or look ups), accessing internals of other components like this leads to spaghetti code and the performance win of micro or nano seconds is just not worth it.\r\n\r\n> I think a simpler approach would be to add a `unique_ptr<Peer>` (and perhaps likewise for other per-peer data) to `CNode`, which is initialized via `NetEventsInterface::InitializeNode`.\r\n\r\nThis sounds like doing a complete 180 on the work that happened over multiple years to decouple net and net processing. I'm not re-inventing the wheel in this PR, this general direction has been what other contributors have had in mind and worked on for multiple years. I'd prefer finishing up previous work and making things consistent instead of going in an entirely new direction.",
      "created_at" : "2023-08-11T10:54:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28252#issuecomment-1674561856",
      "id" : 1674561856,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28252",
      "node_id" : "IC_kwDOABII585jz8lA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674561856/reactions"
      },
      "updated_at" : "2023-08-11T10:54:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674561856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> While it is obviously true that directly accessing the CNode pointers is more performant (no locking or look ups), accessing internals of other components like this leads to spaghetti code and the performance win of micro or nano seconds is just not worth it.\r\n\r\nIf we want to have multiple threads processing different peers, then avoiding (or at least minimising) having to go through shared data structures will be necessary. Keeping our data structures in sync is already challenging, making it more complicated and having more things to keep coordinated is a bad thing.\r\n\r\n> > I think a simpler approach would be to add a `unique_ptr<Peer>` (and perhaps likewise for other per-peer data) to `CNode`, which is initialized via `NetEventsInterface::InitializeNode`.\r\n> \r\n> This sounds like doing a complete 180 on the work that happened over multiple years to decouple net and net processing.\r\n\r\nIf you're going in the wrong direction, doing a 180 is a good thing, and going even further in the same direction is a bad thing.",
      "created_at" : "2023-08-11T11:23:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28252#issuecomment-1674592289",
      "id" : 1674592289,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28252",
      "node_id" : "IC_kwDOABII585j0EAh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674592289/reactions"
      },
      "updated_at" : "2023-08-11T11:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674592289",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> then avoiding (or at least minimising) having to go through shared data structures will be necessary\r\n\r\nI could agree on s/necessary/more performant, but with the shared data structure design it would really only cause contention for the look ups which is really not that bad. i.e.\r\n```c++\r\n// in CConnman::DoX(NodeId)\r\n  {\r\n    LOCK(m_nodes_mutex);\r\n    // do lookup\r\n  }\r\n\r\n  // do work on the CNode\r\n```\r\n\r\n\r\n> Keeping our data structures in sync is already challenging, \r\n\r\nIt's challenging right now because we are passing internal pointers around. \r\n\r\n> making it more complicated and having more things to keep coordinated is a bad thing.\r\n\r\nIt's really not that complicated if all you have to do is call `moduleX.ForgetPeer(id)` in `FinalizeNode`.\r\n\r\n> If you're going in the wrong direction, doing a 180 is a good thing, and going even further in the same direction is a bad thing.\r\n\r\nI think we're just gonna disagree on what the right direction is :) It mostly seems like a discussion of performance vs. sane interfaces and I don't think it is worth optimizing for performance in this specific case (at the cost of bad interfaces) as it doesn't represent a bottleneck either way.",
      "created_at" : "2023-08-11T12:09:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28252#issuecomment-1674649044",
      "id" : 1674649044,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28252",
      "node_id" : "IC_kwDOABII585j0R3U",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674649044/reactions"
      },
      "updated_at" : "2023-08-11T12:09:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1674649044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   }
]
