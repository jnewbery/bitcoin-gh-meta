{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "This PR proposes to introduce a new interface to allow applications and second layers protocols to verify that their unconfirmed and non-propagated transactions are valid under Bitcoin Core transaction relay policy.\r\n\r\nThis new `libstandardness` interface is designed at the image of the `bitcoinconsensus` library, which already exposes some of the script verification internals to other applications. A new method is introduced `libstandard_verify_transaction` which indicate to the caller if the transaction is valid, i.e can propagate at current chain tip. For now, the policy rules as considered as a \"black box\", there is no detail (i.e `TxValidationState::m_reject_reason`) on thepolicy rule violated.\r\n\r\nThis interface allows second layers like contracting protocols relying on pre-signed transactions and efficient propagation over the network mempools for the security of user funds. E.g for the Lightning Network, counterparties are exchanging signatures for the commitment transaction and second-stage HTLCs during the BOLT2's `commitment_signed` message dance. A policy invalid commitment transaction with pending HTLC outputs not propagating on the network can be source of failure, a serious vulnerability for a Lightning implementation as [CVE-2020-26895](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html) showed it. Beyond being source of loss of funds, a policy rule violation can be a source of [liquidity griefing](https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003920.html) for a Lightning node participating in a collaborative transaction flow (dual-funding / splicing), where inputs/outputs are freely added by the counterparties.\r\n\r\nFor some contracting protocols, where the pre-signed txn are malleable by the counterparty it doesn't seem computationally plausible to `testmempoolaccept` all the combinationd valid under the protocol template and this would still assume some changes in our current transaction validation interface to bypass some stateful checks such as timelocks and mempool min fee.\r\n\r\nAs of today, there is no straightforward software tooling for applications and second-layers to verify the validity of the policy rules of their transactions, and most of implementations to the best of my knwoledge are re-implementing the policy rules in their backend, or delegate this verification to their bitcoin libraries. Such re-implementation is sometimes imperfect, must be updated at each Bitcoin Core policy rules changes (e.g packages policy rules) and be adapted for each protocol transaction templates (e.g for Lightning, commitment tx, second-stage tx, closing_tx, collaborative tx, legacy/anchor/taproot).\r\n\r\nThe proposed interface is introduced as a shared library rather than a RPC interface, as ideally policy rules could be enforced on embedded / resource constrained platforms such as L2 signers enforcing security rule validation of the second layer state machine (and from where one should be able to extract propagating pre-signed transactions in case of emergency recovery) and generally allow for more flexibility for applications and second layers, e.g on mobile phone where a full-node is not assumed (all caveats reserved on the lower security model in that latter case).\r\n\r\nThis interface has been proposed in the past, see previous PRs\r\n- https://github.com/bitcoin/bitcoin/pull/18797\r\n- https://github.com/bitcoin/bitcoin/pull/21413\r\n- https://github.com/bitcoin/bitcoin/pull/25434\r\n\r\nOpening the PR for now to collect conceptual and implementation-approach feedbacks. If the new interface is judged as relevant and useful, I'll add bindings in rust-bitcoin to test the interface end-to-end with adequate Lightning software.\r\n\r\nTODO:\r\n- write documentation for language bindings write in `doc/shared-libraries.md` and maybe in `doc/policy/`\r\n- integrate as a config flag only feature in build system (e.g `BUILD_BITCOIN_LIBSTANDARDNESS` in `src/Makefile.am` and `configure.ac`)\r\n- initialize the chainstate and its associated mempool with the spent utxos\r\n- some other things",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28220/comments",
   "created_at" : "2023-08-05T03:34:40Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28220/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/28220",
   "id" : 1837552467,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28220/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585XPXnK",
   "number" : 28220,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/28220.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28220",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/28220.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28220"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28220/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28220/timeline",
   "title" : "Libstandardness (edition 2023)",
   "updated_at" : "2023-08-05T03:35:37Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28220",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
      "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
      "followers_url" : "https://api.github.com/users/ariard/followers",
      "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/ariard",
      "id" : 23310655,
      "login" : "ariard",
      "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
      "organizations_url" : "https://api.github.com/users/ariard/orgs",
      "received_events_url" : "https://api.github.com/users/ariard/received_events",
      "repos_url" : "https://api.github.com/users/ariard/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/ariard"
   }
}
