[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29156).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [michaelfolkson](https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1882786231), [epiccurious](https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1937402710) |\n| Stale ACK | [kevkevinpal](https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1882243654), [Eunovo](https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1888973157) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29154](https://github.com/bitcoin/bitcoin/pull/29154) (tests: improve wallet multisig descriptor test and docs by mjdietzx)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-12-29T21:27:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1872345837",
      "id" : 1872345837,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585vmbrt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872345837/reactions"
      },
      "updated_at" : "2024-04-09T08:57:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872345837",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "PR description link is routes to 404 can you update to use this https://github.com/bitcoin/bitcoin/blob/master/test/functional/wallet_multisig_descriptor_psbt.py instead?",
      "created_at" : "2024-01-06T16:36:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1879749727",
      "id" : 1879749727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wCrRf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879749727/reactions"
      },
      "updated_at" : "2024-01-06T16:36:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879749727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15950706?v=4",
         "events_url" : "https://api.github.com/users/kevkevinpal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kevkevinpal/followers",
         "following_url" : "https://api.github.com/users/kevkevinpal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kevkevinpal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kevkevinpal",
         "id" : 15950706,
         "login" : "kevkevinpal",
         "node_id" : "MDQ6VXNlcjE1OTUwNzA2",
         "organizations_url" : "https://api.github.com/users/kevkevinpal/orgs",
         "received_events_url" : "https://api.github.com/users/kevkevinpal/received_events",
         "repos_url" : "https://api.github.com/users/kevkevinpal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kevkevinpal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kevkevinpal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kevkevinpal"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK [2422b90](https://github.com/bitcoin/bitcoin/pull/29156/commits/2422b90978f4ea13ee49954598dc8aef841e36df)\r\n\r\nI've done a little code review and so far it is looking good, I think it would be cool if instead of always using the pubkeys in the same order when decaying we could randomly use different signers, I just quickly tested it worked the other way around with this diff (not sure how you feel about adding this randomness)\r\n\r\n```\r\n             for m in range(self.M):\r\n-                signers_multisig = participants[\"multisigs\"][m]\r\n+                self.log.info(self.N - 1 - m)\r\n+                signers_multisig = participants[\"multisigs\"][self.N - 1 - m]\r\n                 self._check_psbt(psbt[\"psbt\"], to, value, signers_multisig)\r\n-                signing_wallet = participants[\"signers\"][m]\r\n+                signing_wallet = participants[\"signers\"][self.N - 1 - m]\r\n                 psbt = signing_wallet.walletprocesspsbt(psbt[\"psbt\"])\r\n```\r\n\r\nThat way we can assert that any of the keys can create the 4/4 3/4 2/4 and 1/4\r\n\r\nAlso, one thing I am unsure of is if we should include this test in `test/functional/wallet_multisig_descriptor_psbt.py` since they are very similar and maybe we can use common functions but I am not sure what will be the cleanest",
      "created_at" : "2024-01-08T04:05:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1880357066",
      "id" : 1880357066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wE_jK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880357066/reactions"
      },
      "updated_at" : "2024-01-08T04:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880357066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15950706?v=4",
         "events_url" : "https://api.github.com/users/kevkevinpal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kevkevinpal/followers",
         "following_url" : "https://api.github.com/users/kevkevinpal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kevkevinpal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kevkevinpal",
         "id" : 15950706,
         "login" : "kevkevinpal",
         "node_id" : "MDQ6VXNlcjE1OTUwNzA2",
         "organizations_url" : "https://api.github.com/users/kevkevinpal/orgs",
         "received_events_url" : "https://api.github.com/users/kevkevinpal/received_events",
         "repos_url" : "https://api.github.com/users/kevkevinpal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kevkevinpal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kevkevinpal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kevkevinpal"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you for the review, and good idea @kevkevinpal!\r\n\r\n>  I think it would be cool if instead of always using the pubkeys in the same order when decaying we could randomly use different signers\r\n\r\nI added a 2nd commit to this PR with your suggestion. In a similar spirit I improved #29154 (also adding a 2nd commit with your suggestion, and in that case we can also assert that order of xpubs in the multisig descriptors don't matter since it is `sorted`).\r\n\r\n> Also, one thing I am unsure of is if we should include this test in test/functional/wallet_multisig_descriptor_psbt.py since they are very similar and maybe we can use common functions but I am not sure what will be the cleanest\r\n\r\nI don't think it would be too much trouble to combine them, but I didn't go that route because my opinion is that some code duplication is preferable to trying to generalize/combine these tests. So I went the route of keeping these as two simple independent integration tests. I don't have a strong opinion on this, but usually for test code like this I lean towards approach I took where I duplicate some code to favor simple and easy to explain/delete tests. If more people feel strongly one way or the other I'm happy to change though",
      "created_at" : "2024-01-08T17:24:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1881518666",
      "id" : 1881518666,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wJbJK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881518666/reactions"
      },
      "updated_at" : "2024-01-08T17:24:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881518666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK [7f0be89](https://github.com/bitcoin/bitcoin/pull/29156/commits/7f0be8969e721de69fc352f76db5787836803b76)",
      "created_at" : "2024-01-09T02:42:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1882243654",
      "id" : 1882243654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wMMJG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882243654/reactions"
      },
      "updated_at" : "2024-01-09T02:42:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882243654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15950706?v=4",
         "events_url" : "https://api.github.com/users/kevkevinpal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kevkevinpal/followers",
         "following_url" : "https://api.github.com/users/kevkevinpal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kevkevinpal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kevkevinpal",
         "id" : 15950706,
         "login" : "kevkevinpal",
         "node_id" : "MDQ6VXNlcjE1OTUwNzA2",
         "organizations_url" : "https://api.github.com/users/kevkevinpal/orgs",
         "received_events_url" : "https://api.github.com/users/kevkevinpal/received_events",
         "repos_url" : "https://api.github.com/users/kevkevinpal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kevkevinpal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kevkevinpal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kevkevinpal"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nA couple of things on first skim read.\r\n\r\n1) I think it is probably overkill to create a new functional test file for this. I'm not sure why it can't go in `wallet_miniscript.py`?\r\n\r\n2) Miniscript has always been described by its authors/contributors as an extension of descriptors. I personally wouldn't be against adding some Miniscript explanation, examples in `descriptors.md` but I'd want a short explanation of what Miniscript is making it clear that this decaying multisig example is enabled by Miniscript and not just added to the list of descriptor examples. Maybe longer term there should be a `miniscript.md` but for now that seems fine to me.",
      "created_at" : "2024-01-09T10:16:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1882786231",
      "id" : 1882786231,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wOQm3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882786231/reactions"
      },
      "updated_at" : "2024-01-09T10:16:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882786231",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "ACK [7f0be89](https://github.com/bitcoin/bitcoin/pull/29156/commits/7f0be8969e721de69fc352f76db5787836803b76)\r\n\r\nAdding an example for this to descriptors.md is really helpful but I think users who are unfamiliar with miniscript and descriptors might benefit from the addition of the fragments, `thresh` and `after` to the `Reference` section. Seeing these fragments used in the examples but not included the reference can introduce confusion.",
      "created_at" : "2024-01-12T11:53:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1888973157",
      "id" : 1888973157,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wl3Fl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888973157/reactions"
      },
      "updated_at" : "2024-01-12T11:53:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888973157",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/37949128?v=4",
         "events_url" : "https://api.github.com/users/Eunovo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Eunovo/followers",
         "following_url" : "https://api.github.com/users/Eunovo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Eunovo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Eunovo",
         "id" : 37949128,
         "login" : "Eunovo",
         "node_id" : "MDQ6VXNlcjM3OTQ5MTI4",
         "organizations_url" : "https://api.github.com/users/Eunovo/orgs",
         "received_events_url" : "https://api.github.com/users/Eunovo/received_events",
         "repos_url" : "https://api.github.com/users/Eunovo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Eunovo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Eunovo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Eunovo"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I tested this locally and I've observed that the test doesn't fail if you modify the external wallet's timelocks, see below:\r\n`external = multisig.getdescriptorinfo(f\"wsh(thresh({self.N},pk({f'),s:pk('.join(external_xpubs)}),sln:after(128)))\")`\r\nThe reason is that the test only sends from the external wallet once using all keys and the transactions that use the `locktimes` send from the internal wallet because that's where the funds are. Hence, changing the timelocks for the external descriptor doesn't break the test.\r\n\r\nI'm not sure if we care about this or not but fixing this is pretty simple, we just need to create a transaction that uses 3-of-4 keys and the first timelock and sends from the external wallet. The easiest way to do this is to modify the first transaction in the test. See sample code below:\r\n```\r\nself.generate(self.nodes[0], self.locktimes[0])\r\nself.sync_blocks()\r\nself.log.info(\"First, make a sending transaction, created using `walletcreatefundedpsbt` (anyone can initiate this)...\")\r\npsbt = participants[\"multisigs\"][0].walletcreatefundedpsbt(inputs=[], outputs={to: value}, feeRate=0.00010, locktime=self.locktimes[0])\r\n\r\npsbts = []\r\nself.log.info(\"Now at least M users check the psbt with decodepsbt and (if OK) signs it with walletprocesspsbt...\")\r\nfor m in random.sample(range(self.M), self.M - 1):\r\n    signers_multisig = participants[\"multisigs\"][m]\r\n    self._check_psbt(psbt[\"psbt\"], to, value, signers_multisig)\r\n    signing_wallet = participants[\"signers\"][m]\r\n    partially_signed_psbt = signing_wallet.walletprocesspsbt(psbt[\"psbt\"])\r\n    psbts.append(partially_signed_psbt[\"psbt\"])\r\n\r\nself.log.info(\"Finally, collect the signed PSBTs with combinepsbt, finalizepsbt, then broadcast the resulting transaction...\")\r\ncombined = coordinator_wallet.combinepsbt(psbts)\r\nfinalized = coordinator_wallet.finalizepsbt(combined)\r\ncoordinator_wallet.sendrawtransaction(finalized[\"hex\"])\r\n```",
      "created_at" : "2024-01-12T17:02:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1889653618",
      "id" : 1889653618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wodNy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889653618/reactions"
      },
      "updated_at" : "2024-01-12T17:02:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889653618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/37949128?v=4",
         "events_url" : "https://api.github.com/users/Eunovo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Eunovo/followers",
         "following_url" : "https://api.github.com/users/Eunovo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Eunovo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Eunovo",
         "id" : 37949128,
         "login" : "Eunovo",
         "node_id" : "MDQ6VXNlcjM3OTQ5MTI4",
         "organizations_url" : "https://api.github.com/users/Eunovo/orgs",
         "received_events_url" : "https://api.github.com/users/Eunovo/received_events",
         "repos_url" : "https://api.github.com/users/Eunovo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Eunovo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Eunovo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Eunovo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you @michaelfolkson and @Eunovo for the reviews! I agree with both of your feedback re improving `descriptors.md` docs to accompany this test. I will have a commit addressing your feedback in the coming days.\r\n\r\n> I think it is probably overkill to create a new functional test file for this. I'm not sure why it can't go in wallet_miniscript.py\r\n\r\nMy intention with this test is to provide a \"reference example\" with the same motivations and flow/architecture as #22067 (and the original issue #21278 it resolved). But taking this one step further with a \"decaying\" multisig that highlights \"Miniscript as an extension of descriptors\" and showing the same multisig architecture and signing flows \"just work\" when we utilize Miniscript.\r\n\r\nTo your point - the additional raw test coverage this provides is limited, and if anything could be accomplished in `wallet_miniscript.py`. So if a \"reference example\" that tests end-to-end functionality of a wallet like this at a high-level (and more from a user perspective) isn't valuable then this is overkill and is not needed.\r\n\r\nI think once I follow up with docs this intention will be clear. Then we can see if this additional test is useful or overkill.\r\n\r\n> modify(ing) the external wallet's timelocks\r\n\r\n@Eunovo interesting observation! We could also break up the initial deposit into multiple utxos so that we aren't only spending change after the first transaction. I played around with it locally after thinking through your writeup, but I'm leaning towards not modifying the test to try to assert this failure. Partly because modifying the external descriptor to differ from internal would be a _different wallet_ conceptually than what I have here. Ideally #22838 would be merged and I'd be using those semantics in this test and then it's even more clear that external and internal wallets should only differ in derivation path\r\n\r\nRegardless, it's cool you thought of this. For a similar wallet that uses relative time locks instead of absolute, this would be even weirder. Because the same concept could lead to the change of a spendable utxo being unspendable for a time.",
      "created_at" : "2024-01-12T18:49:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1889791034",
      "id" : 1889791034,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585wo-w6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889791034/reactions"
      },
      "updated_at" : "2024-01-12T18:51:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889791034",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK 5023b47e85161a0b35839ce03c7b5d55ff1cd4c1.",
      "created_at" : "2024-02-11T02:49:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-1937402710",
      "id" : 1937402710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII585zemtW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1937402710/reactions"
      },
      "updated_at" : "2024-02-11T02:49:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1937402710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/109078515?v=4",
         "events_url" : "https://api.github.com/users/epiccurious/events{/privacy}",
         "followers_url" : "https://api.github.com/users/epiccurious/followers",
         "following_url" : "https://api.github.com/users/epiccurious/following{/other_user}",
         "gists_url" : "https://api.github.com/users/epiccurious/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/epiccurious",
         "id" : 109078515,
         "login" : "epiccurious",
         "node_id" : "U_kgDOBoBn8w",
         "organizations_url" : "https://api.github.com/users/epiccurious/orgs",
         "received_events_url" : "https://api.github.com/users/epiccurious/received_events",
         "repos_url" : "https://api.github.com/users/epiccurious/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/epiccurious/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/epiccurious/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/epiccurious"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This is very closely based on [test/functional/wallet_multisig_descriptor_psbt.py](https://github.com/bitcoin/bitcoin/blob/master/test/functional/wallet_multisig_descriptor_psbt.py) both in code and concept.\r\n\r\nCan you articulate what meaningful difference there is?",
      "created_at" : "2024-04-09T15:48:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-2045528359",
      "id" : 2045528359,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII58557Ekn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2045528359/reactions"
      },
      "updated_at" : "2024-04-09T15:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2045528359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Can you articulate what meaningful difference there is?\r\n\r\nTests a Miniscript descriptor and asserts that it behaves as expected at different block heights as the multisig's thresh of required signers decreases.\r\n\r\nI can't judge how meaningful that is or if it deserves a standalone test. As someone who checks in occasionally I needed to convince myself I can really throw Miniscript into a descriptor and the wallet will work/behave like I'm used to",
      "created_at" : "2024-04-09T16:58:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#issuecomment-2045667575",
      "id" : 2045667575,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/29156",
      "node_id" : "IC_kwDOABII58557mj3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2045667575/reactions"
      },
      "updated_at" : "2024-04-09T16:58:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2045667575",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/29156#discussion_r1558033127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29156"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558033127"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "An interesting thing I learned with this test was psbt behavior related to `locktime`. If I created a psbt at a blockheight of 800,000 when multisig was 4-of-4 (maybe I want to pre-sign it with a cold wallet and save it for later), and then I wanted to spend it when the multisig decayed to 3-of-4 at blockheight 840,000, then wallet would not process that psbt as `complete` with 3 valid signatures like I expected (bc I guess it's using locktime of when psbt was created to know how to interpret the Miniscript and not current blockheight)\r\n\r\nI didn't investigate further or learn why that is.. or if there is a fundamental reason for this behavior or if `walletprocesspsbt` can/should be improved",
      "commit_id" : "5023b47e85161a0b35839ce03c7b5d55ff1cd4c1",
      "created_at" : "2024-04-09T17:08:32Z",
      "diff_hunk" : "@@ -0,0 +1,177 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a miniscript multisig that starts as 4-of-4 and \"decays\" to 3-of-4, 2-of-4, and finally 1-of-4 at each future halvening block height.\n+\n+Spending policy: `thresh(4,pk(key_1),pk(key_2),pk(key_3),pk(key_4),after(t1),after(t2),after(t3))`\n+This is based off of `test/functional/wallet_multisig_descriptor_psbt.py` and most code is the same.\n+\"\"\"\n+\n+import random\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class WalletMiniscriptDecayingMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser, legacy=False)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    @staticmethod\n+    def _get_xpub(wallet, internal):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        pkh_descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh(\") and d[\"internal\"] == internal, wallet.listdescriptors()[\"descriptors\"]))\n+        # Keep all key origin information (master key fingerprint and all derivation steps) for proper support of hardware devices\n+        # See section 'Key origin identification' in 'doc/descriptors.md' for more details...\n+        return pkh_descriptor[\"desc\"].split(\"pkh(\")[1].split(\")\")[0]\n+\n+    @staticmethod\n+    def _check_psbt(psbt, to, value, multisig):\n+        \"\"\"Helper function for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def participants_create_multisigs(self, external_xpubs, internal_xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        for i, node in enumerate(self.nodes):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            # Spending policy: `thresh(4,pk(key_1),pk(key_2),pk(key_3),pk(key_4),after(t1),after(t2),after(t3))`\n+            external = multisig.getdescriptorinfo(f\"wsh(thresh({self.N},pk({f'),s:pk('.join(external_xpubs)}),sln:after({f'),sln:after('.join(map(str, self.locktimes))})))\")\n+            internal = multisig.getdescriptorinfo(f\"wsh(thresh({self.N},pk({f'),s:pk('.join(internal_xpubs)}),sln:after({f'),sln:after('.join(map(str, self.locktimes))})))\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": external[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": internal[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                },\n+            ])\n+            assert all(r[\"success\"] for r in result)\n+            yield multisig\n+\n+    def run_test(self):\n+        self.M = self.num_nodes\n+        self.N = self.num_nodes\n+        self.locktimes = [128, 256, 512]  # in real-world align with future halvenings: [840000, 1050000, 1260000]\n+        assert_equal(len(self.locktimes), self.N - 1)\n+\n+        self.name = f\"{self.M}_of_{self.N}_decaying_multisig\"\n+        self.log.info(f\"Testing {self.name}...\")\n+\n+        participants = {\n+            # Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet.\n+            # This wallet will be the participant's `signer` for the resulting multisig. Avoid reusing this wallet for any other purpose (for privacy reasons).\n+            \"signers\": [node.get_wallet_rpc(node.createwallet(wallet_name=f\"participant_{self.nodes.index(node)}\", descriptors=True)[\"name\"]) for node in self.nodes],\n+            # After participants generate and exchange their xpubs they will each create their own watch-only multisig.\n+            # Note: these multisigs are all the same, this just highlights that each participant can independently verify everything on their own node.\n+            \"multisigs\": []\n+        }\n+\n+        self.log.info(\"Generate and exchange xpubs...\")\n+        external_xpubs, internal_xpubs = [[self._get_xpub(signer, internal) for signer in participants[\"signers\"]] for internal in [False, True]]\n+\n+        self.log.info(\"Every participant imports the following descriptors to create the watch-only multisig...\")\n+        participants[\"multisigs\"] = list(self.participants_create_multisigs(external_xpubs, internal_xpubs))\n+\n+        self.log.info(\"Check that every participant's multisig generates the same addresses...\")\n+        for _ in range(10):  # we check that the first 10 generated addresses are the same for all participant's multisigs\n+            receive_addresses = [multisig.getnewaddress() for multisig in participants[\"multisigs\"]]\n+            all(address == receive_addresses[0] for address in receive_addresses)\n+            change_addresses = [multisig.getrawchangeaddress() for multisig in participants[\"multisigs\"]]\n+            all(address == change_addresses[0] for address in change_addresses)\n+\n+        self.log.info(\"Get a mature utxo to send to the multisig...\")\n+        coordinator_wallet = participants[\"signers\"][0]\n+        self.generatetoaddress(self.nodes[0], 101, coordinator_wallet.getnewaddress())\n+\n+        deposit_amount = 6.15\n+        multisig_receiving_address = participants[\"multisigs\"][0].getnewaddress()\n+        self.log.info(\"Send funds to the resulting multisig receiving address...\")\n+        coordinator_wallet.sendtoaddress(multisig_receiving_address, deposit_amount)\n+        self.generate(self.nodes[0], 1)\n+        for participant in participants[\"multisigs\"]:\n+            assert_approx(participant.getbalance(), deposit_amount, vspan=0.001)\n+\n+        self.log.info(\"Send a transaction from the multisig! We can always spend with all signers!\")\n+        to = participants[\"signers\"][self.N - 1].getnewaddress()\n+        value = 1.5\n+        self.log.info(\"First, make a sending transaction, created using `walletcreatefundedpsbt` (anyone can initiate this)...\")\n+        psbt = participants[\"multisigs\"][0].walletcreatefundedpsbt(inputs=[], outputs={to: value}, feeRate=0.00010)\n+\n+        psbts = []\n+        self.log.info(\"Now at least M users check the psbt with decodepsbt and (if OK) signs it with walletprocesspsbt...\")\n+        for m in random.sample(range(self.M), self.M):\n+            signers_multisig = participants[\"multisigs\"][m]\n+            self._check_psbt(psbt[\"psbt\"], to, value, signers_multisig)\n+            signing_wallet = participants[\"signers\"][m]\n+            partially_signed_psbt = signing_wallet.walletprocesspsbt(psbt[\"psbt\"])\n+            psbts.append(partially_signed_psbt[\"psbt\"])\n+\n+        self.log.info(\"Finally, collect the signed PSBTs with combinepsbt, finalizepsbt, then broadcast the resulting transaction...\")\n+        combined = coordinator_wallet.combinepsbt(psbts)\n+        finalized = coordinator_wallet.finalizepsbt(combined)\n+        coordinator_wallet.sendrawtransaction(finalized[\"hex\"])\n+\n+        self.log.info(\"Check that balances are correct after the transaction has been included in a block.\")\n+        self.generate(self.nodes[0], 1)\n+        assert_approx(participants[\"multisigs\"][0].getbalance(), deposit_amount - value, vspan=0.001)\n+        assert_equal(participants[\"signers\"][self.N - 1].getbalance(), value)\n+\n+        self.log.info(\"Send more transactions from the multisig as required signers decay, this time with a daisy chained signing flow (one after another in series)!\")\n+        sent = value\n+        for locktime in self.locktimes:\n+            self.M -= 1\n+            self.log.info(f\"At block height >= {locktime} this multisig is {self.M}-of-{self.N}\")\n+            current_height = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['height']\n+\n+            psbt = participants[\"multisigs\"][0].walletcreatefundedpsbt(inputs=[], outputs={to: value}, feeRate=0.00010, locktime=locktime)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/29156#discussion_r1558033127",
      "id" : 1558033127,
      "line" : 154,
      "node_id" : "PRRC_kwDOABII585c3bLn",
      "original_commit_id" : "5023b47e85161a0b35839ce03c7b5d55ff1cd4c1",
      "original_line" : 154,
      "original_position" : 154,
      "original_start_line" : null,
      "path" : "test/functional/wallet_miniscript_decaying_multisig_descriptor_psbt.py",
      "position" : 154,
      "pull_request_review_id" : 1989661119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/29156",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558033127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-09T17:08:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558033127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   }
]
