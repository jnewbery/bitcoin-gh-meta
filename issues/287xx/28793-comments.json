[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28793).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [luke-jr](https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1802243288) |\n| Concept ACK | [brunoerg](https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1796514184) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n",
      "created_at" : "2023-11-04T22:21:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1793568494",
      "id" : 1793568494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585q567u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793568494/reactions"
      },
      "updated_at" : "2023-11-08T16:29:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793568494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1382486877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382486877"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was never implemented, it should probably be dropped.",
      "commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "created_at" : "2023-11-05T00:42:46Z",
      "diff_hunk" : "@@ -0,0 +1,154 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")\n+    parser_decode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_decode.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout,\n+                               help=\"output text file; default is stdout\")\n+\n+    parser_diff = subparsers.add_parser(\"diff\", help=\"compute the difference between two asmap files\")\n+    parser_diff.add_argument('-i', '--ignore-unassigned', dest=\"ignore_unassigned\", default=False, action=\"store_true\",\n+                             help=\"ignore unassigned ranges in the first input (useful when second input is filled)\")\n+    parser_diff.add_argument('-u', '--unified', dest=\"unified\", default=False, action=\"store_true\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1382486877",
      "id" : 1382486877,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SZxNd",
      "original_commit_id" : "14ff89353f6fbaa879903f63c03d76003f1f80de",
      "original_line" : 113,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1713892958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382486877/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-05T00:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1382486877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1383924519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1383924519"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "fde0193e687ad50a01a191e14fb6c052b3534bc1",
      "created_at" : "2023-11-06T20:13:13Z",
      "diff_hunk" : "@@ -0,0 +1,154 @@\n+# Copyright (c) 2022 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import sys\n+import ipaddress\n+import math\n+\n+import asmap\n+\n+def load_file(input_file, state=None):\n+    try:\n+        contents = input_file.read()\n+    except OSError as err:\n+        sys.exit(\"Input file '%s' cannot be read: %s.\" % (input_file.name, err.strerror))\n+    try:\n+        bin_asmap = asmap.ASMap.from_binary(contents)\n+    except ValueError:\n+        bin_asmap = None\n+    txt_error = None\n+    entries = None\n+    try:\n+        txt_contents = str(contents, encoding=\"utf-8\")\n+    except UnicodeError:\n+        txt_error = \"invalid UTF-8\"\n+        txt_contents = None\n+    if txt_contents is not None:\n+        entries = []\n+        for line in txt_contents.split(\"\\n\"):\n+            idx = line.find('#')\n+            if idx >= 0:\n+                line = line[:idx]\n+            line = line.lstrip(' ').rstrip(' \\t\\r\\n')\n+            if len(line) == 0:\n+                continue\n+            fields = line.split(' ')\n+            if len(fields) != 2:\n+                txt_error = \"unparseable line '%s'\" % line\n+                entries = None\n+                break\n+            prefix, asn = fields\n+            if len(asn) <= 2 or asn[:2] != \"AS\" or any(c < '0' or c > '9' for c in asn[2:]):\n+                txt_error = \"invalid ASN '%s'\" % asn\n+                entries = None\n+                break\n+            try:\n+                net = ipaddress.ip_network(prefix)\n+            except ValueError:\n+                txt_error = \"invalid network '%s'\" % prefix\n+                entries = None\n+                break\n+            entries.append((asmap.net_to_prefix(net), int(asn[2:])))\n+    if entries is not None and bin_asmap is not None and len(contents) > 0:\n+        sys.exit(\"Input file '%s' is ambiguous.\" % input_file.name)\n+    if entries is not None:\n+        if state is None:\n+            state = asmap.ASMap()\n+        state.update_multi(entries)\n+        return state\n+    if bin_asmap is not None:\n+        if state is None:\n+            return bin_asmap\n+        sys.exit(\"Input file '%s' is binary, and cannot be applied as a patch.\" % input_file.name)\n+    sys.exit(\"Input file '%s' is neither a valid binary asmap file nor valid text input (%s).\" % (input_file.name, txt_error))\n+\n+\n+def save_binary(output_file, state, fill):\n+    contents = state.to_binary(fill=fill)\n+    try:\n+        output_file.write(contents)\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def save_text(output_file, state, fill, overlapping):\n+    for prefix, asn in state.to_entries(fill=fill, overlapping=overlapping):\n+        net = asmap.prefix_to_net(prefix)\n+        try:\n+            print(\"%s AS%i\" % (net, asn), file=output_file)\n+        except OSError as err:\n+            sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+    try:\n+        output_file.close()\n+    except OSError as err:\n+        sys.exit(\"Output file '%s' cannot be written to: %s.\" % (output_file.name, err.strerror))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"Tool for performing various operations on textual and binary asmap files.\")\n+    subparsers = parser.add_subparsers(title=\"valid subcommands\", dest=\"subcommand\")\n+\n+    parser_encode = subparsers.add_parser(\"encode\", help=\"convert asmap data to binary format\")\n+    parser_encode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce size\")\n+    parser_encode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_encode.add_argument('outfile', nargs='?', type=argparse.FileType('wb'), default=sys.stdout.buffer,\n+                               help=\"output binary asmap file; default is stdout\")\n+\n+    parser_decode = subparsers.add_parser(\"decode\", help=\"convert asmap data to text format\")\n+    parser_decode.add_argument('-f', '--fill', dest=\"fill\", default=False, action=\"store_true\",\n+                               help=\"permit reassigning undefined network ranges arbitrarily to reduce length\")\n+    parser_decode.add_argument('-n', '--nonoverlapping', dest=\"overlapping\", default=True, action=\"store_false\",\n+                               help=\"output strictly non-overallping network ranges (increases output size)\")\n+    parser_decode.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer,\n+                               help=\"input asmap file (text or binary); default is stdin\")\n+    parser_decode.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout,\n+                               help=\"output text file; default is stdout\")\n+\n+    parser_diff = subparsers.add_parser(\"diff\", help=\"compute the difference between two asmap files\")\n+    parser_diff.add_argument('-i', '--ignore-unassigned', dest=\"ignore_unassigned\", default=False, action=\"store_true\",\n+                             help=\"ignore unassigned ranges in the first input (useful when second input is filled)\")\n+    parser_diff.add_argument('-u', '--unified', dest=\"unified\", default=False, action=\"store_true\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#discussion_r1383924519",
      "id" : 1383924519,
      "in_reply_to_id" : 1382486877,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585SfQMn",
      "original_commit_id" : "14ff89353f6fbaa879903f63c03d76003f1f80de",
      "original_line" : 113,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "contrib/asmap/asmap-tool.py",
      "position" : null,
      "pull_request_review_id" : 1716162584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28793",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1383924519/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-11-06T20:13:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1383924519",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-11-06T21:23:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1796514184",
      "id" : 1796514184,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585rFKGI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1796514184/reactions"
      },
      "updated_at" : "2023-11-06T21:23:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1796514184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK\r\n\r\n>The motivation is that we should maintain the tooling for de- and encoding asmap files within the bitcoin core repository because it is not possible to use an asmap file that is not encoded.\r\n\r\nThat's not a reason. Ideally, the current repo should be split into several itself - but we have technical hurdles to get to that point. No reason to add more here \"just because\"",
      "created_at" : "2023-11-08T16:28:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28793#issuecomment-1802243288",
      "id" : 1802243288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28793",
      "node_id" : "IC_kwDOABII585rbAzY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1802243288/reactions"
      },
      "updated_at" : "2023-11-08T16:28:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1802243288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   }
]
