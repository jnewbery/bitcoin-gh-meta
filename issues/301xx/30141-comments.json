[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30141).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2024-05-19T14:17:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30141#issuecomment-2119254138",
      "id" : 2119254138,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30141",
      "node_id" : "IC_kwDOABII585-UUB6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2119254138/reactions"
      },
      "updated_at" : "2024-05-19T14:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2119254138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30141#discussion_r1607094214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607094214"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Rather than adding an error return in the constructor here, wouldn't it be better to change our cuckoo cache to clamp its size when given too large a value? ie, `InitScriptExecutionCache(135000000)` is treated as `134,217,727` instead? The value passed in is only used as an approximate target in the first place. Historical context is #25527.\r\n\r\n<details>\r\n<summary>(example patch)</summary>\r\n\r\n```diff\r\n--- a/src/cuckoocache.h\r\n+++ b/src/cuckoocache.h\r\n@@ -360,16 +360,16 @@ public:\r\n      * structure\r\n      * @returns A pair of the maximum number of elements storable (see setup()\r\n      * documentation for more detail) and the approximate total size of these\r\n-     * elements in bytes or std::nullopt if the size requested is too large.\r\n+     * elements in bytes.\r\n      */\r\n-    std::optional<std::pair<uint32_t, size_t>> setup_bytes(size_t bytes)\r\n+    std::pair<uint32_t, size_t> setup_bytes(size_t bytes)\r\n     {\r\n         size_t requested_num_elems = bytes / sizeof(Element);\r\n         if (std::numeric_limits<uint32_t>::max() < requested_num_elems) {\r\n-            return std::nullopt;\r\n+            requested_num_elems = std::numeric_limits<uint32_t>::max();\r\n         }\r\n \r\n-        auto num_elems = setup(bytes/sizeof(Element));\r\n+        auto num_elems = setup(requested_num_elems);\r\n \r\n         size_t approx_size_bytes = num_elems * sizeof(Element);\r\n         return std::make_pair(num_elems, approx_size_bytes);\r\n--- a/src/script/sigcache.cpp\r\n+++ b/src/script/sigcache.cpp\r\n@@ -77,7 +77,7 @@ public:\r\n         std::unique_lock<std::shared_mutex> lock(cs_sigcache);\r\n         setValid.insert(entry);\r\n     }\r\n-    std::optional<std::pair<uint32_t, size_t>> setup_bytes(size_t n)\r\n+    std::pair<uint32_t, size_t> setup_bytes(size_t n)\r\n     {\r\n         return setValid.setup_bytes(n);\r\n     }\r\n@@ -96,10 +96,7 @@ static CSignatureCache signatureCache;\r\n // signatureCache.\r\n bool InitSignatureCache(size_t max_size_bytes)\r\n {\r\n-    auto setup_results = signatureCache.setup_bytes(max_size_bytes);\r\n-    if (!setup_results) return false;\r\n-\r\n-    const auto [num_elems, approx_size_bytes] = *setup_results;\r\n+    const auto [num_elems, approx_size_bytes] = signatureCache.setup_bytes(max_size_bytes);\r\n     LogPrintf(\"Using %zu MiB out of %zu MiB requested for signature cache, able to store %zu elements\\n\",\r\n               approx_size_bytes >> 20, max_size_bytes >> 20, num_elems);\r\n     return true;\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -1939,10 +1939,8 @@ bool InitScriptExecutionCache(size_t max_size_bytes)\r\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\r\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\r\n \r\n-    auto setup_results = g_scriptExecutionCache.setup_bytes(max_size_bytes);\r\n-    if (!setup_results) return false;\r\n+    const auto [num_elems, approx_size_bytes] = g_scriptExecutionCache.setup_bytes(max_size_bytes);\r\n \r\n-    const auto [num_elems, approx_size_bytes] = *setup_results;\r\n     LogPrintf(\"Using %zu MiB out of %zu MiB requested for script execution cache, able to store %zu elements\\n\",\r\n               approx_size_bytes >> 20, max_size_bytes >> 20, num_elems);\r\n     return true;\r\n```\r\n</detail>",
      "commit_id" : "79c9c55b27bd113885da2c36ad76e5ed145027b3",
      "created_at" : "2024-05-20T18:04:56Z",
      "diff_hunk" : "@@ -924,7 +930,7 @@ class ChainstateManager\n public:\n     using Options = kernel::ChainstateManagerOpts;\n \n-    explicit ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options);\n+    explicit ChainstateManager(const util::SignalInterrupt& interrupt, Options options, node::BlockManager::Options blockman_options, bilingual_str& error);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30141#discussion_r1607094214",
      "id" : 1607094214,
      "line" : 937,
      "node_id" : "PRRC_kwDOABII585fyk_G",
      "original_commit_id" : "353ba0a19e73e888b5788f5fa10fca682b5ea4f5",
      "original_line" : 933,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 69,
      "pull_request_review_id" : 2066739761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30141",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607094214/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-20T18:09:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607094214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30141#discussion_r1607175446"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30141"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607175446"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason to not make `max_size_bytes` a `CSignatureCache` constructor param? That way `InitSignatureCache` could go away.",
      "commit_id" : "79c9c55b27bd113885da2c36ad76e5ed145027b3",
      "created_at" : "2024-05-20T19:19:12Z",
      "diff_hunk" : "@@ -62,19 +62,11 @@ std::optional<std::pair<uint32_t, size_t>> CSignatureCache::setup_bytes(size_t n\n     return setValid.setup_bytes(n);\n }\n \n-/* In previous versions of this code, signatureCache was a local static variable\n- * in CachingTransactionSignatureChecker::VerifySignature.  We initialize\n- * signatureCache outside of VerifySignature to avoid the atomic operation per\n- * call overhead associated with local static variables even though\n- * signatureCache could be made local to VerifySignature.\n-*/\n-static CSignatureCache signatureCache;\n-\n // To be called once in AppInitMain/BasicTestingSetup to initialize the\n // signatureCache.\n-bool InitSignatureCache(size_t max_size_bytes)\n+bool InitSignatureCache(size_t max_size_bytes, CSignatureCache& signature_cache)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30141#discussion_r1607175446",
      "id" : 1607175446,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585fy40W",
      "original_commit_id" : "79c9c55b27bd113885da2c36ad76e5ed145027b3",
      "original_line" : 67,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/script/sigcache.cpp",
      "position" : 15,
      "pull_request_review_id" : 2066862012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30141",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607175446/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-20T19:19:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607175446",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
