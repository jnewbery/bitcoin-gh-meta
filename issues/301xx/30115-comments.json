[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30115).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [achow101](https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2125431251), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30115#pullrequestreview-2072120285), [willcl-ark](https://github.com/bitcoin/bitcoin/pull/30115#pullrequestreview-2073920635) |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115032923), [hebasto](https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115594712), [laanwj](https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115934921), [stickies-v](https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2117153581) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30058](https://github.com/bitcoin/bitcoin/pull/30058) (Encapsulate warnings in generalized node::Warnings and remove globals by stickies-v)\n* [#29039](https://github.com/bitcoin/bitcoin/pull/29039) (versionbits refactoring by ajtowns)\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n* [#27638](https://github.com/bitcoin/bitcoin/pull/27638) (rpc: show P2(W)SH redeemScript in getrawtransaction #27637 by Riahiamirreza)\n* [#25979](https://github.com/bitcoin/bitcoin/pull/25979) ([WIP] wallet: standardize change output detection process by furszy)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2024-05-15T18:52:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2113242001",
      "id" : 2113242001,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII58599YOR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113242001/reactions"
      },
      "updated_at" : "2024-05-23T14:01:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113242001",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I didn't check exhaustively, though, since that would be a lot more work and I think we have a clang-tidy check that would catch those cases.\r\n\r\nIndeed, I believe c-i should be doing that check. But just in case, from the PR description:\r\n\r\n> I ran these changes through clang-tidy with performance-move-const-arg and bugprone-use-after-move and no bugs were detected (though that's obviously not to say it can be trusted 100%).",
      "created_at" : "2024-05-16T01:44:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2113778062",
      "id" : 2113778062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII5859_bGO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113778062/reactions"
      },
      "updated_at" : "2024-05-16T01:46:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113778062",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nCould this be a case for a clang-tidy plugin?",
      "created_at" : "2024-05-16T11:56:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115032923",
      "id" : 2115032923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-ENdb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115032923/reactions"
      },
      "updated_at" : "2024-05-16T11:56:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115032923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Could this be a case for a clang-tidy plugin?\r\n\r\nI considered this, but I don't think so. UniValue copies are reasonable in many cases, but our use of them often lends itself to moving. So we can't detect and disable copies as a rule, and (I assume) if clang-tidy could detect and suggest possible moves as optimizations, it would be offering a generic version of that already.\r\n\r\nHere's an upstream discussion about it that has apparently gone stale: https://github.com/llvm/llvm-project/issues/53489",
      "created_at" : "2024-05-16T15:45:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115593653",
      "id" : 2115593653,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-GWW1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115593653/reactions"
      },
      "updated_at" : "2024-05-16T15:45:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115593653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2024-05-16T15:45:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115594712",
      "id" : 2115594712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-GWnY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115594712/reactions"
      },
      "updated_at" : "2024-05-16T15:45:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115594712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2024-05-16T15:51:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115606772",
      "id" : 2115606772,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-GZj0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115606772/reactions"
      },
      "updated_at" : "2024-05-16T15:51:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115606772",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Could this be a case for a clang-tidy plugin?\r\n\r\nI think the ideal thing to do for types that are potentially expensive to copy is to disable implicit copies, but provide explicit `T Copy() const` and `void CopyFrom(const T&)` methods so copies can be made where needed. (There was a `DISABLE_IMPLICIT_COPIES` macro proposed in #24641 that tried to do this, but it didn't seem possible to generalize the implementation so we never added it.) It think it would be probably be reasonable to allow univalue to be explicitly but not implicitly copied, but I'm sure @theuni would have a better intuition.",
      "created_at" : "2024-05-16T15:57:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115622164",
      "id" : 2115622164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-GdUU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115622164/reactions"
      },
      "updated_at" : "2024-05-16T15:57:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115622164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nAgree with @ryanofsky that if copy is something expensive (or generally undesirable) to do, it would make sense to make copy explicit, so that it is always a deliberate choice and stands out in code review.",
      "created_at" : "2024-05-16T18:29:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2115934921",
      "id" : 2115934921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-HprJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115934921/reactions"
      },
      "updated_at" : "2024-05-16T18:32:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115934921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\n> Indeed, I believe c-i should be doing that check.\r\n\r\nIt does: https://github.com/bitcoin/bitcoin/blob/2f53f2273da020d7fabd7c65a1bc7e69a31249b2/src/.clang-tidy#L6",
      "created_at" : "2024-05-17T09:39:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2117153581",
      "id" : 2117153581,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-MTMt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2117153581/reactions"
      },
      "updated_at" : "2024-05-17T09:39:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2117153581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nThe code changes all look correct to me too, however\r\n\r\n> @willcl-ark, however, noticed that memory usage may increase in some cases. Logically this makes no sense to me. The only plausible explanation imo is that because the moves are faster, more ops/second occur in some cases.\r\n\r\nI still have not been able to explain why i see these type of results, but I think it's most likely user error somewhere along the line.\r\n\r\nHere is one example of a puzzling result I have, in this test fetching every 5000th block via REST (previously largely addressed by #30094). In all screenshots **this PR is on the right hand side**:\r\n\r\nWe can see here this PR made 96m allocations, vs 137m, a strict improvement?\r\n\r\n![screenshot_20240517-131022](https://github.com/bitcoin/bitcoin/assets/6606587/158b4f0d-2509-498c-b9d6-857b86c44570)\r\n\r\nThe unnecessary calls to allocator functions are clearly gotten rid of:\r\n\r\n![screenshot_20240517-131039](https://github.com/bitcoin/bitcoin/assets/6606587/731fdcec-bdb5-423d-aa60-4ae7a3529b3c)\r\n\r\nHowever despite that total resource usage increases, albeit only a little, ~10MB (also see first image) :\r\n\r\n![screenshot_20240517-131046](https://github.com/bitcoin/bitcoin/assets/6606587/a120b44e-8db7-42e4-b61b-03740f7f1893)\r\n\r\n![easy-univalue-moves-comparison](https://github.com/bitcoin/bitcoin/assets/6606587/c89ab584-536f-4086-9e92-a0de07d81562)\r\n\r\nThe changes in this PR which affect this test (since #30094) are in [core_write.cpp](https://github.com/bitcoin/bitcoin/pull/30115/files#diff-48fa743e653b0ceebb1e454766c5a2e70981a44503eca6adf24895016db9eb26)\r\n\r\nI guess this may just be allocator stuff I might never get to the bottom of, but I will continue to investigate this for a little bit before bringing a full ACK back :)\r\n\r\nFWIW these changes **did** provide a measurable speedup on my test, roughly of this order:\r\n\r\n- this PR: ~ 1:43\r\n- master: ~ 1:55\r\n\r\n\r\n-------\r\n\r\nI also see similar result just fetching a single block (in this case block 800,000). Many fewer allocations, but larger total usage:\r\n\r\n![screenshot_20240517-134351](https://github.com/bitcoin/bitcoin/assets/6606587/24721337-4151-4693-8789-6661115f32e1)\r\n\r\n![screenshot_20240517-134513](https://github.com/bitcoin/bitcoin/assets/6606587/cf711912-bd96-4de5-ab9f-56ef8aab720f)\r\n\r\n\r\nI think the clues may lie in here, but I am too dumb to know what they are. For some reason after this PR a second ~30MB allocation is made. Without this PR there are 37.2MB and 24.0MB allocations made,, and with this PR those are 38.2MB and 30.9MB, and I don't understand why:\r\n\r\n![screenshot_20240517-135346](https://github.com/bitcoin/bitcoin/assets/6606587/9a471ba8-254b-4b6c-bde8-458c431e4ab8)\r\n\r\nheaptrack dumps in case anyone else wants to take a look:\r\n\r\n[heaptrack_dumps.zip](https://github.com/bitcoin/bitcoin/files/15349481/heaptrack_dumps.zip)\r\n\r\n",
      "created_at" : "2024-05-17T12:56:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2117545232",
      "id" : 2117545232,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-Ny0Q",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2117545232/reactions"
      },
      "updated_at" : "2024-05-17T12:56:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2117545232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@willcl-ark Thanks, that's very helpful. Out of curiosity, what build options are you using for these? Are optimizations on?",
      "created_at" : "2024-05-17T17:00:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2118018627",
      "id" : 2118018627,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-PmZD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2118018627/reactions"
      },
      "updated_at" : "2024-05-17T17:00:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2118018627",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Maybe rebase and re-bench after 75118a608fc22a57567743000d636bc1f969f748, which replaced some copies with moves as well?",
      "created_at" : "2024-05-20T15:05:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2120649012",
      "id" : 2120649012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-Zok0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2120649012/reactions"
      },
      "updated_at" : "2024-05-20T15:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2120649012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Maybe rebase and re-bench after [75118a6](https://github.com/bitcoin/bitcoin/commit/75118a608fc22a57567743000d636bc1f969f748), which replaced some copies with moves as well?\r\n\r\nAh, great, thanks for pointing me to that. I had pretty much this same commit locally to address the third point in this PR's description:\r\n> - Refactoring functions to accept UniValues by value rather than by const reference\r\n\r\nThough I think there are still other functions that need the same treatment.",
      "created_at" : "2024-05-20T15:23:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2120681426",
      "id" : 2120681426,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-ZwfS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2120681426/reactions"
      },
      "updated_at" : "2024-05-20T15:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2120681426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it's not really worth worrying about benchmarks here, I think it's pretty clear that moving can only be better.\r\n\r\nI'd like to get this in if there are no objections, as there's some more low-hanging fruit wrt UniValue moves.",
      "created_at" : "2024-05-22T15:47:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2125128514",
      "id" : 2125128514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-quNC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125128514/reactions"
      },
      "updated_at" : "2024-05-22T15:47:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125128514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK d7707d9843b03f20d2a8c5a45d7b3db58e169e6f\r\n\r\nChecked that only `std::move`s were added, and letting the compiler warn for use after move, which there does not appear to be any.",
      "created_at" : "2024-05-22T17:57:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2125431251",
      "id" : 2125431251,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-r4HT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125431251/reactions"
      },
      "updated_at" : "2024-05-22T17:57:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125431251",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It's unclear to me whether the `UniValue` type has a move constructor, actually. If not, then these `std::move`s have no effect.\r\n\r\n@ryanofsky If you theory is correct, then having a way to invoke `shrink_to_fit` on `UniValue`'s internal vector might be useful.",
      "created_at" : "2024-05-22T20:08:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2125658959",
      "id" : 2125658959,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-svtP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125658959/reactions"
      },
      "updated_at" : "2024-05-22T20:13:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125658959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It's unclear to me whether the `UniValue` type has a move constructor, actually. If not, then these `std::move`s have no effect.\r\n\r\n@sipa I worked up a quick bench to test exactly that: https://github.com/theuni/bitcoin/commit/35d5ffc793b59bd03b8f66bf68847ab773e914f3\r\n\r\nThe numbers look as you'd expect.\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        7,273,304.00 |              137.49 |    0.1% |      0.08 | `UniValueAssignCopy`\r\n|        1,040,156.00 |              961.39 |    0.5% |      0.02 | `UniValueAssignMove`\r\n|        9,336,776.00 |              107.10 |    0.4% |      0.10 | `UniValueConstructCopy`\r\n|          991,626.00 |            1,008.44 |    0.7% |      0.02 | `UniValueConstructMove`\r\n|       11,783,927.00 |               84.86 |    0.2% |      0.13 | `UniValuePushKVCopy`\r\n|        2,344,899.00 |              426.46 |    0.3% |      0.03 | `UniValuePushKVMove`\r\n```",
      "created_at" : "2024-05-22T20:16:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2125672769",
      "id" : 2125672769,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-szFB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125672769/reactions"
      },
      "updated_at" : "2024-05-22T20:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125672769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It's unclear to me whether the `UniValue` type has a move constructor, actually. If not, then these `std::move`s have no effect.\r\n\r\nSince this question keeps coming up (https://github.com/bitcoin/bitcoin/issues/24542#issuecomment-2107357612), what about adding `static_assert(std::is_move_constructible_v<UniValue>);` somewhere?",
      "created_at" : "2024-05-23T10:08:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2126726113",
      "id" : 2126726113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-w0Ph",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2126726113/reactions"
      },
      "updated_at" : "2024-05-23T10:08:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2126726113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @ryanofsky If you theory is correct, then having a way to invoke `shrink_to_fit` on `UniValue`'s internal vector might be useful.\r\n\r\nNot sure if this is ideal. UniValue is a recursive structure, so calling it on the top level vector only shouldn't cause any difference? Similarly, if shirking is done recursively, the runtime overhead will be equal to that of a copy, so might as well just do a copy instead? Finally, whenever a `UniValue` would be ready to shrink, it is usually one step away from being deleted completely anyway. The only missing step is to call `write()` on it to convert it to bytes to send on the wire. However that leads to an alternative, where a new write_and_destroy function is added, which recursively shrinks (deletes) the UniValue as soon as it was written to the stream. From a runtime-overhead this should be free (as the univalue is destroyed afterward anyway). I haven't tested or implemented this, but this may be a start:\r\n\r\n<details><summary>diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/common/args.cpp b/src/common/args.cpp\r\nindex c90eb0c685..e66f18277d 100644\r\n--- a/src/common/args.cpp\r\n+++ b/src/common/args.cpp\r\n@@ -248,7 +248,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\r\n         const common::SettingsSpan values{*includes};\r\n         // Range may be empty if -noincludeconf was passed\r\n         if (!values.empty()) {\r\n-            error = \"-includeconf cannot be used from commandline; -includeconf=\" + values.begin()->write();\r\n+            error = \"-includeconf cannot be used from commandline; -includeconf=\" /*+ values.begin()->write_const()*/;\r\n             return false; // pick first value as example\r\n         }\r\n     }\r\n@@ -811,7 +811,7 @@ void ArgsManager::logArgsPrefix(\r\n         for (const auto& value : arg.second) {\r\n             std::optional<unsigned int> flags = GetArgFlags('-' + arg.first);\r\n             if (flags) {\r\n-                std::string value_str = (*flags & SENSITIVE) ? \"****\" : value.write();\r\n+                std::string value_str = (*flags & SENSITIVE) ? \"****\" : \"\"/*value.write_const()*/;\r\n                 LogPrintf(\"%s %s%s=%s\\n\", prefix, section_str, arg.first, value_str);\r\n             }\r\n         }\r\n@@ -825,7 +825,7 @@ void ArgsManager::LogArgs() const\r\n         logArgsPrefix(\"Config file arg:\", section.first, section.second);\r\n     }\r\n     for (const auto& setting : m_settings.rw_settings) {\r\n-        LogPrintf(\"Setting file arg: %s = %s\\n\", setting.first, setting.second.write());\r\n+        LogPrintf(\"Setting file arg: %s = %s\\n\", setting.first, \"\"/*setting.second.write_const()*/);\r\n     }\r\n     logArgsPrefix(\"Command-line arg:\", \"\", m_settings.command_line_options);\r\n }\r\ndiff --git a/src/common/settings.cpp b/src/common/settings.cpp\r\nindex c1520dacd2..268ab39f1e 100644\r\n--- a/src/common/settings.cpp\r\n+++ b/src/common/settings.cpp\r\n@@ -99,7 +99,7 @@ bool ReadSettings(const fs::path& path, std::map<std::string, SettingsValue>& va\r\n     file.close(); // Done with file descriptor. Release while copying data.\r\n \r\n     if (!in.isObject()) {\r\n-        errors.emplace_back(strprintf(\"Found non-object value %s in settings file %s\", in.write(), fs::PathToString(path)));\r\n+        errors.emplace_back(strprintf(\"Found non-object value %s in settings file %s\", in.write_and_destroy(), fs::PathToString(path)));\r\n         return false;\r\n     }\r\n \r\n@@ -138,7 +138,7 @@ bool WriteSettings(const fs::path& path,\r\n         errors.emplace_back(strprintf(\"Error: Unable to open settings file %s for writing\", fs::PathToString(path)));\r\n         return false;\r\n     }\r\n-    file << out.write(/* prettyIndent= */ 4, /* indentLevel= */ 1) << std::endl;\r\n+    file << out.write_and_destroy(/* prettyIndent= */ 4, /* indentLevel= */ 1) << std::endl;\r\n     file.close();\r\n     return true;\r\n }\r\ndiff --git a/src/httprpc.cpp b/src/httprpc.cpp\r\nindex 3eb34dbe6a..91b1574afc 100644\r\n--- a/src/httprpc.cpp\r\n+++ b/src/httprpc.cpp\r\n@@ -87,7 +87,7 @@ static void JSONErrorReply(HTTPRequest* req, UniValue objError, const JSONRPCReq\r\n     else if (code == RPC_METHOD_NOT_FOUND)\r\n         nStatus = HTTP_NOT_FOUND;\r\n \r\n-    std::string strReply = JSONRPCReplyObj(NullUniValue, std::move(objError), jreq.id, jreq.m_json_version).write() + \"\\n\";\r\n+    std::string strReply = JSONRPCReplyObj(NullUniValue, std::move(objError), jreq.id, jreq.m_json_version).write_and_destroy() + \"\\n\";\r\n \r\n     req->WriteHeader(\"Content-Type\", \"application/json\");\r\n     req->WriteReply(nStatus, strReply);\r\n@@ -273,7 +273,7 @@ static bool HTTPReq_JSONRPC(const std::any& context, HTTPRequest* req)\r\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\r\n \r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n-        req->WriteReply(HTTP_OK, reply.write() + \"\\n\");\r\n+        req->WriteReply(HTTP_OK, reply.write_and_destroy() + \"\\n\");\r\n     } catch (UniValue& e) {\r\n         JSONErrorReply(req, std::move(e), jreq);\r\n         return false;\r\ndiff --git a/src/rest.cpp b/src/rest.cpp\r\nindex 9fc5d4af04..f83133e187 100644\r\n--- a/src/rest.cpp\r\n+++ b/src/rest.cpp\r\n@@ -269,7 +269,7 @@ static bool rest_headers(const std::any& context,\r\n         for (const CBlockIndex *pindex : headers) {\r\n             jsonHeaders.push_back(blockheaderToJSON(*tip, *pindex));\r\n         }\r\n-        std::string strJSON = jsonHeaders.write() + \"\\n\";\r\n+        std::string strJSON = jsonHeaders.write_and_destroy() + \"\\n\";\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         req->WriteReply(HTTP_OK, strJSON);\r\n         return true;\r\n@@ -338,7 +338,7 @@ static bool rest_block(const std::any& context,\r\n         DataStream block_stream{block_data};\r\n         block_stream >> TX_WITH_WITNESS(block);\r\n         UniValue objBlock = blockToJSON(chainman.m_blockman, block, *tip, *pblockindex, tx_verbosity);\r\n-        std::string strJSON = objBlock.write() + \"\\n\";\r\n+        std::string strJSON = objBlock.write_and_destroy() + \"\\n\";\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         req->WriteReply(HTTP_OK, strJSON);\r\n         return true;\r\n@@ -472,7 +472,7 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n             jsonHeaders.push_back(header.GetHex());\r\n         }\r\n \r\n-        std::string strJSON = jsonHeaders.write() + \"\\n\";\r\n+        std::string strJSON = jsonHeaders.write_and_destroy() + \"\\n\";\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         req->WriteReply(HTTP_OK, strJSON);\r\n         return true;\r\n@@ -564,7 +564,7 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     case RESTResponseFormat::JSON: {\r\n         UniValue ret(UniValue::VOBJ);\r\n         ret.pushKV(\"filter\", HexStr(filter.GetEncodedFilter()));\r\n-        std::string strJSON = ret.write() + \"\\n\";\r\n+        std::string strJSON = ret.write_and_destroy() + \"\\n\";\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         req->WriteReply(HTTP_OK, strJSON);\r\n         return true;\r\n@@ -591,7 +591,7 @@ static bool rest_chaininfo(const std::any& context, HTTPRequest* req, const std:\r\n         jsonRequest.context = context;\r\n         jsonRequest.params = UniValue(UniValue::VARR);\r\n         UniValue chainInfoObject = getblockchaininfo().HandleRequest(jsonRequest);\r\n-        std::string strJSON = chainInfoObject.write() + \"\\n\";\r\n+        std::string strJSON = chainInfoObject.write_and_destroy() + \"\\n\";\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         req->WriteReply(HTTP_OK, strJSON);\r\n         return true;\r\n@@ -634,7 +634,7 @@ static bool rest_deploymentinfo(const std::any& context, HTTPRequest* req, const\r\n         }\r\n \r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n-        req->WriteReply(HTTP_OK, getdeploymentinfo().HandleRequest(jsonRequest).write() + \"\\n\");\r\n+        req->WriteReply(HTTP_OK, getdeploymentinfo().HandleRequest(jsonRequest).write_and_destroy() + \"\\n\");\r\n         return true;\r\n     }\r\n     default: {\r\n@@ -685,9 +685,9 @@ static bool rest_mempool(const std::any& context, HTTPRequest* req, const std::s\r\n             if (verbose && mempool_sequence) {\r\n                 return RESTERR(req, HTTP_BAD_REQUEST, \"Verbose results cannot contain mempool sequence values. (hint: set \\\"verbose=false\\\")\");\r\n             }\r\n-            str_json = MempoolToJSON(*mempool, verbose, mempool_sequence).write() + \"\\n\";\r\n+            str_json = MempoolToJSON(*mempool, verbose, mempool_sequence).write_and_destroy() + \"\\n\";\r\n         } else {\r\n-            str_json = MempoolInfoToJSON(*mempool).write() + \"\\n\";\r\n+            str_json = MempoolInfoToJSON(*mempool).write_and_destroy() + \"\\n\";\r\n         }\r\n \r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n@@ -747,7 +747,7 @@ static bool rest_tx(const std::any& context, HTTPRequest* req, const std::string\r\n     case RESTResponseFormat::JSON: {\r\n         UniValue objTx(UniValue::VOBJ);\r\n         TxToUniv(*tx, /*block_hash=*/hashBlock, /*entry=*/ objTx);\r\n-        std::string strJSON = objTx.write() + \"\\n\";\r\n+        std::string strJSON = objTx.write_and_destroy() + \"\\n\";\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         req->WriteReply(HTTP_OK, strJSON);\r\n         return true;\r\n@@ -940,7 +940,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\r\n         objGetUTXOResponse.pushKV(\"utxos\", utxos);\r\n \r\n         // return json string\r\n-        std::string strJSON = objGetUTXOResponse.write() + \"\\n\";\r\n+        std::string strJSON = objGetUTXOResponse.write_and_destroy() + \"\\n\";\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         req->WriteReply(HTTP_OK, strJSON);\r\n         return true;\r\n@@ -992,7 +992,7 @@ static bool rest_blockhash_by_height(const std::any& context, HTTPRequest* req,\r\n         req->WriteHeader(\"Content-Type\", \"application/json\");\r\n         UniValue resp = UniValue(UniValue::VOBJ);\r\n         resp.pushKV(\"blockhash\", pblockindex->GetBlockHash().GetHex());\r\n-        req->WriteReply(HTTP_OK, resp.write() + \"\\n\");\r\n+        req->WriteReply(HTTP_OK, resp.write_and_destroy() + \"\\n\");\r\n         return true;\r\n     }\r\n     default: {\r\ndiff --git a/src/rpc/util.cpp b/src/rpc/util.cpp\r\nindex f5a2e9eb63..4c1d64eb35 100644\r\n--- a/src/rpc/util.cpp\r\n+++ b/src/rpc/util.cpp\r\n@@ -166,7 +166,7 @@ std::string HelpExampleCliNamed(const std::string& methodname, const RPCArgList&\r\n     for (const auto& argpair: args) {\r\n         const auto& value = argpair.second.isStr()\r\n                 ? argpair.second.get_str()\r\n-                : argpair.second.write();\r\n+                : \"\"/*argpair.second.write()*/;\r\n         result += \" \" + argpair.first + \"=\" + ShellQuoteIfNeeded(value);\r\n     }\r\n     result += \"\\n\";\r\n@@ -187,7 +187,7 @@ std::string HelpExampleRpcNamed(const std::string& methodname, const RPCArgList&\r\n     }\r\n \r\n     return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"2.0\\\", \\\"id\\\": \\\"curltest\\\", \"\r\n-           \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": \" + params.write() + \"}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\r\n+           \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": \" + params.write_and_destroy() + \"}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\r\n }\r\n \r\n // Converts a hex string to a public key if possible\r\n@@ -631,7 +631,7 @@ UniValue RPCHelpMan::HandleRequest(const JSONRPCRequest& request) const\r\n         }\r\n     }\r\n     if (!arg_mismatch.empty()) {\r\n-        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Wrong type passed:\\n%s\", arg_mismatch.write(4)));\r\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Wrong type passed:\\n%s\", arg_mismatch.write_and_destroy(4)));\r\n     }\r\n     CHECK_NONFATAL(m_req == nullptr);\r\n     m_req = &request;\r\n@@ -650,8 +650,8 @@ UniValue RPCHelpMan::HandleRequest(const JSONRPCRequest& request) const\r\n         if (!mismatch.isNull()) {\r\n             std::string explain{\r\n                 mismatch.empty() ? \"no possible results defined\" :\r\n-                mismatch.size() == 1 ? mismatch[0].write(4) :\r\n-                mismatch.write(4)};\r\n+                mismatch.size() == 1 ? \"\"/* mismatch[0].write_and_destroy(4) */:\r\n+                mismatch.write_and_destroy(4)};\r\n             throw std::runtime_error{\r\n                 strprintf(\"Internal bug detected: RPC call \\\"%s\\\" returned incorrect type:\\n%s\\n%s %s\\nPlease report this issue here: %s\\n\",\r\n                           m_name, explain,\r\n@@ -950,7 +950,7 @@ std::string RPCArg::ToDescriptionString(bool is_named_arg) const\r\n     if (m_fallback.index() == 1) {\r\n         ret += \", optional, default=\" + std::get<RPCArg::DefaultHint>(m_fallback);\r\n     } else if (m_fallback.index() == 2) {\r\n-        ret += \", optional, default=\" + std::get<RPCArg::Default>(m_fallback).write();\r\n+        ret += \", optional, default=\" ;//+ std::get<RPCArg::Default>(m_fallback).write();\r\n     } else {\r\n         switch (std::get<RPCArg::Optional>(m_fallback)) {\r\n         case RPCArg::Optional::OMITTED: {\r\ndiff --git a/src/univalue/include/univalue.h b/src/univalue/include/univalue.h\r\nindex da12157555..cc741eb84f 100644\r\n--- a/src/univalue/include/univalue.h\r\n+++ b/src/univalue/include/univalue.h\r\n@@ -73,7 +73,9 @@ public:\r\n     void getObjMap(std::map<std::string,UniValue>& kv) const;\r\n     bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes) const;\r\n     const UniValue& operator[](const std::string& key) const;\r\n+    UniValue& operator[](const std::string& key);\r\n     const UniValue& operator[](size_t index) const;\r\n+    UniValue& operator[](size_t index);\r\n     bool exists(const std::string& key) const { size_t i; return findKey(key, i); }\r\n \r\n     bool isNull() const { return (typ == VNULL); }\r\n@@ -94,8 +96,7 @@ public:\r\n     void pushKV(std::string key, UniValue val);\r\n     void pushKVs(UniValue obj);\r\n \r\n-    std::string write(unsigned int prettyIndent = 0,\r\n-                      unsigned int indentLevel = 0) const;\r\n+    std::string write_and_destroy(unsigned int prettyIndent = 0,                       unsigned int indentLevel = 0) ;\r\n \r\n     bool read(std::string_view raw);\r\n \r\n@@ -107,8 +108,8 @@ private:\r\n \r\n     void checkType(const VType& expected) const;\r\n     bool findKey(const std::string& key, size_t& retIdx) const;\r\n-    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\r\n-    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\r\n+    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s);\r\n+    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s);\r\n \r\n public:\r\n     // Strict type-specific getters, these throw std::runtime_error if the\r\ndiff --git a/src/univalue/lib/univalue.cpp b/src/univalue/lib/univalue.cpp\r\nindex 656d2e8203..8ceab1fc31 100644\r\n--- a/src/univalue/lib/univalue.cpp\r\n+++ b/src/univalue/lib/univalue.cpp\r\n@@ -197,6 +197,13 @@ const UniValue& UniValue::operator[](const std::string& key) const\r\n     return values.at(index);\r\n }\r\n \r\n+UniValue& UniValue::operator[](const std::string& key)\r\n+{\r\n+    size_t index(-1);\r\n+    if (!findKey(key, index)) index=-1;\r\n+    return values.at(index);\r\n+}\r\n+\r\n const UniValue& UniValue::operator[](size_t index) const\r\n {\r\n     if (typ != VOBJ && typ != VARR)\r\n@@ -207,6 +214,11 @@ const UniValue& UniValue::operator[](size_t index) const\r\n     return values.at(index);\r\n }\r\n \r\n+UniValue& UniValue::operator[](size_t index)\r\n+{\r\n+    return values.at(index);\r\n+}\r\n+\r\n void UniValue::checkType(const VType& expected) const\r\n {\r\n     if (typ != expected) {\r\ndiff --git a/src/univalue/lib/univalue_write.cpp b/src/univalue/lib/univalue_write.cpp\r\nindex 4a2219061a..df10467fb6 100644\r\n--- a/src/univalue/lib/univalue_write.cpp\r\n+++ b/src/univalue/lib/univalue_write.cpp\r\n@@ -28,8 +28,8 @@ static std::string json_escape(const std::string& inS)\r\n }\r\n \r\n // NOLINTNEXTLINE(misc-no-recursion)\r\n-std::string UniValue::write(unsigned int prettyIndent,\r\n-                            unsigned int indentLevel) const\r\n+std::string UniValue::write_and_destroy(unsigned int prettyIndent,\r\n+                            unsigned int indentLevel) \r\n {\r\n     std::string s;\r\n     s.reserve(1024);\r\n@@ -59,6 +59,7 @@ std::string UniValue::write(unsigned int prettyIndent,\r\n         break;\r\n     }\r\n \r\n+*this = {}; // delete\r\n     return s;\r\n }\r\n \r\n@@ -68,7 +69,7 @@ static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, std::\r\n }\r\n \r\n // NOLINTNEXTLINE(misc-no-recursion)\r\n-void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const\r\n+void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s)\r\n {\r\n     s += \"[\";\r\n     if (prettyIndent)\r\n@@ -77,7 +78,7 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\r\n     for (unsigned int i = 0; i < values.size(); i++) {\r\n         if (prettyIndent)\r\n             indentStr(prettyIndent, indentLevel, s);\r\n-        s += values[i].write(prettyIndent, indentLevel + 1);\r\n+        s += values[i].write_and_destroy(prettyIndent, indentLevel + 1);\r\n         if (i != (values.size() - 1)) {\r\n             s += \",\";\r\n         }\r\n@@ -91,7 +92,7 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\r\n }\r\n \r\n // NOLINTNEXTLINE(misc-no-recursion)\r\n-void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const\r\n+void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s)\r\n {\r\n     s += \"{\";\r\n     if (prettyIndent)\r\n@@ -103,7 +104,7 @@ void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel,\r\n         s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\r\n         if (prettyIndent)\r\n             s += \" \";\r\n-        s += values.at(i).write(prettyIndent, indentLevel + 1);\r\n+        s += values.at(i).write_and_destroy(prettyIndent, indentLevel + 1);\r\n         if (i != (values.size() - 1))\r\n             s += \",\";\r\n         if (prettyIndent)\r\n```\r\n\r\n</details>\r\n\r\n ",
      "created_at" : "2024-05-23T11:02:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2126828731",
      "id" : 2126828731,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-xNS7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2126828731/reactions"
      },
      "updated_at" : "2024-05-23T11:02:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2126828731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Went ahead and merged this. It seems the increased peak memory usage is not a major concern, and other metrics like number of allocations and run time do seem improved.\r\n\r\nMarco seems right that naively calling `shrink_to_fit might` not help much, or could be basically equivalent to copying, and there might be better ways to decrease memory usage, such as with a `write_and_destroy` method.\r\n\r\n(Note: I also edited PR description to remove @ from <span>@</span>willcl-ark, so Will doesn't receive github spam when the merge commit is pulled into other repositories.)\r\n",
      "created_at" : "2024-05-23T14:58:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2127356721",
      "id" : 2127356721,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-zOMx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2127356721/reactions"
      },
      "updated_at" : "2024-05-23T14:58:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2127356721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky Thanks.\r\n\r\nI'm going to continue working on the more complicated copies in follow-up PRs. I'll play around with your `Copy`/`CopyFrom` idea while I'm at it. If nothing else, that would be a good way to help me track down the remaining cases.",
      "created_at" : "2024-05-23T15:03:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30115#issuecomment-2127371384",
      "id" : 2127371384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30115",
      "node_id" : "IC_kwDOABII585-zRx4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2127371384/reactions"
      },
      "updated_at" : "2024-05-23T15:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2127371384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
