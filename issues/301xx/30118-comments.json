[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30118).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/30118#pullrequestreview-2068926018), [AngusP](https://github.com/bitcoin/bitcoin/pull/30118#pullrequestreview-2069197384), [stratospher](https://github.com/bitcoin/bitcoin/pull/30118#issuecomment-2124125832), [achow101](https://github.com/bitcoin/bitcoin/pull/30118#issuecomment-2125651180) |\n| Stale ACK | [rkrux](https://github.com/bitcoin/bitcoin/pull/30118#pullrequestreview-2060988698) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n",
      "created_at" : "2024-05-15T20:58:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#issuecomment-2113445276",
      "id" : 2113445276,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30118",
      "node_id" : "IC_kwDOABII5859-J2c",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113445276/reactions"
      },
      "updated_at" : "2024-05-22T20:02:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2113445276",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603491415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603491415"
         }
      },
      "author_association" : "NONE",
      "body" : "Looking at the sample output of `subversion` - `\"subversion\": \"\\/Satoshi:25.1.0\\/\"`, it doesn't seem unique enough because multiple nodes can be running the same version. Won't this cause issues in `find_conn` later?\r\n\r\nhttps://chainquery.com/bitcoin-cli/getnetworkinfo",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-16T14:31:16Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603491415",
      "id" : 1603491415,
      "line" : 630,
      "node_id" : "PRRC_kwDOABII585fk1ZX",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 630,
      "original_position" : 15,
      "original_start_line" : 629,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 15,
      "pull_request_review_id" : 2060988698,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603491415/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 629,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-16T14:37:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603491415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5960750?v=4",
         "events_url" : "https://api.github.com/users/rkrux/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rkrux/followers",
         "following_url" : "https://api.github.com/users/rkrux/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rkrux/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rkrux",
         "id" : 5960750,
         "login" : "rkrux",
         "node_id" : "MDQ6VXNlcjU5NjA3NTA=",
         "organizations_url" : "https://api.github.com/users/rkrux/orgs",
         "received_events_url" : "https://api.github.com/users/rkrux/received_events",
         "repos_url" : "https://api.github.com/users/rkrux/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rkrux/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rkrux/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rkrux"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603498152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603498152"
         }
      },
      "author_association" : "NONE",
      "body" : "`find_conn(from_connection, to_connection_subver, inbound=False)`\r\n\r\nMight as well make these calls once and store in variable instead of finding 3 times? Unless I'm missing something that requires these calls to be made every time. \r\n",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-16T14:35:23Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)\n+        self.wait_until(lambda: (peer := find_conn(to_connection, from_connection_subver, inbound=True)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29)\n+        self.wait_until(lambda: (peer := find_conn(to_connection, from_connection_subver, inbound=True)) is not None and peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603498152",
      "id" : 1603498152,
      "line" : 649,
      "node_id" : "PRRC_kwDOABII585fk3Co",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 649,
      "original_position" : 40,
      "original_start_line" : 648,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 40,
      "pull_request_review_id" : 2060988698,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603498152/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 648,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-16T14:37:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603498152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5960750?v=4",
         "events_url" : "https://api.github.com/users/rkrux/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rkrux/followers",
         "following_url" : "https://api.github.com/users/rkrux/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rkrux/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rkrux",
         "id" : 5960750,
         "login" : "rkrux",
         "node_id" : "MDQ6VXNlcjU5NjA3NTA=",
         "organizations_url" : "https://api.github.com/users/rkrux/orgs",
         "received_events_url" : "https://api.github.com/users/rkrux/received_events",
         "repos_url" : "https://api.github.com/users/rkrux/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rkrux/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rkrux/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rkrux"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603654247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603654247"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Looking at the sample output of `subversion` - `\"subversion\": \"\\/Satoshi:25.1.0\\/\"`, it doesn't seem unique enough because multiple nodes can be running the same version. Won't this cause issues in `find_conn` later?\r\n\r\nThe test framework appends the node number to the user agent string. See [test_node](https://github.com/bitcoin/bitcoin/blob/2f53f2273da020d7fabd7c65a1bc7e69a31249b2/test/functional/test_framework/test_node.py#L109).",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-16T16:02:53Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603654247",
      "id" : 1603654247,
      "in_reply_to_id" : 1603491415,
      "line" : 630,
      "node_id" : "PRRC_kwDOABII585fldJn",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 630,
      "original_position" : 15,
      "original_start_line" : 629,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 15,
      "pull_request_review_id" : 2061247415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603654247/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 629,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-16T16:19:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603654247",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603657305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603657305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Might as well make these calls once and store in variable instead of finding 3 times? Unless I'm missing something that requires these calls to be made every time.\r\n\r\nThe code waits until the data arrives. These requires polling for updates.\r\nWe could couple the checks in this way:\r\n```python3\r\n self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None\r\n                                and peer['version'] != 0\r\n                                and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)\r\n```\r\n\r\nBut I'm a ~0 here because it would make debugging harder.",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-16T16:05:19Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)\n+        self.wait_until(lambda: (peer := find_conn(to_connection, from_connection_subver, inbound=True)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29)\n+        self.wait_until(lambda: (peer := find_conn(to_connection, from_connection_subver, inbound=True)) is not None and peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1603657305",
      "id" : 1603657305,
      "in_reply_to_id" : 1603498152,
      "line" : 649,
      "node_id" : "PRRC_kwDOABII585fld5Z",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 649,
      "original_position" : 40,
      "original_start_line" : 648,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 40,
      "pull_request_review_id" : 2061247415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603657305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 648,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-16T16:19:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1603657305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605161357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605161357"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason to have a duplicate `None` check for `peer` at this point? Shouldn't it be enough to have the assert in the second-to-previous line?",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-17T15:09:36Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605161357",
      "id" : 1605161357,
      "line" : 643,
      "node_id" : "PRRC_kwDOABII585frNGN",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 643,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 32,
      "pull_request_review_id" : 2063691972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605161357/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-17T15:09:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605161357",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605249634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605249634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Any reason to have a duplicate None check for peer at this point? Shouldn't it be enough to have the assert in the second-to-previous line?\r\n\r\nNot sure if I fully grasped the question but if the peer gets disconnected for some reason in-between these two checks, this wait_until call would throw an exception as the code would be trying to use the brackets operator on a `None` value to access the \"bytesrecv_per_msg\" value.",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-17T16:09:27Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605249634",
      "id" : 1605249634,
      "in_reply_to_id" : 1605161357,
      "line" : 643,
      "node_id" : "PRRC_kwDOABII585fripi",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 643,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 32,
      "pull_request_review_id" : 2063847531,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605249634/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-17T16:09:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605249634",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605724296"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605724296"
         }
      },
      "author_association" : "NONE",
      "body" : "Hmm I see now what you mean.",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-18T09:06:44Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)\n+        self.wait_until(lambda: (peer := find_conn(to_connection, from_connection_subver, inbound=True)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29)\n+        self.wait_until(lambda: (peer := find_conn(to_connection, from_connection_subver, inbound=True)) is not None and peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605724296",
      "id" : 1605724296,
      "in_reply_to_id" : 1603498152,
      "line" : 649,
      "node_id" : "PRRC_kwDOABII585ftWiI",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 649,
      "original_position" : 40,
      "original_start_line" : 648,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 40,
      "pull_request_review_id" : 2064660139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605724296/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 648,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-18T09:06:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605724296",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5960750?v=4",
         "events_url" : "https://api.github.com/users/rkrux/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rkrux/followers",
         "following_url" : "https://api.github.com/users/rkrux/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rkrux/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rkrux",
         "id" : 5960750,
         "login" : "rkrux",
         "node_id" : "MDQ6VXNlcjU5NjA3NTA=",
         "organizations_url" : "https://api.github.com/users/rkrux/orgs",
         "received_events_url" : "https://api.github.com/users/rkrux/received_events",
         "repos_url" : "https://api.github.com/users/rkrux/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rkrux/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rkrux/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rkrux"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605724571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605724571"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sure, but then the test will fail regardless. Might as well fail early, if the peer disconnects again, no?",
      "commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "created_at" : "2024-05-18T09:09:20Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605724571",
      "id" : 1605724571,
      "in_reply_to_id" : 1605161357,
      "line" : 643,
      "node_id" : "PRRC_kwDOABII585ftWmb",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 643,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 32,
      "pull_request_review_id" : 2064660412,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605724571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-18T09:09:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605724571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605795010"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605795010"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ah ok, yeah. Now we are sync. Pushed. Thanks.",
      "commit_id" : "e9cb1168d144e4f49025b16f472827a9b4e02ca1",
      "created_at" : "2024-05-18T14:03:53Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        self.wait_until(lambda: (peer := find_conn(from_connection, to_connection_subver, inbound=False)) is not None and peer['bytesrecv_per_msg'].pop('verack', 0) >= 21)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605795010",
      "id" : 1605795010,
      "in_reply_to_id" : 1605161357,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ftnzC",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 643,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : null,
      "pull_request_review_id" : 2064765506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605795010/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-18T14:03:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605795010",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605892564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605892564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Worth adding a note to the comment?\r\n\r\n```python\r\n        # Use subversion as peer id. Test nodes have their node number appended to the UA\r\n```",
      "commit_id" : "e9cb1168d144e4f49025b16f472827a9b4e02ca1",
      "created_at" : "2024-05-18T20:26:07Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605892564",
      "id" : 1605892564,
      "in_reply_to_id" : 1603491415,
      "line" : 630,
      "node_id" : "PRRC_kwDOABII585ft_nU",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 630,
      "original_position" : 15,
      "original_start_line" : 629,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 15,
      "pull_request_review_id" : 2064946909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605892564/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 629,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-18T20:35:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605892564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1328814?v=4",
         "events_url" : "https://api.github.com/users/AngusP/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AngusP/followers",
         "following_url" : "https://api.github.com/users/AngusP/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AngusP/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AngusP",
         "id" : 1328814,
         "login" : "AngusP",
         "node_id" : "MDQ6VXNlcjEzMjg4MTQ=",
         "organizations_url" : "https://api.github.com/users/AngusP/orgs",
         "received_events_url" : "https://api.github.com/users/AngusP/received_events",
         "repos_url" : "https://api.github.com/users/AngusP/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AngusP/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AngusP/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AngusP"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605893483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605893483"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This comment now doesn't really make sense to me?\r\n\r\nMaybe\r\n```suggestion\r\n        # wait until peers have completed a version handshake and so match the\r\n        # expected connection subversion\r\n```",
      "commit_id" : "e9cb1168d144e4f49025b16f472827a9b4e02ca1",
      "created_at" : "2024-05-18T20:33:35Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605893483",
      "id" : 1605893483,
      "line" : 636,
      "node_id" : "PRRC_kwDOABII585ft_1r",
      "original_commit_id" : "e9cb1168d144e4f49025b16f472827a9b4e02ca1",
      "original_line" : 636,
      "original_position" : 21,
      "original_start_line" : 635,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 21,
      "pull_request_review_id" : 2064946909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605893483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-18T20:35:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605893483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1328814?v=4",
         "events_url" : "https://api.github.com/users/AngusP/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AngusP/followers",
         "following_url" : "https://api.github.com/users/AngusP/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AngusP/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AngusP",
         "id" : 1328814,
         "login" : "AngusP",
         "node_id" : "MDQ6VXNlcjEzMjg4MTQ=",
         "organizations_url" : "https://api.github.com/users/AngusP/orgs",
         "received_events_url" : "https://api.github.com/users/AngusP/received_events",
         "repos_url" : "https://api.github.com/users/AngusP/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AngusP/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AngusP/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AngusP"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605903225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605903225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> This comment now doesn't really make sense to me?\r\n\r\nWhy? the procedure behavior didn't change.\r\n",
      "commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "created_at" : "2024-05-18T22:06:13Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605903225",
      "id" : 1605903225,
      "in_reply_to_id" : 1605893483,
      "line" : 636,
      "node_id" : "PRRC_kwDOABII585fuCN5",
      "original_commit_id" : "e9cb1168d144e4f49025b16f472827a9b4e02ca1",
      "original_line" : 636,
      "original_position" : 21,
      "original_start_line" : 635,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 21,
      "pull_request_review_id" : 2064954523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605903225/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-18T22:07:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605903225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605903301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605903301"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Worth adding a note to the comment?\r\n> \r\n> ```python\r\n>         # Use subversion as peer id. Test nodes have their node number appended to the UA\r\n> ```\r\n\r\nsure. Pushed.",
      "commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "created_at" : "2024-05-18T22:07:19Z",
      "diff_hunk" : "@@ -627,19 +625,28 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1605903301",
      "id" : 1605903301,
      "in_reply_to_id" : 1603491415,
      "line" : 630,
      "node_id" : "PRRC_kwDOABII585fuCPF",
      "original_commit_id" : "59ba8735102aebd456bb9dc831759c82e95763c0",
      "original_line" : 630,
      "original_position" : 15,
      "original_start_line" : 629,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 15,
      "pull_request_review_id" : 2064954603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605903301/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 629,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-18T22:07:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1605903301",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606000057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606000057"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think just the way it read with the old impl vs the new, \"waiting until we find a peer connection matching some predicate\" rather than \"wait until the peer has a non-zero version\" . But on second thoughts you're right it's not functionally different so disregard my suggestion",
      "commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "created_at" : "2024-05-19T10:33:02Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606000057",
      "id" : 1606000057,
      "in_reply_to_id" : 1605893483,
      "line" : 636,
      "node_id" : "PRRC_kwDOABII585fuZ25",
      "original_commit_id" : "e9cb1168d144e4f49025b16f472827a9b4e02ca1",
      "original_line" : 636,
      "original_position" : 21,
      "original_start_line" : 635,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 21,
      "pull_request_review_id" : 2065045089,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606000057/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-19T10:33:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606000057",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1328814?v=4",
         "events_url" : "https://api.github.com/users/AngusP/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AngusP/followers",
         "following_url" : "https://api.github.com/users/AngusP/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AngusP/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AngusP",
         "id" : 1328814,
         "login" : "AngusP",
         "node_id" : "MDQ6VXNlcjEzMjg4MTQ=",
         "organizations_url" : "https://api.github.com/users/AngusP/orgs",
         "received_events_url" : "https://api.github.com/users/AngusP/received_events",
         "repos_url" : "https://api.github.com/users/AngusP/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AngusP/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AngusP/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AngusP"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606032360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606032360"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "wondering if we need the inbound check because an inbound and an outbound connection to the same `TestNode` isn't done. or did you keep it for assurance about the connection direction?",
      "commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "created_at" : "2024-05-19T13:26:03Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606032360",
      "id" : 1606032360,
      "line" : 633,
      "node_id" : "PRRC_kwDOABII585fuhvo",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 633,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 18,
      "pull_request_review_id" : 2065078997,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606032360/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-19T13:35:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606032360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606038839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606038839"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> wondering if we need the inbound check because an inbound and an outbound connection to the same `TestNode` isn't done. or did you keep it for assurance about the connection direction?\r\n\r\nBidirectional connections are allowed and quite common. E.g. in [p2p_disconnect_ban.py](https://github.com/bitcoin/bitcoin/blob/058af75874ffa2b4064e3d6d30cc50f0ec754ba8/test/functional/p2p_disconnect_ban.py#L117) or in [rpc_net.py](https://github.com/bitcoin/bitcoin/blob/058af75874ffa2b4064e3d6d30cc50f0ec754ba8/test/functional/rpc_net.py#L220).",
      "commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "created_at" : "2024-05-19T14:00:08Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606038839",
      "id" : 1606038839,
      "in_reply_to_id" : 1606032360,
      "line" : 633,
      "node_id" : "PRRC_kwDOABII585fujU3",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 633,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 18,
      "pull_request_review_id" : 2065084248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606038839/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-19T14:05:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606038839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606039710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606039710"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok. The \"version handshake\" wording refers to the complete initial negotiation round.\r\n(1) outbound send version, (2) inbound send version, (3) inbound send verack, (4) outbound send verack.",
      "commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "created_at" : "2024-05-19T14:05:24Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1606039710",
      "id" : 1606039710,
      "in_reply_to_id" : 1605893483,
      "line" : 636,
      "node_id" : "PRRC_kwDOABII585fujie",
      "original_commit_id" : "e9cb1168d144e4f49025b16f472827a9b4e02ca1",
      "original_line" : 636,
      "original_position" : 21,
      "original_start_line" : 635,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 21,
      "pull_request_review_id" : 2065084248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606039710/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-19T14:05:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1606039710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1607712689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607712689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style-wise, I wonder if it makes sense to call wait_until and find_conn 6 times, when all logic could be put into a single function, which will be passed as a `lambda` to wait_until once.\r\n\r\nI guess this would mean slightly cleaner code, but would make it harder to see which part of the single function returned `False` when a failure happens. Though, debug logs could be added to help with that, if needed.\r\n\r\nWhat do you think?",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T06:28:00Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'pong', 29))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'pong', 29))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1607712689",
      "id" : 1607712689,
      "line" : 653,
      "node_id" : "PRRC_kwDOABII585f07-x",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 653,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 44,
      "pull_request_review_id" : 2067648103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607712689/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-21T06:28:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607712689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1607713755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607713755"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Could add a comment to where the ID is set, to clarify that it is now required for `connect_nodes` to work?",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T06:29:04Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1607713755",
      "id" : 1607713755,
      "line" : 628,
      "node_id" : "PRRC_kwDOABII585f08Pb",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 628,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 13,
      "pull_request_review_id" : 2067649776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607713755/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-21T06:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1607713755",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> This approach is fragile, as any of the peers involved in the process can drop, lose, or\r\n> create a connection at any step, causing subsequent `wait_until` checks to stall indefinitely\r\n> even when the peers in question were connected successfully.\r\n\r\nI'd say the tests should avoid racy code and deterministically execute the test code line-by-line, but enforcing this in `connect_nodes` is the wrong approach. So Concept ACK.",
      "created_at" : "2024-05-21T06:30:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#issuecomment-2121847793",
      "id" : 2121847793,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30118",
      "node_id" : "IC_kwDOABII585-eNPx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2121847793/reactions"
      },
      "updated_at" : "2024-05-21T06:30:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2121847793",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608374619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608374619"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I guess this would mean slightly cleaner code, but would make it harder to see which part of the single function returned False when a failure happens. Though, debug logs could be added to help with that, if needed.\r\n>\r\n> What do you think?\r\n\r\nI don't think that the slightly cleaner code worth the extra debug logs noise we will get. These will be outputted even when peers connect successfully, so we would see some \"connect_nodes(): veracity msg hasn't arrived yet\" or \".. pong msg hasn't arrived yet\" lines regardless of the outcome. And this will be worst when peers take a bit of time to connect if we run valgrind or run it on a slow device.\r\n\r\nMaybe we could expand `wait_until` so that the provided function returns a message instead of a bool. This way, `wait_until` can print the detailed message at the end if the timeout is reached.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T13:51:18Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'pong', 29))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'pong', 29))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608374619",
      "id" : 1608374619,
      "in_reply_to_id" : 1607712689,
      "line" : 653,
      "node_id" : "PRRC_kwDOABII585f3dlb",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 653,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 44,
      "pull_request_review_id" : 2068710919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608374619/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-21T13:51:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608374619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608389058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608389058"
         }
      },
      "author_association" : "MEMBER",
      "body" : "sure. Pushed.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T13:59:29Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608389058",
      "id" : 1608389058,
      "in_reply_to_id" : 1607713755,
      "line" : 628,
      "node_id" : "PRRC_kwDOABII585f3hHC",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 628,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 13,
      "pull_request_review_id" : 2068734302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608389058/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-21T13:59:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608389058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608506110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608506110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> extra debug logs noise we will get.\r\n\r\nThe debug logs could be added when needed. There are already two log lines, so a third (when added) shouldn't matter too much, I'd say.\r\n\r\nFor example:\r\n\r\n```\r\n node1 2024-05-01T17:15:16.401946Z (mocktime: 2024-05-01T16:46:25Z) [httpworker.0] [rpc/request.cpp:187] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n node1 2024-05-01T17:15:16.453092Z (mocktime: 2024-05-01T16:46:25Z) [http] [httpserver.cpp:306] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:47742 ",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T15:11:31Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'pong', 29))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'pong', 29))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608506110",
      "id" : 1608506110,
      "in_reply_to_id" : 1607712689,
      "line" : 653,
      "node_id" : "PRRC_kwDOABII585f39r-",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 653,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 44,
      "pull_request_review_id" : 2068920296,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608506110/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-21T15:11:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608506110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608509648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608509648"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            f\"-uacomment=testnode{i}\",  # required for subversion uniqueness across peers\r\n```\r\n\r\nstyle-nit, if you retouch",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T15:13:59Z",
      "diff_hunk" : "@@ -106,7 +106,7 @@ def __init__(self, i, datadir_path, *, chain, rpchost, timewait, timeout_factor,\n             \"-debugexclude=libevent\",\n             \"-debugexclude=leveldb\",\n             \"-debugexclude=rand\",\n-            \"-uacomment=testnode%d\" % i,\n+            \"-uacomment=testnode%d\" % i,  # required for subversion uniqueness across peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608509648",
      "id" : 1608509648,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII585f3-jQ",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 109,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 5,
      "pull_request_review_id" : 2068926018,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608509648/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-21T15:21:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608509648",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608520104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608520104"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: As you remove the `version` check, I wonder if this one can be removed as well for the same reason? The final `pong` test should be necessary and sufficient already. ",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T15:20:50Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608520104",
      "id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585f4BGo",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2068926018,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608520104/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-21T15:21:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608520104",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608680140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608680140"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Style nit: Mixture of `'` and `\"` strings here and in a few places, though it was already mixed before -- `\"` seems to be the style in this file",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-21T17:16:37Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1608680140",
      "id" : 1608680140,
      "line" : 645,
      "node_id" : "PRRC_kwDOABII585f4oLM",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 645,
      "original_position" : 34,
      "original_start_line" : 644,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 34,
      "pull_request_review_id" : 2069197384,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608680140/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 644,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-21T17:59:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1608680140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1328814?v=4",
         "events_url" : "https://api.github.com/users/AngusP/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AngusP/followers",
         "following_url" : "https://api.github.com/users/AngusP/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AngusP/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AngusP",
         "id" : 1328814,
         "login" : "AngusP",
         "node_id" : "MDQ6VXNlcjEzMjg4MTQ=",
         "organizations_url" : "https://api.github.com/users/AngusP/orgs",
         "received_events_url" : "https://api.github.com/users/AngusP/received_events",
         "repos_url" : "https://api.github.com/users/AngusP/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AngusP/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AngusP/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AngusP"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "reACK 6629d1d.",
      "created_at" : "2024-05-22T08:01:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#issuecomment-2124125832",
      "id" : 2124125832,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30118",
      "node_id" : "IC_kwDOABII585-m5aI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2124125832/reactions"
      },
      "updated_at" : "2024-05-22T08:01:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2124125832",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610019226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610019226"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> nit: As you remove the `version` check, I wonder if this one can be removed as well for the same reason? The final `pong` test should be necessary and sufficient already.\r\n\r\nI removed the `version` check because `verack`s are direct responses to `version` messages at the protocol level. I'm not sure we should rely on the `pong` alone because that might change over time?",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T13:58:59Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610019226",
      "id" : 1610019226,
      "in_reply_to_id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585f9vGa",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2071309606,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610019226/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-22T13:59:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610019226",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610031890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610031890"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The debug logs could be added when needed. There are already two log lines, so a third (when added) shouldn't matter too much, I'd say.\r\n> \r\n> For example:\r\n> \r\n> ```\r\n>  node1 2024-05-01T17:15:16.401946Z (mocktime: 2024-05-01T16:46:25Z) [httpworker.0] [rpc/request.cpp:187] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n>  node1 2024-05-01T17:15:16.453092Z (mocktime: 2024-05-01T16:46:25Z) [http] [httpserver.cpp:306] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:47742 \r\n> ```\r\n\r\nHmm ok, a \"connect_nodes(), waiting for <xxxx>\" line could be useful then.\r\nIf we wrap all checks for both peers inside a single function, then on every failure, the function will re-execute some already passed checks once more. And to overcome this, we should keep a state of the connection. Which means more code (which is not bad, just the diff will be bigger).\r\nWill leave it for a follow-up just so we can move forward here. Maybe someone wants to tackle it later.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T14:05:20Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'pong', 29))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'pong', 29))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610031890",
      "id" : 1610031890,
      "in_reply_to_id" : 1607712689,
      "line" : 653,
      "node_id" : "PRRC_kwDOABII585f9yMS",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 653,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 44,
      "pull_request_review_id" : 2071330587,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610031890/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-22T14:05:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610031890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610033578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610033578"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I'm not sure we should rely on the `pong` alone because that might change over time?\r\n\r\nIf it changes (for example the ping is sent before the verack), the test will already start to fail intermittently and will need to be adjusted anyway.\r\n\r\nSee the next line comment:\r\n\r\n```\r\n        # The message bytes are counted before processing the message, so make\r\n        # sure it was fully processed by waiting for a ping.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T14:06:15Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610033578",
      "id" : 1610033578,
      "in_reply_to_id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585f9ymq",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2071333493,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610033578/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-22T14:06:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610033578",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610039510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610039510"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, sounds good to close this thread for now. ",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T14:07:24Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))\n+\n         # The message bytes are counted before processing the message, so make\n         # sure it was fully processed by waiting for a ping.\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer[\"bytesrecv_per_msg\"].pop(\"pong\", 0) >= 29 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'pong', 29))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'pong', 29))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610039510",
      "id" : 1610039510,
      "in_reply_to_id" : 1607712689,
      "line" : 653,
      "node_id" : "PRRC_kwDOABII585f90DW",
      "original_commit_id" : "f4c588c98f163e9fa9083821ba36e1053f8c1496",
      "original_line" : 653,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 44,
      "pull_request_review_id" : 2071343383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610039510/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-22T14:07:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610039510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610554624"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610554624"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> > I'm not sure we should rely on the `pong` alone because that might change over time?\r\n> \r\n> If it changes (for example the ping is sent before the verack), the test will already start to fail intermittently and will need to be adjusted anyway.\r\n\r\nI don't think thats applicable here. We cannot freely change the initial negotiation phase (the version-verack window) without a BIP for the p2p protocol change. At the protocol level, only features negotiation messages are allowed in this phase. Any other received message will be ignored and it is a reason for banning the other party.\r\n\r\n> \r\n> See the next line comment:\r\n> \r\n> ```\r\n>         # The message bytes are counted before processing the message, so make\r\n>         # sure it was fully processed by waiting for a ping.\r\n> ```\r\n\r\nWhat about including the flag indicating that the connection is ready (`fSuccessfullyConnected`) in the `getpeerinfo` response? It seems generally useful and would clean up all this code.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T19:41:29Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610554624",
      "id" : 1610554624,
      "in_reply_to_id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585f_x0A",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2072208205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610554624/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-22T19:41:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610554624",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610572476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610572476"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> > > I'm not sure we should rely on the `pong` alone because that might change over time?\r\n> > \r\n> > \r\n> > If it changes (for example the ping is sent before the verack), the test will already start to fail intermittently and will need to be adjusted anyway.\r\n> \r\n> I don't think thats applicable here. We cannot freely change the initial negotiation phase (the version-verack window) without a BIP for the p2p protocol change. At the protocol level, only features negotiation messages are allowed in this phase. Any other received message will be ignored and it is a reason for banning the other party.\r\n\r\nYes, that is what I am trying to say. The `pong` alone should be necessary and sufficient.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T19:58:31Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610572476",
      "id" : 1610572476,
      "in_reply_to_id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585f_2K8",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2072237349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610572476/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-22T19:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610572476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T20:02:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#issuecomment-2125651180",
      "id" : 2125651180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/30118",
      "node_id" : "IC_kwDOABII585-stzs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125651180/reactions"
      },
      "updated_at" : "2024-05-22T20:02:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125651180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610622809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610622809"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Yes, that is what I am trying to say. The pong alone should be necessary and sufficient.\r\n\r\nAh ok. \"goto the first message\".. now we are sync. Nice bikeshedding from my end.\r\n\r\nSo yeah, we could wait only for the `pong` or introduce a new field on the `getpeerinfo` output (`fSuccessfullyConnected` with another name like \"handshake_completed\").",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-22T20:41:35Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1610622809",
      "id" : 1610622809,
      "in_reply_to_id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585gACdZ",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2072323979,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610622809/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-22T20:41:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1610622809",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1611238787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1611238787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you'll have to tell maintainers if you want to address this nit, or leave it for a follow-up, otherwise they won't know whether it is fine to merge this from your side or not.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-23T08:26:02Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1611238787",
      "id" : 1611238787,
      "in_reply_to_id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585gCY2D",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2073234568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1611238787/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-23T08:26:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1611238787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/maflcko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maflcko/followers",
         "following_url" : "https://api.github.com/users/maflcko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maflcko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maflcko",
         "id" : 6399679,
         "login" : "maflcko",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/maflcko/orgs",
         "received_events_url" : "https://api.github.com/users/maflcko/received_events",
         "repos_url" : "https://api.github.com/users/maflcko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maflcko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maflcko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maflcko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1611669887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1611669887"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think you'll have to tell maintainers if you want to address this nit, or leave it for a follow-up, otherwise they won't know whether it is fine to merge this from your side or not.\r\n\r\nok, yes. I was thinking on the second approach, but let's move forward. This will let me un-draft #27837. Happy to review any follow-up doing this.\r\nThanks Marko for the ping and this discussion.",
      "commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "created_at" : "2024-05-23T13:12:25Z",
      "diff_hunk" : "@@ -627,19 +625,32 @@ def connect_nodes(self, a, b, *, peer_advertises_v2=None, wait_for_connect: bool\n         if not wait_for_connect:\n             return\n \n+        # Use subversion as peer id. Test nodes have their node number appended to the user agent string\n+        from_connection_subver = from_connection.getnetworkinfo()['subversion']\n+        to_connection_subver = to_connection.getnetworkinfo()['subversion']\n+\n+        def find_conn(node, peer_subversion, inbound):\n+            return next(filter(lambda peer: peer['subver'] == peer_subversion and peer['inbound'] == inbound, node.getpeerinfo()), None)\n+\n         # poll until version handshake complete to avoid race conditions\n         # with transaction relaying\n         # See comments in net_processing:\n         # * Must have a version message before anything else\n         # * Must have a verack message before anything else\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['version'] != 0 for peer in to_connection.getpeerinfo()) == to_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in from_connection.getpeerinfo()) == from_num_peers)\n-        self.wait_until(lambda: sum(peer['bytesrecv_per_msg'].pop('verack', 0) >= 21 for peer in to_connection.getpeerinfo()) == to_num_peers)\n+        self.wait_until(lambda: find_conn(from_connection, to_connection_subver, inbound=False) is not None)\n+        self.wait_until(lambda: find_conn(to_connection, from_connection_subver, inbound=True) is not None)\n+\n+        def check_bytesrecv(peer, msg_type, min_bytes_recv):\n+            assert peer is not None, \"Error: peer disconnected\"\n+            return peer['bytesrecv_per_msg'].pop(msg_type, 0) >= min_bytes_recv\n+\n+        self.wait_until(lambda: check_bytesrecv(find_conn(from_connection, to_connection_subver, inbound=False), 'verack', 21))\n+        self.wait_until(lambda: check_bytesrecv(find_conn(to_connection, from_connection_subver, inbound=True), 'verack', 21))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/30118#discussion_r1611669887",
      "id" : 1611669887,
      "in_reply_to_id" : 1608520104,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII585gECF_",
      "original_commit_id" : "6629d1d0f8285d1bf2d87341a856abe903f26c13",
      "original_line" : 648,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 37,
      "pull_request_review_id" : 2073931453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/30118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1611669887/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-23T13:12:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1611669887",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   }
]
