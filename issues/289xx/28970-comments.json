[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28970).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1970039534), [murchandamus](https://github.com/bitcoin/bitcoin/pull/28970#pullrequestreview-1977655865) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-11-29T16:25:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1832270655",
      "id" : 1832270655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII585tNjs_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832270655/reactions"
      },
      "updated_at" : "2024-04-12T03:32:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1832270655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-12-11T12:53:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1850023578",
      "id" : 1850023578,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII585uRR6a",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850023578/reactions"
      },
      "updated_at" : "2023-12-11T12:53:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850023578",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and fixed CI. This is in draft because I'm focusing on v3 stuff, can be reviewed for its approach.",
      "created_at" : "2023-12-11T19:31:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1850749413",
      "id" : 1850749413,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII585uUDHl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850749413/reactions"
      },
      "updated_at" : "2023-12-11T19:31:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850749413",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ready for un-draft?",
      "created_at" : "2024-02-22T14:43:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1959598347",
      "id" : 1959598347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5850zRkL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1959598347/reactions"
      },
      "updated_at" : "2024-02-22T14:43:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1959598347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506244026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506244026"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know it's populated due to this being accepted, but I think `Assume(result.m_replaced_transactions.has_value())` would be a good belt and suspenders to avoid UB in case of regression e.g., we redefined std::nulltopt mean no replacements",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-02-28T16:26:15Z",
      "diff_hunk" : "@@ -3047,17 +3076,7 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            LogPrint(BCLog::MEMPOOL, \"AcceptToMemoryPool: peer=%d: accepted %s (wtxid=%s) (poolsz %u txn, %u kB)\\n\",\n-                peer.m_id,\n-                orphanHash.ToString(),\n-                orphan_wtxid.ToString(),\n-                m_mempool.size(), m_mempool.DynamicMemoryUsage() / 1000);\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n-            m_orphanage.AddChildrenToWorkSet(*porphanTx);\n-            m_orphanage.EraseTx(orphanHash);\n-            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n-                AddToCompactExtraTransactions(removedTx);\n-            }\n+            ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506244026",
      "id" : 1506244026,
      "line" : 3264,
      "node_id" : "PRRC_kwDOABII585Zx3W6",
      "original_commit_id" : "bbf1b836fa9e82142c534c6d7b07389326434bde",
      "original_line" : 3079,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 266,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506244026/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506244026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506255820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506255820"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this doesn't return a boolean",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-02-28T16:34:41Z",
      "diff_hunk" : "@@ -582,6 +582,15 @@ class PeerManagerImpl final : public PeerManager\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer);\n \n+    enum class InvalidTxTask : uint8_t {\n+        NONE,\n+        ADD_ORPHAN,\n+    };\n+    /** Handle a transaction whose result was MempoolAcceptResult::ResultType::INVALID.\n+     * @returns true if this transaction is an orphan we should try to resolve. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506255820",
      "id" : 1506255820,
      "line" : 591,
      "node_id" : "PRRC_kwDOABII585Zx6PM",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 590,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 10,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506255820/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506255820",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506260613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506260613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "copy/paste error? isn't this already done in `ProcessValidTx` just above?",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-02-28T16:38:15Z",
      "diff_hunk" : "@@ -4297,28 +4373,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             ProcessValidTx(ptx, pfrom.GetId(), result.m_replaced_transactions.value());\n             pfrom.m_last_tx_time = GetTime<std::chrono::seconds>();\n-        }\n-        else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n-        {\n-            bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-\n-            // Deduplicate parent txids, so that we don't have to loop over\n-            // the same parent txid more than once down below.\n-            std::vector<uint256> unique_parents;\n-            unique_parents.reserve(tx.vin.size());\n-            for (const CTxIn& txin : tx.vin) {\n-                // We start with all parents, and then remove duplicates below.\n-                unique_parents.push_back(txin.prevout.hash);\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n+                AddToCompactExtraTransactions(removedTx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1506260613",
      "id" : 1506260613,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Zx7aF",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 4377,
      "original_position" : 210,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506260613/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1506260613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511275969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511275969"
         }
      },
      "author_association" : "MEMBER",
      "body" : "previously `MISSING_INPUTS` would have resulted in a continuation of the loop. A side-effect of this change is that we will detect if the orphan was rejected due to `m_recent_rejects` entries of its parents, which seems like a strict improvement?",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-04T14:43:38Z",
      "diff_hunk" : "@@ -3078,54 +3193,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash().ToUint256());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->HasWitness()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash().ToUint256());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphanHash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511275969",
      "id" : 1511275969,
      "line" : 3109,
      "node_id" : "PRRC_kwDOABII585aFD3B",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3128,
      "original_position" : 180,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 327,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511275969/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511275969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511279226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511279226"
         }
      },
      "author_association" : "MEMBER",
      "body" : "future work: might make sense to delete this transaction from the orphanage as well in this case if it exists so we don't try it with other peer?",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-04T14:45:50Z",
      "diff_hunk" : "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+        // We can remove this restriction (and always add wtxids to\n+        // the filter even for witness stripped transactions) once\n+        // wtxid-based relay is broadly deployed.\n+        // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n+        // for concerns around weakening security of unupgraded nodes\n+        // if we start doing this too early.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_MISSING_INPUTS:\n+    {\n+        if (std::any_of(tx->vin.cbegin(), tx->vin.cend(),\n+            [&](const auto& input) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+            { return m_recent_rejects.contains(input.prevout.hash.ToUint256()); })) {\n+            LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n+                     tx->GetHash().ToString(),\n+                     tx->GetWitnessHash().ToString());\n+            // We will continue to reject this tx since it has rejected\n+            // parents so avoid re-requesting it from other peers.\n+            // Here we add both the txid and the wtxid, as we know that\n+            // regardless of what witness is provided, we will not accept\n+            // this, so we don't need to allow for redownload of this txid\n+            // from any of our non-wtxidrelay peers.\n+            m_recent_rejects.insert(tx->GetHash().ToUint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511279226",
      "id" : 1511279226,
      "line" : 3137,
      "node_id" : "PRRC_kwDOABII585aFEp6",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3104,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 145,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511279226/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511279226",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511306814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511306814"
         }
      },
      "author_association" : "MEMBER",
      "body" : "we used to call `m_orphanage.EraseTx(orphanHash);` for each non-`TX_MISSING_INPUTS` possibility, but due to early return we don't. Can we sync this back up or justify each case this has changed for?",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-04T15:02:59Z",
      "diff_hunk" : "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511306814",
      "id" : 1511306814,
      "line" : 3086,
      "node_id" : "PRRC_kwDOABII585aFLY-",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3060,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 94,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511306814/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511306814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511328011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511328011"
         }
      },
      "author_association" : "MEMBER",
      "body" : "with changes, we now add to extra txns even if witness stripped; seems wrong",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-04T15:13:39Z",
      "diff_hunk" : "@@ -4342,63 +4412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 m_orphanage.LimitOrphans(m_opts.max_orphan_txs, m_rng);\n-            } else {\n-                LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n-                         tx.GetHash().ToString(),\n-                         tx.GetWitnessHash().ToString());\n-                // We will continue to reject this tx since it has rejected\n-                // parents so avoid re-requesting it from other peers.\n-                // Here we add both the txid and the wtxid, as we know that\n-                // regardless of what witness is provided, we will not accept\n-                // this, so we don't need to allow for redownload of this txid\n-                // from any of our non-wtxidrelay peers.\n-                m_recent_rejects.insert(tx.GetHash().ToUint256());\n-                m_recent_rejects.insert(tx.GetWitnessHash().ToUint256());\n-                m_txrequest.ForgetTxHash(tx.GetHash());\n-                m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n+            } else if (RecursiveDynamicUsage(*ptx) < 100000) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511328011",
      "id" : 1511328011,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585aFQkL",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 4415,
      "original_position" : 254,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511328011/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511328011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511344657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511344657"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this is never set",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-04T15:24:06Z",
      "diff_hunk" : "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+        self.replacement_packages = []",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511344657",
      "id" : 1511344657,
      "line" : 181,
      "node_id" : "PRRC_kwDOABII585aFUoR",
      "original_commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "original_line" : 181,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 181,
      "pull_request_review_id" : 1906612532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511344657/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T15:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511344657",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511599258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511599258"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 19015e3c9aed5709e776ef15bf9e73f126c7ea29: It seems to be using 3 nodes instead of 4. Or am I missing something?\r\n\r\nE.g.:\r\n\r\n```diff\r\ndiff --git a/test/functional/p2p_1p1c_package_relay.py b/test/functional/p2p_1p1c_package_relay.py\r\nindex 6a3ba7c3df..dda671dede 100755\r\n--- a/test/functional/p2p_1p1c_package_relay.py\r\n+++ b/test/functional/p2p_1p1c_package_relay.py\r\n@@ -36,7 +36,7 @@ FEERATE_1SAT_VB = Decimal(\"0.00001000\")\r\n class PackageRelayTest(BitcoinTestFramework):\r\n     def set_test_params(self):\r\n         self.setup_clean_chain = True\r\n-        self.num_nodes = 4\r\n+        self.num_nodes = 3\r\n         self.extra_args = [[\r\n             \"-datacarriersize=100000\",\r\n             \"-maxmempool=5\",\r\n@@ -85,7 +85,7 @@ class PackageRelayTest(BitcoinTestFramework):\r\n         # Child should already be in orphanage\r\n         self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\r\n         # Parent would have been previously rejected\r\n-        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\r\n+        self.transactions_to_presend[2] = [low_fee_parent[\"tx\"]]\r\n \r\n     def test_individual_logic(self):\r\n         node = self.nodes[0]\r\n@@ -213,7 +213,7 @@ class PackageRelayTest(BitcoinTestFramework):\r\n \r\n         self.log.info(\"Submit replacement package to node3\")\r\n         for package_hex in self.replacement_packages:\r\n-            self.nodes[3].submitpackage(package_hex)\r\n+            self.nodes[2].submitpackage(package_hex)\r\n \r\n         self.log.info(\"Wait for mempools to sync\")\r\n         self.sync_mempools(timeout=20)\r\n```",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-04T18:36:26Z",
      "diff_hunk" : "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1511599258",
      "id" : 1511599258,
      "line" : 39,
      "node_id" : "PRRC_kwDOABII585aGSya",
      "original_commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 39,
      "pull_request_review_id" : 1915025042,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511599258/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-04T18:36:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1511599258",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1512661556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512661556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The idea is this is a \"network\" test to see that the package propagates across multiple hops. 1 node is the sender, 1 node pre-receives the parent, 1 node pre-receives the child, and 1 node pre-receives nothing.",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-05T11:23:41Z",
      "diff_hunk" : "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1512661556",
      "id" : 1512661556,
      "in_reply_to_id" : 1511599258,
      "line" : 39,
      "node_id" : "PRRC_kwDOABII585aKWI0",
      "original_commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 39,
      "pull_request_review_id" : 1916618959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512661556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-05T11:28:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512661556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Working on pulling the first 2 commits out into a separate PR.",
      "created_at" : "2024-03-05T11:24:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1978540390",
      "id" : 1978540390,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII58517iFm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1978540390/reactions"
      },
      "updated_at" : "2024-03-05T11:24:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1978540390",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1512689796"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512689796"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Got it, thank you.",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-05T11:48:03Z",
      "diff_hunk" : "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1512689796",
      "id" : 1512689796,
      "in_reply_to_id" : 1511599258,
      "line" : 39,
      "node_id" : "PRRC_kwDOABII585aKdCE",
      "original_commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 39,
      "pull_request_review_id" : 1916664022,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512689796/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-05T11:48:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1512689796",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514657717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514657717"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@sdaftuar honestly this comment/link doesn't make sense to me. If it's witness-stripped, we can't add it to `m_recent_rejects` since that would blind us to any real version of the tx?",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-06T15:11:18Z",
      "diff_hunk" : "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514657717",
      "id" : 1514657717,
      "line" : 3107,
      "node_id" : "PRRC_kwDOABII585aR9e1",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3081,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 115,
      "pull_request_review_id" : 1920028235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514657717/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-06T15:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514657717",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514698744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514698744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I had to remind myself of how this works, but the concern contemplated in that comment is that if the **only** copy of a non-witness-stripped version of a transaction is from a node that has not yet upgraded to wtxid-based-relay, then an adversary could blind us to that transaction by relaying a witness-stripped version of it (and then, since txid==wtxid for witness-stripped transactions, the hash that we'd use to fetch the transaction from the non-wtxid-relay peer who has the correct version would be in our `m_recent_rejects`, and we wouldn't ever request it).\r\n\r\nAt the time that I wrote that comment, I think I also said that once wtxid-based-relay is sufficiently deployed, that we could stop worrying about this...  I don't recall when wtxid-relay was deployed but maybe we're at that point already?\r\n\r\nThere's another link to a comment thread in the PR that implemented wtxid-relay which discusses the potential impact on downstream projects, so maybe if we were to make a behavior change we should communicate that in advance so that no one is surprised.",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-06T15:34:20Z",
      "diff_hunk" : "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514698744",
      "id" : 1514698744,
      "in_reply_to_id" : 1514657717,
      "line" : 3107,
      "node_id" : "PRRC_kwDOABII585aSHf4",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3081,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 115,
      "pull_request_review_id" : 1920093386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514698744/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-06T15:34:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514698744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514744423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514744423"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems like the comment thread is concerned with what happens if:\r\n(1) the sender is using non-wtxidrelay (and thus only announces transactions by txid),\r\n(2) all of its peers are caching witness-stripped rejections by wtxid (i.e. txid),\r\n(3) there is an attacker trying to censor the sender's tx by sending witness-stripped versions of the tx ahead of the sender.\r\n\r\nThis isn't a problem if (1) isn't true, i.e. the sender is using wtxidrelay, e.g. any non-eol version of Bitcoin Core. If we see that the vast majority of nodes (that send transactions) are sending a `wtxidrelay` message, perhaps it would be safe to remove the special casing (with a message to downstream projects)?\r\n\r\nEdit: perhaps not, if btcd is an example of (1)? https://github.com/btcsuite/btcd/blob/a4f447006e7538f9e3d5ae90f54700c97fea9c3d/peer/peer.go#L2214",
      "commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "created_at" : "2024-03-06T16:00:50Z",
      "diff_hunk" : "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1514744423",
      "id" : 1514744423,
      "in_reply_to_id" : 1514657717,
      "line" : 3107,
      "node_id" : "PRRC_kwDOABII585aSSpn",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3081,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 115,
      "pull_request_review_id" : 1920164662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514744423/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-06T16:18:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1514744423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22437958726</sub>",
      "created_at" : "2024-03-08T14:23:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1985784443",
      "id" : 1985784443,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5852XKp7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985784443/reactions"
      },
      "updated_at" : "2024-03-08T14:23:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985784443",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517789807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517789807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rewrote to be more strict refactor to give reviewers less to think about. I do think it makes sense that if a parent has been rejected since the last time we looked at this orphan, we get rid of it, but I suppose we can think about that later.",
      "commit_id" : "ec8f6acc9c596bab7acd86429d7c2624acec4bbd",
      "created_at" : "2024-03-08T14:30:30Z",
      "diff_hunk" : "@@ -3078,54 +3193,15 @@ bool PeerManagerImpl::ProcessOrphanTx(Peer& peer)\n             LogPrint(BCLog::TXPACKAGES, \"   accepted orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n             ProcessValidTx(porphanTx, peer.m_id, result.m_replaced_transactions.value());\n             return true;\n-        } else if (state.GetResult() != TxValidationResult::TX_MISSING_INPUTS) {\n-            if (state.IsInvalid()) {\n-                LogPrint(BCLog::TXPACKAGES, \"   invalid orphan tx %s (wtxid=%s) from peer=%d. %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n-                    orphanHash.ToString(),\n-                    orphan_wtxid.ToString(),\n-                    peer.m_id,\n-                    state.ToString());\n-                // Maybe punish peer that gave us an invalid orphan tx\n-                MaybePunishNodeForTx(peer.m_id, state);\n-            }\n-            // Has inputs but not accepted to mempool\n-            // Probably non-standard or insufficient fee\n-            LogPrint(BCLog::TXPACKAGES, \"   removed orphan tx %s (wtxid=%s)\\n\", orphanHash.ToString(), orphan_wtxid.ToString());\n-            if (state.GetResult() != TxValidationResult::TX_WITNESS_STRIPPED) {\n-                // We can add the wtxid of this transaction to our reject filter.\n-                // Do not add txids of witness transactions or witness-stripped\n-                // transactions to the filter, as they can have been malleated;\n-                // adding such txids to the reject filter would potentially\n-                // interfere with relay of valid transactions from peers that\n-                // do not support wtxid-based relay. See\n-                // https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                // We can remove this restriction (and always add wtxids to\n-                // the filter even for witness stripped transactions) once\n-                // wtxid-based relay is broadly deployed.\n-                // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n-                // for concerns around weakening security of unupgraded nodes\n-                // if we start doing this too early.\n-                m_recent_rejects.insert(porphanTx->GetWitnessHash().ToUint256());\n-                // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n-                // then we know that the witness was irrelevant to the policy\n-                // failure, since this check depends only on the txid\n-                // (the scriptPubKey being spent is covered by the txid).\n-                // Add the txid to the reject filter to prevent repeated\n-                // processing of this transaction in the event that child\n-                // transactions are later received (resulting in\n-                // parent-fetching by txid via the orphan-handling logic).\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->HasWitness()) {\n-                    // We only add the txid if it differs from the wtxid, to\n-                    // avoid wasting entries in the rolling bloom filter.\n-                    m_recent_rejects.insert(porphanTx->GetHash().ToUint256());\n-                }\n-            }\n-            m_orphanage.EraseTx(orphanHash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517789807",
      "id" : 1517789807,
      "in_reply_to_id" : 1511275969,
      "line" : 3109,
      "node_id" : "PRRC_kwDOABII585ad6Jv",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3109,
      "original_position" : 180,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 340,
      "pull_request_review_id" : 1925001479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517789807/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-08T14:30:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517789807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517790259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517790259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Old behavior should be preserved now",
      "commit_id" : "ec8f6acc9c596bab7acd86429d7c2624acec4bbd",
      "created_at" : "2024-03-08T14:30:50Z",
      "diff_hunk" : "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517790259",
      "id" : 1517790259,
      "in_reply_to_id" : 1511306814,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ad6Qz",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3060,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1925002258,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517790259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-08T14:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517790259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517791171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517791171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "ec8f6acc9c596bab7acd86429d7c2624acec4bbd",
      "created_at" : "2024-03-08T14:31:34Z",
      "diff_hunk" : "@@ -4342,63 +4412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 m_orphanage.LimitOrphans(m_opts.max_orphan_txs, m_rng);\n-            } else {\n-                LogPrint(BCLog::MEMPOOL, \"not keeping orphan with rejected parents %s (wtxid=%s)\\n\",\n-                         tx.GetHash().ToString(),\n-                         tx.GetWitnessHash().ToString());\n-                // We will continue to reject this tx since it has rejected\n-                // parents so avoid re-requesting it from other peers.\n-                // Here we add both the txid and the wtxid, as we know that\n-                // regardless of what witness is provided, we will not accept\n-                // this, so we don't need to allow for redownload of this txid\n-                // from any of our non-wtxidrelay peers.\n-                m_recent_rejects.insert(tx.GetHash().ToUint256());\n-                m_recent_rejects.insert(tx.GetWitnessHash().ToUint256());\n-                m_txrequest.ForgetTxHash(tx.GetHash());\n-                m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n+            } else if (RecursiveDynamicUsage(*ptx) < 100000) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1517791171",
      "id" : 1517791171,
      "in_reply_to_id" : 1511328011,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ad6fD",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 4415,
      "original_position" : 254,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1925003669,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517791171/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-08T14:31:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1517791171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1519481765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519481765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "ec8f6acc9c596bab7acd86429d7c2624acec4bbd",
      "created_at" : "2024-03-11T10:19:32Z",
      "diff_hunk" : "@@ -4297,28 +4373,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             ProcessValidTx(ptx, pfrom.GetId(), result.m_replaced_transactions.value());\n             pfrom.m_last_tx_time = GetTime<std::chrono::seconds>();\n-        }\n-        else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n-        {\n-            bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-\n-            // Deduplicate parent txids, so that we don't have to loop over\n-            // the same parent txid more than once down below.\n-            std::vector<uint256> unique_parents;\n-            unique_parents.reserve(tx.vin.size());\n-            for (const CTxIn& txin : tx.vin) {\n-                // We start with all parents, and then remove duplicates below.\n-                unique_parents.push_back(txin.prevout.hash);\n+            for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n+                AddToCompactExtraTransactions(removedTx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1519481765",
      "id" : 1519481765,
      "in_reply_to_id" : 1506260613,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585akXOl",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 4377,
      "original_position" : 210,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1927446729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519481765/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-11T10:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1519481765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Opened #29619 for the first 2 commits, moving this to draft.",
      "created_at" : "2024-03-11T10:54:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1988160421",
      "id" : 1988160421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5852gOul",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1988160421/reactions"
      },
      "updated_at" : "2024-03-11T10:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1988160421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523100228"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523100228"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops, forgot to delete from a package RBF test I built on top. Fixed",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-13T12:01:38Z",
      "diff_hunk" : "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+        self.replacement_packages = []",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523100228",
      "id" : 1523100228,
      "in_reply_to_id" : 1511344657,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ayKpE",
      "original_commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "original_line" : 185,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : null,
      "pull_request_review_id" : 1933929927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523100228/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-13T12:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523100228",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased and added followups from #29619",
      "created_at" : "2024-03-13T12:08:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-1994236318",
      "id" : 1994236318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII58523aGe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1994236318/reactions"
      },
      "updated_at" : "2024-03-13T12:08:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1994236318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523804572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523804572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "there any science to these choices?",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-13T19:20:47Z",
      "diff_hunk" : "@@ -846,6 +846,23 @@ class PeerManagerImpl final : public PeerManager\n     CRollingBloomFilter m_recent_rejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n+    /**\n+     * Filter for the wtxids of transactions that were recently rejected by the mempool but are\n+     * eligible for reconsideration if submitted with other transactions.\n+     *\n+     * When a transaction's error is TxValidationResult::TX_RECONSIDERABLE (in a package or by\n+     * itself), add its wtxid to this filter.\n+     *\n+     * Upon receiving an announcement for a transaction, if it exists in this filter, do not\n+     * download the txdata.\n+     *\n+     * Reset this filter when the chain tip changes.\n+     *\n+     * Parameters are picked to be the same false positive rate but half the capacity as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523804572",
      "id" : 1523804572,
      "line" : 867,
      "node_id" : "PRRC_kwDOABII585a02mc",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 861,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 38,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523804572/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523804572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523821142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523821142"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`include_reconsiderable` seems to be true on every call-site. Perhaps this is vestigial from \"real\" package relay PRs of times past? Might be worth noting/making it default true, or dropping altogether.",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-13T19:36:08Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523821142",
      "id" : 1523821142,
      "line" : 815,
      "node_id" : "PRRC_kwDOABII585a06pW",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 809,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 18,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523821142/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523821142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523822569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523822569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(hash)) return true;\r\n```",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-13T19:37:39Z",
      "diff_hunk" : "@@ -2209,6 +2226,8 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523822569",
      "id" : 1523822569,
      "line" : 2235,
      "node_id" : "PRRC_kwDOABII585a06_p",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 2229,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 59,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523822569/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523822569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523824732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please give some documentation",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-13T19:39:58Z",
      "diff_hunk" : "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n+\n+    void MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523824732",
      "id" : 1523824732,
      "line" : 602,
      "node_id" : "PRRC_kwDOABII585a07hc",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 602,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 7,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523824762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824762"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please give some documentation",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-13T19:40:00Z",
      "diff_hunk" : "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1523824762",
      "id" : 1523824762,
      "line" : 599,
      "node_id" : "PRRC_kwDOABII585a07h6",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 599,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 4,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824762/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1523824762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525341442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525341442"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n        if (m_recent_rejects_reconsiderable.contains(wtxid)) {\r\n```\r\nthink this is the same check and would match other call of the function",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-14T18:38:54Z",
      "diff_hunk" : "@@ -4450,6 +4552,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (state.IsInvalid()) {\n             ProcessInvalidTx(pfrom.GetId(), ptx, state, /*maybe_add_extra_compact_tx=*/true);\n         }\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525341442",
      "id" : 1525341442,
      "line" : 4555,
      "node_id" : "PRRC_kwDOABII585a6t0C",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 4555,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 241,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525341442/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525341442",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525375424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525375424"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mention that this is \"merely\" an optimization(and also reduces the churn in the bloom filter as well)?",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-14T19:13:00Z",
      "diff_hunk" : "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525375424",
      "id" : 1525375424,
      "line" : 4429,
      "node_id" : "PRRC_kwDOABII585a62HA",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 4429,
      "original_position" : 110,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 195,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525375424/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525375424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525396593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525396593"
         }
      },
      "author_association" : "MEMBER",
      "body" : "if `MaybeProcess1P1CPackage` handles the (non)existence in the `m_recent_rejects_reconsiderable` filter, you could stick this inside the `AlreadyHaveTx` block, which would allow existing logging to continue happening, and seems pretty natural?",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-14T19:31:59Z",
      "diff_hunk" : "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by\n+        // itself again. However, look for a matching child in the orphanage and maybe submit it\n+        // again as a package.\n+        if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1525396593",
      "id" : 1525396593,
      "line" : 4432,
      "node_id" : "PRRC_kwDOABII585a67Rx",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 4432,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 198,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525396593/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1525396593",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526235839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526235839"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\nvoid PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& parent_ptx, NodeId nodeid)\r\n```",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T12:44:04Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526235839",
      "id" : 1526235839,
      "line" : 3234,
      "node_id" : "PRRC_kwDOABII585a-IK_",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3234,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 137,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526235839/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526235839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526239102"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526239102"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n    const auto& parent_txid{parent_ptx->GetHash()};\r\n```\r\nas well as wtxid just below",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T12:46:48Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526239102",
      "id" : 1526239102,
      "line" : 3243,
      "node_id" : "PRRC_kwDOABII585a-I9-",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3243,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 146,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526239102/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526239102",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526243536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526243536"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n\r\n    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\r\n\r\n```",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T12:50:44Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};\n+    const auto& wtxid{ptx->GetWitnessHash()};\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526243536",
      "id" : 1526243536,
      "line" : 3245,
      "node_id" : "PRRC_kwDOABII585a-KDQ",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3245,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 148,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526243536/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526243536",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526585888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526585888"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n        if (Assume(it_result != package_result.m_tx_results.end())) {\r\n```",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T17:02:58Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526585888",
      "id" : 1526585888,
      "line" : 3205,
      "node_id" : "PRRC_kwDOABII585a_dog",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3205,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 108,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526585888/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526585888",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526656636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526656636"
         }
      },
      "author_association" : "MEMBER",
      "body" : "have you considered moving this above `INVALID` and letting it fall through to call `ProcessInvalidTx` as well?",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T18:08:41Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526656636",
      "id" : 1526656636,
      "line" : 3223,
      "node_id" : "PRRC_kwDOABII585a_u58",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3223,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 126,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526656636/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526656636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526676597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526676597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We don't add orphans to vExtraTxnForCompact though, just too low aka reconsiderable?\r\n\r\nmaybe something like:\r\n\r\n> // All packages currently considered are 1p1c, which means\r\n> // any entrants to be added in vExtraTxnForCompact have already been added",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T18:25:36Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526676597",
      "id" : 1526676597,
      "line" : 3218,
      "node_id" : "PRRC_kwDOABII585a_zx1",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3218,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 121,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526676597/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526676597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526764674"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526764674"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unused",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T19:45:49Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526764674",
      "id" : 1526764674,
      "line" : 172,
      "node_id" : "PRRC_kwDOABII585bAJSC",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 172,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 172,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526764674/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526764674",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526776259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unsure what the test is covering if it's being deleted on disconnect?",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T19:57:52Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526776259",
      "id" : 1526776259,
      "line" : 206,
      "node_id" : "PRRC_kwDOABII585bAMHD",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 206,
      "original_position" : 206,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 206,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526776377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776377"
         }
      },
      "author_association" : "MEMBER",
      "body" : "double-sync for what?",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T19:58:01Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers\n+            # when the first try fails.\n+            peer.peer_disconnect()\n+\n+        self.log.info(\"Submit full packages to node0\")\n+        for package_hex in self.packages_to_submit:\n+            self.nodes[0].submitpackage(package_hex)\n+\n+        self.log.info(\"Wait for mempools to sync\")\n+        self.sync_mempools(timeout=20)\n+\n+        self.log.info(\"Wait for mempools to sync\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526776377",
      "id" : 1526776377,
      "line" : 217,
      "node_id" : "PRRC_kwDOABII585bAMI5",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 217,
      "original_position" : 217,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 217,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776377/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526776377",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526790462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526790462"
         }
      },
      "author_association" : "MEMBER",
      "body" : "had this timeout locally once",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T20:16:30Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526790462",
      "id" : 1526790462,
      "line" : 106,
      "node_id" : "PRRC_kwDOABII585bAPk-",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 106,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526790462/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526790462",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526791671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526791671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "could this subtest be in its own subroutine",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-15T20:18:04Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1526791671",
      "id" : 1526791671,
      "line" : 182,
      "node_id" : "PRRC_kwDOABII585bAP33",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 182,
      "original_position" : 182,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 182,
      "pull_request_review_id" : 1935032934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526791671/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-18T13:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1526791671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1530008039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not much science, no. It makes sense to me to use the same false positive rate. As for size, I'll run my node for a bit longer and maybe use the ratio of `m_recent_rejects` / `m_recent_rejects_reconsiderable` usage to give a more scientific number.",
      "commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "created_at" : "2024-03-19T09:26:15Z",
      "diff_hunk" : "@@ -846,6 +846,23 @@ class PeerManagerImpl final : public PeerManager\n     CRollingBloomFilter m_recent_rejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n+    /**\n+     * Filter for the wtxids of transactions that were recently rejected by the mempool but are\n+     * eligible for reconsideration if submitted with other transactions.\n+     *\n+     * When a transaction's error is TxValidationResult::TX_RECONSIDERABLE (in a package or by\n+     * itself), add its wtxid to this filter.\n+     *\n+     * Upon receiving an announcement for a transaction, if it exists in this filter, do not\n+     * download the txdata.\n+     *\n+     * Reset this filter when the chain tip changes.\n+     *\n+     * Parameters are picked to be the same false positive rate but half the capacity as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1530008039",
      "id" : 1530008039,
      "in_reply_to_id" : 1523804572,
      "line" : 867,
      "node_id" : "PRRC_kwDOABII585bMhHn",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 861,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 38,
      "pull_request_review_id" : 1945627419,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-19T09:26:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1530008886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~Vestigial from a previous iteration of this PR and future changes. Will drop~ EDIT: I forgot to flip some",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-19T09:26:51Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1530008886",
      "id" : 1530008886,
      "in_reply_to_id" : 1523821142,
      "line" : 822,
      "node_id" : "PRRC_kwDOABII585bMhU2",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 822,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 25,
      "pull_request_review_id" : 1945628865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008886/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:30:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1530008886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532216970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532216970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added a comment on top of where the package is created",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T14:45:33Z",
      "diff_hunk" : "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532216970",
      "id" : 1532216970,
      "in_reply_to_id" : 1511599258,
      "line" : 40,
      "node_id" : "PRRC_kwDOABII585bU8aK",
      "original_commit_id" : "19015e3c9aed5709e776ef15bf9e73f126c7ea29",
      "original_line" : 40,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 40,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532216970/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532216970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532237608"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532237608"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(originally there was an original broadcast, then a package RBF broadcast) no reason, deleted",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T14:57:25Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers\n+            # when the first try fails.\n+            peer.peer_disconnect()\n+\n+        self.log.info(\"Submit full packages to node0\")\n+        for package_hex in self.packages_to_submit:\n+            self.nodes[0].submitpackage(package_hex)\n+\n+        self.log.info(\"Wait for mempools to sync\")\n+        self.sync_mempools(timeout=20)\n+\n+        self.log.info(\"Wait for mempools to sync\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532237608",
      "id" : 1532237608,
      "in_reply_to_id" : 1526776377,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585bVBco",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 217,
      "original_position" : 217,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : null,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532237608/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532237608",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532243418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532243418"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I prefer how it is right now as\r\n- it's clear that it's based on the result we just got from mempool validation\r\n- it doesn't require peerman having direct access to `m_recent_rejects_reconsiderable` (which I would want to move into txdownloadman module)",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T15:00:18Z",
      "diff_hunk" : "@@ -4450,6 +4552,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (state.IsInvalid()) {\n             ProcessInvalidTx(pfrom.GetId(), ptx, state, /*maybe_add_extra_compact_tx=*/true);\n         }\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532243418",
      "id" : 1532243418,
      "in_reply_to_id" : 1525341442,
      "line" : 4572,
      "node_id" : "PRRC_kwDOABII585bVC3a",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 4572,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 257,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532243418/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532243418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532283818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532283818"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you mean by optimization? It's the same idea as `m_recent_rejects`, we don't want to waste bandwidth even though we are willing to retry low feerate things",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T15:20:55Z",
      "diff_hunk" : "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532283818",
      "id" : 1532283818,
      "in_reply_to_id" : 1525375424,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585bVMuq",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 4429,
      "original_position" : 110,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532283818/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532283818",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532285661"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532285661"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah good point as I just realize the previous thing was breaking the forcerelay stuff for low feerate txns. Moved inside that block.",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T15:21:51Z",
      "diff_hunk" : "@@ -4334,6 +4426,16 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n+        // If we find this transaction in m_recent_rejects_reconsiderable, we shouldn't try it by\n+        // itself again. However, look for a matching child in the orphanage and maybe submit it\n+        // again as a package.\n+        if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532285661",
      "id" : 1532285661,
      "in_reply_to_id" : 1525396593,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585bVNLd",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 4432,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532285661/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532285661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532366124"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366124"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T16:01:10Z",
      "diff_hunk" : "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532366124",
      "id" : 1532366124,
      "in_reply_to_id" : 1523824762,
      "line" : 602,
      "node_id" : "PRRC_kwDOABII585bVg0s",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 602,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 7,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366124/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366124",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532366193"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366193"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T16:01:13Z",
      "diff_hunk" : "@@ -596,6 +596,12 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    void ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n+\n+    void MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532366193",
      "id" : 1532366193,
      "in_reply_to_id" : 1523824732,
      "line" : 609,
      "node_id" : "PRRC_kwDOABII585bVg1x",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 609,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 14,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366193/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532366193",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532453411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532453411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, rethinking this, if the capacity is informed by maximum churn, it should just be the same as `m_recent_rejects`.",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T16:47:29Z",
      "diff_hunk" : "@@ -846,6 +846,23 @@ class PeerManagerImpl final : public PeerManager\n     CRollingBloomFilter m_recent_rejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n+    /**\n+     * Filter for the wtxids of transactions that were recently rejected by the mempool but are\n+     * eligible for reconsideration if submitted with other transactions.\n+     *\n+     * When a transaction's error is TxValidationResult::TX_RECONSIDERABLE (in a package or by\n+     * itself), add its wtxid to this filter.\n+     *\n+     * Upon receiving an announcement for a transaction, if it exists in this filter, do not\n+     * download the txdata.\n+     *\n+     * Reset this filter when the chain tip changes.\n+     *\n+     * Parameters are picked to be the same false positive rate but half the capacity as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532453411",
      "id" : 1532453411,
      "in_reply_to_id" : 1523804572,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585bV2Ij",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 861,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532453411/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532453411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532491393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532491393"
         }
      },
      "author_association" : "MEMBER",
      "body" : "we do add orphans to vExtraTxnForCompact though?",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:11:31Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532491393",
      "id" : 1532491393,
      "in_reply_to_id" : 1526676597,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585bV_aB",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3218,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532491393/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532491393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532493851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532493851"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why? There wouldn't be anything interesting in `state`",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:13:02Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532493851",
      "id" : 1532493851,
      "in_reply_to_id" : 1526656636,
      "line" : 3234,
      "node_id" : "PRRC_kwDOABII585bWAAb",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3234,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 137,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532493851/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532493851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532494577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532494577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well, it might not be a parent :shrug: most likely it's just a low feerate transaction actually. I didn't change but don't feel strongly",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:13:36Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532494577",
      "id" : 1532494577,
      "in_reply_to_id" : 1526235839,
      "line" : 3245,
      "node_id" : "PRRC_kwDOABII585bWALx",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3245,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 148,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532494577/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532494577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532517889"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532517889"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:29:58Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};\n+    const auto& wtxid{ptx->GetWitnessHash()};\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532517889",
      "id" : 1532517889,
      "in_reply_to_id" : 1526243536,
      "line" : 3258,
      "node_id" : "PRRC_kwDOABII585bWF4B",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3258,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 161,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532517889/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532517889",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532520860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532520860"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Turns out I actually just forgot to switch from true to false in a few places, and hadn't included a test for which these were important. I've added them back now and wrote a test (see \"package basic nonsegwit\"). Basically, we need to make sure we don't include reconsiderable when we're filtering for rejected parents on a `TX_MISSING_INPUTS` and when we're sending the GETDATAs, in case our parent was a low-feerate nonsegwit tx that we saw previously.",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:32:15Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532520860",
      "id" : 1532520860,
      "in_reply_to_id" : 1523821142,
      "line" : 822,
      "node_id" : "PRRC_kwDOABII585bWGmc",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 822,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 25,
      "pull_request_review_id" : 1949112319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532520860/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532520860",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532534695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532534695"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:42:56Z",
      "diff_hunk" : "@@ -2209,6 +2226,8 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532534695",
      "id" : 1532534695,
      "in_reply_to_id" : 1523822569,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585bWJ-n",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 2229,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1949626446,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532534695/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:42:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532534695",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532535179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532535179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:43:17Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx, nodeid)};\n+    bool tried_package_cpfp{false};\n+\n+    const auto& txid{ptx->GetHash()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532535179",
      "id" : 1532535179,
      "in_reply_to_id" : 1526239102,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585bWKGL",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3243,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1949627158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532535179/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:43:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532535179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532538138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532538138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess not a lot. But it is worth checking that it having seen (and rejected) the child before shouldn't impact its acceptance of the package later?",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-20T17:44:25Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")\n+        self.packages_to_submit = []\n+        self.transactions_to_presend = [[]] * self.num_nodes\n+\n+        self.log.info(\"Create transactions and then mature the coinbases\")\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_outbound_p2p_connection(P2PInterface(), p2p_idx=i, connection_type=\"outbound-full-relay\"))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in self.transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])\n+                peer.send_and_ping(msg_tx(tx))\n+            # This disconnect removes any sent orphans from the orphanage (EraseForPeer) and times\n+            # out the in-flight requests.  It is currently required for the test to pass right now,\n+            # because the node will not (re)try requesting orphan parents from multiple peers if the\n+            # first one fails.\n+            # TODO: remove this and test that the node retries orphan resolution with other peers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1532538138",
      "id" : 1532538138,
      "in_reply_to_id" : 1526776259,
      "line" : 204,
      "node_id" : "PRRC_kwDOABII585bWK0a",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 204,
      "original_position" : 206,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 204,
      "pull_request_review_id" : 1949631171,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532538138/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-20T17:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1532538138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased for silent conflict with #28950",
      "created_at" : "2024-03-20T17:55:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2010264127",
      "id" : 2010264127,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII58530jI_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2010264127/reactions"
      },
      "updated_at" : "2024-03-20T17:55:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2010264127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/22896614286</sub>",
      "created_at" : "2024-03-20T17:55:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2010264297",
      "id" : 2010264297,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII58530jLp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2010264297/reactions"
      },
      "updated_at" : "2024-03-20T17:55:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2010264297",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1533624515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533624515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-21T10:38:50Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer2, check that it is ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_parent['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+\n+        self.log.info(\"Check that the node doesn't try to validate a failed package again\")\n+        # Send the (orphan) child that has a higher feerate but not enough to bump the parent\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer1.wait_for_getdata([low_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+        # Node should request the orphan's missing parent. It has seen this parent before, but only\n+        # cached the failure by wtxid, not txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        failed_expected_logs_1p1c = []\n+        failed_expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        failed_expected_logs_1p1c.append(f\"found child {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        failed_expected_logs_1p1c.append(f\"removed orphan tx {low_fee_child['txid']} (wtxid={low_fee_child['wtxid']})\")\n+\n+        with node.assert_debug_log(failed_expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        # The transactions do not get accepted due to low feerate\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer2 announces the low feerate child, it should be ignored\n+        with node.assert_debug_log([f\"got inv: wtx {low_fee_child['wtxid']}  have\"]):\n+            peer2.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer2.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        with node.assert_debug_log([f\"didn't evaluate package for {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}), no eligible child found\"]):\n+            peer2.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        self.log.info(\"Check that the node groups a low-feerate tx with its single child in orphanage\")\n+        # Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer1.wait_for_getdata([high_child_wtxid_int])\n+        peer1.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+        # Node should request the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer1.wait_for_getdata([parent_txid_int])\n+        expected_logs_1p1c = []\n+        expected_logs_1p1c.append(f\"found tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in reconsiderable rejects, looking for child in orphanage\")\n+        expected_logs_1p1c.append(f\"found child {high_fee_child['txid']} (wtxid={high_fee_child['wtxid']}) of tx {low_fee_parent['txid']} (wtxid={low_fee_parent['wtxid']}) in orphanage, trying package evaluation\")\n+        with node.assert_debug_log(expected_logs_1p1c):\n+            peer1.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        peer1.peer_disconnect()\n+        peer2.peer_disconnect()\n+        self.sync_all()\n+\n+    def run_test(self):\n+        self.ctr = 0\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        self.log.info(\"Check 1p1c validation logic on a single node\")\n+        self.test_individual_logic()\n+\n+        self.log.info(\"Check end-to-end package relay across multiple nodes\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1533624515",
      "id" : 1533624515,
      "in_reply_to_id" : 1526791671,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585baUDD",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 182,
      "original_position" : 182,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : null,
      "pull_request_review_id" : 1951714713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533624515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-21T10:38:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533624515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1533631857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533631857"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Resolving as out of scope for this PR. Also fwiw, btcd doing announcements by txid seems to be a reason to keep it for now...",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-21T10:42:16Z",
      "diff_hunk" : "@@ -3036,6 +3045,112 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n     return;\n }\n \n+PeerManagerImpl::InvalidTxTask PeerManagerImpl::ProcessInvalidTx(const CTransactionRef& tx, NodeId nodeid, const TxValidationState& state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockNotHeld(m_peer_mutex);\n+    LogPrint(BCLog::MEMPOOLREJ, \"%s (wtxid=%s) from peer=%d was not accepted: %s\\n\",\n+             tx->GetHash().ToString(),\n+             tx->GetWitnessHash().ToString(),\n+             nodeid,\n+             state.ToString());\n+    // Maybe punish peer that gave us an tx\n+    MaybePunishNodeForTx(nodeid, state);\n+\n+    switch (state.GetResult()) {\n+    case TxValidationResult::TX_RESULT_UNSET:\n+    case TxValidationResult::TX_NO_MEMPOOL:\n+    {\n+        // This function should only be called when a transaction fails validation.\n+        Assume(false);\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_UNKNOWN:\n+    {\n+        // Transaction was not validated; we don't know that it is invalid. Do not add it to any\n+        // rejection caches or forget about it yet.\n+        return InvalidTxTask::NONE;\n+    }\n+    case TxValidationResult::TX_WITNESS_STRIPPED:\n+    {\n+        // Do not add txids of witness transactions or witness-stripped\n+        // transactions to the filter, as they can have been malleated;\n+        // adding such txids to the reject filter would potentially\n+        // interfere with relay of valid transactions from peers that\n+        // do not support wtxid-based relay. See\n+        // https://github.com/bitcoin/bitcoin/issues/8279 for details.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1533631857",
      "id" : 1533631857,
      "in_reply_to_id" : 1514657717,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585baV1x",
      "original_commit_id" : "3eddfb2147754c734c325e4ee0158872448a0a61",
      "original_line" : 3127,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1951731467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533631857/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-21T10:42:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1533631857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Enable 1-parent-1-child package relay ð (just using the existing protocol messages).\r\n\r\nImo, this isn't really what this PR does because \"package relay\" (at least to me) is something that is robust and users can rely on. As you note yourself, there is more work required to make this robust. \r\n\r\n> To make this more robust, we need receiver-side logic to retry orphan resolution with multiple peers.\r\n> To make this robust, we need to make efforts to protect some amount of orphans from eviction.\r\n\r\nWhy are we not making things more robust in or before this PR?",
      "created_at" : "2024-03-25T12:21:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2017881418",
      "id" : 2017881418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854Rm1K",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017881418/reactions"
      },
      "updated_at" : "2024-03-25T12:21:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017881418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Imo, this isn't really what this PR does because \"package relay\" (at least to me) is something that is robust and users can rely on. As you note yourself, there is more work required to make this robust.\r\n\r\nthat sounds like confusing semantic games to me? We can add \"non-robust\" to the title to be clearer if we think it can get merged...\r\n\r\n> Why are we not making things more robust in or before this PR?\r\n\r\nWhy would we tie up an improvement on relay on other improvements to relay? This feature is useful by itself in non-adversarial network conditions, which ends up being deliverable security and a bit of increased miner fee revenue.\r\n\r\nOf course, if we have a orphanage hardening PR ready for merge, we should merge that.",
      "created_at" : "2024-03-25T12:28:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2017893531",
      "id" : 2017893531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854Rpyb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017893531/reactions"
      },
      "updated_at" : "2024-03-25T12:29:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017893531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Why are we not making things more robust in or before this PR?\r\n\r\nWhy have we been okay with handling any transactions with missing parents despite all of these orphanage problems, for more than a decade? Clearly because it's useful even if not 100% reliable. There are various improvements we can make to relay. I have already implemented them, and decided I would prefer to propose the more impactful improvements before the less impactful ones.",
      "created_at" : "2024-03-25T12:33:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2017902903",
      "id" : 2017902903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854RsE3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017902903/reactions"
      },
      "updated_at" : "2024-03-25T12:33:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017902903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> that sounds like confusing semantic games to me? We can add \"non-robust\" to the title to be clearer if we think it can get merged...\r\n\r\nI think my issue is with the PR description and how this will be marketed, not the title. The title describes it quite well: we will sometimes accept 1p1c packages (although it could also mention that these packages are constructed from the orphanage). That is different from package relay (again, to me \"package relay\" implies a level of reliability).\r\n\r\n> This feature is useful by itself in non-adversarial network conditions, which ends up being deliverable security\r\n\r\n\"deliverable security\": Is this referring to the increased cost of having to mess with relay to prevent pkgs from relaying? as opposed to the current state where these pkgs just don't relay at all?\r\n\r\n> Why have we been okay with handling any transactions with missing parents despite all of these orphanage problems, for more than a decade?\r\n\r\nBecause it saves bandwidth in the honest case. Afaict, relay would be reliable without the orphanage, although much more bandwidth intensive.\r\n\r\n---\r\n\r\nI guess my wording was confusing? I have no problem with the approach in this PR nor was I suggesting to block this on other relay improvements. I was just commenting on the PR description and asking a question.\r\n\r\nThere clearly are good answers to my question but I don't appreciate the condescending tone after being asked to review this PR.",
      "created_at" : "2024-03-25T13:41:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2018034011",
      "id" : 2018034011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854SMFb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018034011/reactions"
      },
      "updated_at" : "2024-03-25T13:41:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018034011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> \"deliverable security\": Is this referring to the increased cost of having to mess with relay to prevent pkgs from relaying? as opposed to the current state where these pkgs just don't relay at all?\r\n\r\nAssuming there's a path of nodes to a miner in which they are not having their orphanages aggressively churned by an adversary,  these size 2 packages should be able to propagate. So if say a LN node goes offline or refuses to sign an updated commitment transaction that raises the transaction fee, minfee rises, the counterparty can still go to chain. It raises the bar a bit for an adversary, and the more benign cases can be resolved in the average case, letting people deploy liquidity elsewhere.\r\n\r\nFWIW I ran this branch over the last week, and when my minfee wasn't 1 I was getting about one extra package relayed every half hour.",
      "created_at" : "2024-03-25T13:47:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2018046569",
      "id" : 2018046569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854SPJp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018046569/reactions"
      },
      "updated_at" : "2024-03-25T13:47:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018046569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've updated the PR description to be more descriptive about what this PR does and doesn't do. The 1p1c \"package relay\" thing wasn't meant as false advertising; I added it to the PR description 1 month after opening because it seemed like people were underestimating how useful this is (someone was surprised when I said this PR propagates 1p1c packages).\r\n\r\nI apologize for the tone - the comment read to me like a blocking criticism since it wasn't accompanied by any other review comments. Hopefully the suggestion has been adequately addressed with the description update now.",
      "created_at" : "2024-03-25T14:28:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2018133461",
      "id" : 2018133461,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854SkXV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018133461/reactions"
      },
      "updated_at" : "2024-03-25T14:28:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2018133461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Popping in here to mention that even w/ the limitations described above, this would be super useful for LN as is. \r\n\r\nToday we're able to use the anchor outputs on commitment transactions to CPFP a force close (* caveats re pinning, RBF, etc, etc). This works OK during calm mempool conditions, but if a rapid spike occurs that causes the bottom of the mempool to fall out, then CPFP no longer works as the parent has been evicted. During one of the recent more persistent fee spikes, we saw this happening rather frequently, which then led to cascading force closes (outgoing HTLC can't timeout due to non confirmation, incoming times out, repeat) and a lots of pain and user confusion (can only wait or use a transaction \"accelerator\"). \r\n\r\nIIUC, with this PR, upgraded peers will optimistically attempt to fetch the parent (the commitment txn) when they see a transaction that appears to be fee bumping it (anchor output spend). With this behavior, on a best effort basis, if we had another massive spike, then commitment transactions would be able to confirm as upgraded peers would fetch the parent to consider/propagate. I think this is very attractive as it doesn't necessarily require a new p2p upgrade to gain the benefits, instead as nodes start to progressively update, then more of these otherwise unrecognized packages will start to propagate. \r\n\r\nIf major LN node operators are made aware of this patch, and start to run it with the node backing their LN nodes, then assuming a relay path to miners (who seem to be willing to mine/relay just about anything these days), this would be a rather nice stop gap while the greater v3/cluster work proceeds in the background. ",
      "created_at" : "2024-03-26T00:19:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2019146019",
      "id" : 2019146019,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854Wbkj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2019146019/reactions"
      },
      "updated_at" : "2024-03-26T00:21:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2019146019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/998190?v=4",
         "events_url" : "https://api.github.com/users/Roasbeef/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Roasbeef/followers",
         "following_url" : "https://api.github.com/users/Roasbeef/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Roasbeef/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Roasbeef",
         "id" : 998190,
         "login" : "Roasbeef",
         "node_id" : "MDQ6VXNlcjk5ODE5MA==",
         "organizations_url" : "https://api.github.com/users/Roasbeef/orgs",
         "received_events_url" : "https://api.github.com/users/Roasbeef/received_events",
         "repos_url" : "https://api.github.com/users/Roasbeef/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Roasbeef/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Roasbeef/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Roasbeef"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539621687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539621687"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I'd rather this return the packages then spookily populate them",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T16:20:08Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539621687",
      "id" : 1539621687,
      "line" : 80,
      "node_id" : "PRRC_kwDOABII585bxMM3",
      "original_commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 80,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539621687/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539621687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539811636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539811636"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can't seem to recreate anymore :shrug: ",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T17:44:48Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539811636",
      "id" : 1539811636,
      "in_reply_to_id" : 1526790462,
      "line" : 115,
      "node_id" : "PRRC_kwDOABII585bx6k0",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 115,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 115,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539811636/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539811636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539990420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539990420"
         }
      },
      "author_association" : "MEMBER",
      "body" : "to be clear we may have multiple orphans per outpoint lookup, yes?",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T19:39:35Z",
      "diff_hunk" : "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const\n+{\n+    LOCK(m_mutex);\n+    std::vector<CTransactionRef> children_found;\n+\n+    for (unsigned int i = 0; i < parent->vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(parent->GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539990420",
      "id" : 1539990420,
      "line" : 253,
      "node_id" : "PRRC_kwDOABII585bymOU",
      "original_commit_id" : "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "original_line" : 253,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 13,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539990420/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539990420",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539991084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539991084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "could stand a unit test and some basic fuzz coverage",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T19:39:59Z",
      "diff_hunk" : "@@ -51,6 +51,10 @@ class TxOrphanage {\n     /** Does this peer have any work to do? */\n     bool HaveTxToReconsider(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);;\n \n+    /** Get all children of this parent. */\n+    std::vector<CTransactionRef> GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539991084",
      "id" : 1539991084,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585bymYs",
      "original_commit_id" : "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "original_line" : 55,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : 5,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539991084/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539991084",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539998787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539998787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "slight readability preference, feel free to ignore",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T19:44:12Z",
      "diff_hunk" : "@@ -3181,6 +3187,92 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto package_it = package.rbegin(); package_it != package.rend(); ++package_it) {\n+        const auto& tx = *package_it;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (it_result != package_result.m_tx_results.end()) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions would already be\n+                    // there as an orphan or too low feerate tx.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539998787",
      "id" : 1539998787,
      "in_reply_to_id" : 1526656636,
      "line" : 3234,
      "node_id" : "PRRC_kwDOABII585byoRD",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 3234,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 137,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539998787/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539998787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539999774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539999774"
         }
      },
      "author_association" : "MEMBER",
      "body" : "with the added `Assume()` in `MaybeProcess1P1CPackage` I think it's ok now from this reader's standpoint, thanks",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T19:44:53Z",
      "diff_hunk" : "@@ -4450,6 +4552,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (state.IsInvalid()) {\n             ProcessInvalidTx(pfrom.GetId(), ptx, state, /*maybe_add_extra_compact_tx=*/true);\n         }\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1539999774",
      "id" : 1539999774,
      "in_reply_to_id" : 1525341442,
      "line" : 4572,
      "node_id" : "PRRC_kwDOABII585byoge",
      "original_commit_id" : "47efa940c4180e1cdc778fdaae5f086ad4085791",
      "original_line" : 4572,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 257,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539999774/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1539999774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540027738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540027738"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this change also only matters for the non-segwit case since we're checking via txid, correct?",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T20:05:51Z",
      "diff_hunk" : "@@ -4420,7 +4532,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     // protocol for getting all unconfirmed parents.\n                     const auto gtxid{GenTxid::Txid(parent_txid)};\n                     AddKnownTx(*peer, parent_txid);\n-                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) AddTxAnnouncement(pfrom, gtxid, current_time);\n+                    // Skip m_recent_rejects_reconsiderable because the missing parent may have been\n+                    // previously rejected for being too low feerate, and this orphan may be able to\n+                    // CPFP it if we consider them as a package.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540027738",
      "id" : 1540027738,
      "line" : 4537,
      "node_id" : "PRRC_kwDOABII585byvVa",
      "original_commit_id" : "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "original_line" : 4537,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 246,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540027738/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540027738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540031628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540031628"
         }
      },
      "author_association" : "MEMBER",
      "body" : "tiny preference for putting this case first",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-26T20:09:02Z",
      "diff_hunk" : "@@ -4378,6 +4482,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // peer simply for relaying a tx that our m_recent_rejects has caught,\n             // regardless of false positives.\n             return;\n+        } else if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540031628",
      "id" : 1540031628,
      "line" : 4485,
      "node_id" : "PRRC_kwDOABII585bywSM",
      "original_commit_id" : "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "original_line" : 4485,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 218,
      "pull_request_review_id" : 1960994723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540031628/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-26T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540031628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540306836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540306836"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems I had beginner's luck, got the timeout on this line after a few runs on my machine. Here is the compressed dir of the failed test run: https://github.com/theStack/bitcoin/raw/pr28970_failed_testrun/pr28970_waitforgetdata_timeout.tar.gz\r\n\r\nApparently the node has seen the wtx in the inv already before (see node0/regtest/debug.log:11237) :eyes: . I guess this is could be caused by a different MiniWallet instance spending the same UTXO in an earlier sub-test, resulting in the same transaction?",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-27T00:55:10Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540306836",
      "id" : 1540306836,
      "in_reply_to_id" : 1526790462,
      "line" : 115,
      "node_id" : "PRRC_kwDOABII585bzzeU",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 115,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 115,
      "pull_request_review_id" : 1962043659,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540306836/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-27T00:55:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540306836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540843445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540843445"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Correct. If it's a witness tx, we would have cached the error by wtxid but the request is by txid, so this would miss it.",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-27T10:32:25Z",
      "diff_hunk" : "@@ -4420,7 +4532,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     // protocol for getting all unconfirmed parents.\n                     const auto gtxid{GenTxid::Txid(parent_txid)};\n                     AddKnownTx(*peer, parent_txid);\n-                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) AddTxAnnouncement(pfrom, gtxid, current_time);\n+                    // Skip m_recent_rejects_reconsiderable because the missing parent may have been\n+                    // previously rejected for being too low feerate, and this orphan may be able to\n+                    // CPFP it if we consider them as a package.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540843445",
      "id" : 1540843445,
      "in_reply_to_id" : 1540027738,
      "line" : 4537,
      "node_id" : "PRRC_kwDOABII585b12e1",
      "original_commit_id" : "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "original_line" : 4537,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 246,
      "pull_request_review_id" : 1962910982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540843445/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-27T10:32:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540843445",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540857362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540857362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, we can have conflicting orphans. Should not break here if we find one.",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-27T10:42:05Z",
      "diff_hunk" : "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const\n+{\n+    LOCK(m_mutex);\n+    std::vector<CTransactionRef> children_found;\n+\n+    for (unsigned int i = 0; i < parent->vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(parent->GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540857362",
      "id" : 1540857362,
      "in_reply_to_id" : 1539990420,
      "line" : 256,
      "node_id" : "PRRC_kwDOABII585b154S",
      "original_commit_id" : "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "original_line" : 256,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 16,
      "pull_request_review_id" : 1962931592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540857362/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T17:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540857362",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540869399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540869399"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice @theStack :D I was having trouble recreating it, duplicate tx sounds most plausible to me.\r\n\r\nI split the 4 node test and 1 node test into separate files (grabbed commit from #29735 to reuse setup) which hopefully gets rid of this.",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-27T10:47:11Z",
      "diff_hunk" : "@@ -0,0 +1,222 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+        self.packages_to_submit.append(package_hex_basic)\n+        # Child should already be in orphanage\n+        self.transactions_to_presend[1] = [high_fee_child[\"tx\"]]\n+        # Parent would have been previously rejected\n+        self.transactions_to_presend[3] = [low_fee_parent[\"tx\"]]\n+\n+    def test_individual_logic(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer1 = node.add_p2p_connection(P2PInterface())\n+        peer2 = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that tx caches low feerate rejections\")\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer1.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer1.wait_for_getdata([parent_wtxid_int])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1540869399",
      "id" : 1540869399,
      "in_reply_to_id" : 1526790462,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585b180X",
      "original_commit_id" : "2f25d2e0840e94bee1c6a8908d94baf076bf1567",
      "original_line" : 115,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : null,
      "pull_request_review_id" : 1962931592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540869399/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T17:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1540869399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1541080914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1541080914"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can confirm, changes seem logical, and there's test coverage for each `AlreadyHaveTx` instance",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-27T13:11:13Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1541080914",
      "id" : 1541080914,
      "in_reply_to_id" : 1523821142,
      "line" : 822,
      "node_id" : "PRRC_kwDOABII585b2wdS",
      "original_commit_id" : "1435bfac51ae431b91c38c4db0b92ce9b7353125",
      "original_line" : 822,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 25,
      "pull_request_review_id" : 1963281981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1541080914/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-27T13:11:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1541080914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542964936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542964936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In f4d8fe713a036c4d2c1e7c2329077c34f75c8608: It seems `NodeId peer` is not used in `GetChildren`.",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-28T13:19:39Z",
      "diff_hunk" : "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542964936",
      "id" : 1542964936,
      "line" : 245,
      "node_id" : "PRRC_kwDOABII585b98bI",
      "original_commit_id" : "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "original_line" : 245,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 5,
      "pull_request_review_id" : 1966207399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542964936/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T13:19:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542964936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542971452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542971452"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 5405171740aa77e1eb1110fa8be97318edba380a: nit: could set `noban_tx_relay`",
      "commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "created_at" : "2024-03-28T13:23:17Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542971452",
      "id" : 1542971452,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII585b9-A8",
      "original_commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : 44,
      "pull_request_review_id" : 1966215922,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542971452/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T13:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1542971452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543239954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543239954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok. I've actually ended up nesting it inside the `AlreadyHave` to preserve the ForceRelay behavior... wanted to avoid a behavior change in the case\r\n1. tx is low feerate (goes into `m_recent_rejects_reconsiderable`)\r\n2. tx is later accepted (e.g. due to 1p1c)\r\n3. forcrelay peer sends it to us again -> we should `RelayTransaction`",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-28T16:10:10Z",
      "diff_hunk" : "@@ -4378,6 +4482,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // peer simply for relaying a tx that our m_recent_rejects has caught,\n             // regardless of false positives.\n             return;\n+        } else if (m_recent_rejects_reconsiderable.contains(wtxid)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543239954",
      "id" : 1543239954,
      "in_reply_to_id" : 1540031628,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585b-_kS",
      "original_commit_id" : "774f6d0ff515802d16cc0cfeb9319c11e860d84d",
      "original_line" : 4485,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1962931592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543239954/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T17:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543239954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543279142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543279142"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-28T16:33:51Z",
      "diff_hunk" : "@@ -241,3 +241,19 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543279142",
      "id" : 1543279142,
      "in_reply_to_id" : 1542964936,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585b_JIm",
      "original_commit_id" : "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "original_line" : 245,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1962931592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543279142/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T17:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543279142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543350220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543350220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-28T17:18:51Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543350220",
      "id" : 1543350220,
      "in_reply_to_id" : 1542971452,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585b_afM",
      "original_commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : null,
      "pull_request_review_id" : 1962931592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543350220/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T17:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543350220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543357734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543357734"
         }
      },
      "author_association" : "MEMBER",
      "body" : "not sure if I achieved spooky, but I'm having it return the lists now :ghost: ",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-28T17:23:11Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that package works successfully in a \"network\" of nodes. Send various packages from different\n+nodes on a network in which some nodes have already received some of the transactions (and submitted\n+them to mempool, kept them as orphans or rejected them as too-low-feerate transactions). The\n+packages should be received and accepted by all transactions on the network.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        num_big_transactions = 75\n+        # Generate coins to spend and wait for them to mature\n+        self.generate(filler_wallet, num_big_transactions)\n+        self.generate(filler_wallet, 100)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = filler_wallet.send_self_transfer(from_node=self.nodes[1], fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        txouts = gen_return_txouts()\n+        with self.nodes[0].assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_big_transactions):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(filler_wallet, self.nodes[0], fee, 1, txouts)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+        assert tx_to_be_evicted_id not in self.nodes[0].getrawmempool()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerate is above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543357734",
      "id" : 1543357734,
      "in_reply_to_id" : 1539621687,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585b_cUm",
      "original_commit_id" : "5405171740aa77e1eb1110fa8be97318edba380a",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "test/functional/p2p_1p1c_package_relay.py",
      "position" : null,
      "pull_request_review_id" : 1962931592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543357734/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T17:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543357734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543376895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543376895"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added unit tests and fuzz coverage",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-28T17:38:11Z",
      "diff_hunk" : "@@ -51,6 +51,10 @@ class TxOrphanage {\n     /** Does this peer have any work to do? */\n     bool HaveTxToReconsider(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);;\n \n+    /** Get all children of this parent. */\n+    std::vector<CTransactionRef> GetChildren(const CTransactionRef& parent, NodeId peer) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1543376895",
      "id" : 1543376895,
      "in_reply_to_id" : 1539991084,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585b_g__",
      "original_commit_id" : "f4d8fe713a036c4d2c1e7c2329077c34f75c8608",
      "original_line" : 55,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/txorphanage.h",
      "position" : null,
      "pull_request_review_id" : 1962931592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543376895/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-28T17:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1543376895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review, addressed comments and\r\n- fixed a bug in `GetChildren`\r\n- expanded + added more docs to the individual logic tests\r\n- got rid of the `assert_debug_log` lines in the functional tests. The only \"coverage\" that's lost is us skipping children with which we've already tried+failed the package submission. I have a [branch with them](https://github.com/glozow/bitcoin/blob/2024-03-28970-test-logs/test/functional/p2p_opportunistic_1p1c.py) if you want to use it to test the code, but log asserts didn't feel appropriate to have in the functional test.\r\n- added more logging, realized it was annoyingly hard to look up success/fail package evals while searching logs on my node\r\n\r\nfwiw running this on a `-maxmempool=150` node, for the past few days, on average:\r\n- 222 attempted package validations per day\r\n- 85 packages (so 170 txns) accepted per day\r\n- 57% of the package transactions accepted ended up in a block. These are all transactions that we would have otherwise rejected, so this logic is definitely useful at helping us maximize the fees in our limited mempool space.",
      "created_at" : "2024-03-28T18:03:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2025812846",
      "id" : 2025812846,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854v3Nu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 4,
         "total_count" : 4,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2025812846/reactions"
      },
      "updated_at" : "2024-04-16T12:35:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2025812846",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23211258926</sub>",
      "created_at" : "2024-03-28T20:11:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2026028069",
      "id" : 2026028069,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5854wrwl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2026028069/reactions"
      },
      "updated_at" : "2024-03-28T20:11:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2026028069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545475564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545475564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `raise_network_minfee` is unused in this file, can be removed",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-30T18:37:18Z",
      "diff_hunk" : "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545475564",
      "id" : 1545475564,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cHhXs",
      "original_commit_id" : "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 1970039534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545475564/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-30T18:52:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545475564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545476664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545476664"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could create the peers as inbound connections instead, here and in other instances:\r\n\r\n```suggestion\r\n        peer_sender = node.add_p2p_connection(P2PInterface())\r\n```\r\n\r\n(it doesn't really matter though, the code would just be a bit shorter)",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-30T18:42:24Z",
      "diff_hunk" : "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545476664",
      "id" : 1545476664,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cHho4",
      "original_commit_id" : "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 1970039534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545476664/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-30T18:52:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545476664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545477172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477172"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: parent3 is unused, can remove this line and the two comparisons below",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-30T18:45:09Z",
      "diff_hunk" : "@@ -138,4 +162,49 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent3 = MakeTransactionSpending(empty_outpoints, det_rand);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545477172",
      "id" : 1545477172,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cHhw0",
      "original_commit_id" : "3842f9a8842397ec15b5e3c5ae25935e9a8ee67c",
      "original_line" : 174,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1970039534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477172/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-03-30T18:52:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477172",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545477551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477551"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could use `hash` directly in the previous commit where this line is introduced (edea2269416ad2bcd017e1d6ee9ae30bd225c1e9), for smaller diff",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-03-30T18:48:17Z",
      "diff_hunk" : "@@ -2228,7 +2241,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n-    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;\n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(hash)) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1545477551",
      "id" : 1545477551,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cHh2v",
      "original_commit_id" : "97e16c20ca344b49652a2bce558c5404e7ab22dd",
      "original_line" : 2244,
      "original_position" : 25,
      "original_start_line" : 2231,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1970039534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477551/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-03-30T18:52:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1545477551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547822651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547822651"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-02T12:52:31Z",
      "diff_hunk" : "@@ -138,4 +162,49 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent3 = MakeTransactionSpending(empty_outpoints, det_rand);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547822651",
      "id" : 1547822651,
      "in_reply_to_id" : 1545477172,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cQeY7",
      "original_commit_id" : "3842f9a8842397ec15b5e3c5ae25935e9a8ee67c",
      "original_line" : 174,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1973715466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547822651/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-02T13:45:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547822651",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547823286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547823286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed, thanks",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-02T12:53:00Z",
      "diff_hunk" : "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547823286",
      "id" : 1547823286,
      "in_reply_to_id" : 1545475564,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cQei2",
      "original_commit_id" : "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 1973715466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547823286/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-02T13:45:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547823286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547829705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547829705"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed thanks. Before I added noban, I was using it to make tests run faster.",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-02T12:57:17Z",
      "diff_hunk" : "@@ -0,0 +1,215 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1547829705",
      "id" : 1547829705,
      "in_reply_to_id" : 1545476664,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cQgHJ",
      "original_commit_id" : "5d7fa1f68402c0af08f58ac30522ce9511d218c3",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 1973715466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547829705/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-02T13:45:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1547829705",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549143563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549143563"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T08:01:00Z",
      "diff_hunk" : "@@ -2228,7 +2241,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     if (m_orphanage.HaveTx(gtxid)) return true;\n \n-    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(gtxid.GetHash())) return true;\n+    if (include_reconsiderable && m_recent_rejects_reconsiderable.contains(hash)) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549143563",
      "id" : 1549143563,
      "in_reply_to_id" : 1545477551,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cVg4L",
      "original_commit_id" : "97e16c20ca344b49652a2bce558c5404e7ab22dd",
      "original_line" : 2244,
      "original_position" : 25,
      "original_start_line" : 2231,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1975876919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549143563/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-04-03T08:01:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549143563",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549376386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549376386"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n    // For each output, get all entries spending this prevout.\r\n```",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T09:47:55Z",
      "diff_hunk" : "@@ -241,3 +241,28 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a set of iterators to ensure we do not return duplicates of the same tx.\n+    std::set<OrphanMap::iterator, IteratorComparator> set_child_iterators;\n+\n+    // For each input, get all entries spending this prevout.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549376386",
      "id" : 1549376386,
      "line" : 252,
      "node_id" : "PRRC_kwDOABII585cWZuC",
      "original_commit_id" : "d3d7dcf00439655a921f3be4624d01814de2e346",
      "original_line" : 252,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 12,
      "pull_request_review_id" : 1976216428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549376386/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-04T09:55:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549376386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549395161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549395161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "probably better to have it while loop making tx until this is true, rather than fail randomly",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T09:59:21Z",
      "diff_hunk" : "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549395161",
      "id" : 1549395161,
      "line" : 176,
      "node_id" : "PRRC_kwDOABII585cWeTZ",
      "original_commit_id" : "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "original_line" : 176,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 56,
      "pull_request_review_id" : 1976216428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549395161/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-04T09:55:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549395161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549404732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549404732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "quick test case that returns empty would be good too",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T10:04:55Z",
      "diff_hunk" : "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& child : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549404732",
      "id" : 1549404732,
      "line" : 204,
      "node_id" : "PRRC_kwDOABII585cWgo8",
      "original_commit_id" : "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "original_line" : 204,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 84,
      "pull_request_review_id" : 1976216428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549404732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-04T09:55:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549404732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549414682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549414682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good time to add documentation to this function",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T10:12:47Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1549414682",
      "id" : 1549414682,
      "line" : 822,
      "node_id" : "PRRC_kwDOABII585cWjEa",
      "original_commit_id" : "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "original_line" : 809,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 25,
      "pull_request_review_id" : 1976216428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549414682/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-04T09:55:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1549414682",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550260907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550260907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In  guard against MempoolAcceptResult::m_replaced_transactions  (53f1e65f30a0a6b931e97743113e0227748680df):\r\nI am not well-acquainted with `net_processing.cpp`, but I figured I could still mention that it is unclear to me from the commit message and the code change how this change fits in the context. Were we previously assuming that we would always have a non-empty list for `m_replaced_transactions` in the context of this call?",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T18:31:10Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550260907",
      "id" : 1550260907,
      "line" : 4503,
      "node_id" : "PRRC_kwDOABII585cZxqr",
      "original_commit_id" : "53f1e65f30a0a6b931e97743113e0227748680df",
      "original_line" : 4359,
      "original_position" : 7,
      "original_start_line" : 4357,
      "path" : "src/net_processing.cpp",
      "position" : 238,
      "pull_request_review_id" : 1977655865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550260907/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 4357,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-04-03T19:51:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550260907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550334355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550334355"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Could use [`std::set::contains`](https://en.cppreference.com/w/cpp/container/set/contains) here and below\r\n```suggestion\r\n        BOOST_CHECK(expected_parent1_children.contains(child->GetWitnessHash()));\r\n```",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T19:28:27Z",
      "diff_hunk" : "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550334355",
      "id" : 1550334355,
      "line" : 198,
      "node_id" : "PRRC_kwDOABII585caDmT",
      "original_commit_id" : "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "original_line" : 198,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 78,
      "pull_request_review_id" : 1977655865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550334355/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-03T19:51:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550334355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550398421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550398421"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@murchandamus: I was asking myself the same a few days ago and started with some review notes for each commit. The one for 53f1e65f30a0a6b931e97743113e0227748680df might fit to your question (note that it's not about empty vs. non-empty, but more about set-to-nothing vs. set-to-something, since it's an std::optional):\r\n```\r\nThe only way to create an ATMP result of type `MempoolAcceptResult::ResultType::VALID` is using the\r\nstatic method `MempoolAccepptResult::Success`, which in turn calls the private successful case constructor of\r\n`MempoolAcceptResult`. This one always sets `m_replaced_transactions`, therefore\r\n`result.m_replaced_transactions.has_value()` in the modified code path should always be true.\r\n```\r\n(maybe it makes sense to include it in the commit message, if that is correct)\r\nThe same three lines of code are introduced in `PeerManagerImpl::ProcessPackageResult` (commit d6df19000118768678c7afd4b9330b4604bb37ce), I assume that this is the reason to also do it on the other place in the code for consistency.",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T20:16:28Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550398421",
      "id" : 1550398421,
      "in_reply_to_id" : 1550260907,
      "line" : 4503,
      "node_id" : "PRRC_kwDOABII585caTPV",
      "original_commit_id" : "53f1e65f30a0a6b931e97743113e0227748680df",
      "original_line" : 4359,
      "original_position" : 7,
      "original_start_line" : 4357,
      "path" : "src/net_processing.cpp",
      "position" : 238,
      "pull_request_review_id" : 1977876327,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550398421/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 4357,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-04-03T20:16:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550398421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550445308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550445308"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> it is unclear to me from the commit message and the code change how this change fits in the context.\r\n\r\n(Note that this commit is a followup from #29619, I've now linked to the comments in the PR description)\r\n\r\nYes, it should always have a value when the result is VALID. This is just adding a belt-and-suspenders juuust in case.",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T20:42:45Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550445308",
      "id" : 1550445308,
      "in_reply_to_id" : 1550260907,
      "line" : 4503,
      "node_id" : "PRRC_kwDOABII585caer8",
      "original_commit_id" : "53f1e65f30a0a6b931e97743113e0227748680df",
      "original_line" : 4359,
      "original_position" : 7,
      "original_start_line" : 4357,
      "path" : "src/net_processing.cpp",
      "position" : 238,
      "pull_request_review_id" : 1977957595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550445308/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 4357,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-04-03T20:43:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550445308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550494056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550494056"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! Great, Iâll attempt another more thorough review at a later time.",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-03T21:01:00Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1550494056",
      "id" : 1550494056,
      "in_reply_to_id" : 1550260907,
      "line" : 4503,
      "node_id" : "PRRC_kwDOABII585caqlo",
      "original_commit_id" : "53f1e65f30a0a6b931e97743113e0227748680df",
      "original_line" : 4359,
      "original_position" : 7,
      "original_start_line" : 4357,
      "path" : "src/net_processing.cpp",
      "position" : 238,
      "pull_request_review_id" : 1978040928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550494056/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 4357,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-04-03T21:01:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1550494056",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1551287725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551287725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have to admit I'm struggling on these \"skip\" comments and cases. Every time I read this I have trouble re-deriving the logic. ",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-04T09:07:17Z",
      "diff_hunk" : "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1551287725",
      "id" : 1551287725,
      "line" : 6189,
      "node_id" : "PRRC_kwDOABII585cdsWt",
      "original_commit_id" : "d6df19000118768678c7afd4b9330b4604bb37ce",
      "original_line" : 6189,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 274,
      "pull_request_review_id" : 1976216428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551287725/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-04T09:55:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551287725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1551410174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551410174"
         }
      },
      "author_association" : "MEMBER",
      "body" : "add a case where:\r\n1) CONSENSUS-invalid child is propagated to peer\r\n2) low_fee parent is given\r\n3) package evaluation is attempted\r\n4) peer is disconnected\r\n\r\nto ensure we're handling invalid tx properly",
      "commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-04T10:25:44Z",
      "diff_hunk" : "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1551410174",
      "id" : 1551410174,
      "line" : 177,
      "node_id" : "PRRC_kwDOABII585ceKP-",
      "original_commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "original_line" : 177,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 177,
      "pull_request_review_id" : 1979439672,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551410174/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-04T10:25:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1551410174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "reviewed through c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "created_at" : "2024-04-04T10:27:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2036791219",
      "id" : 2036791219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5855Zvez",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2036791219/reactions"
      },
      "updated_at" : "2024-04-04T10:27:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2036791219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553911167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553911167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added. Also WOW, I realized we somehow lost the line where `m_recent_rejects_reconsiderable` is reset. Fixed that.",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T15:43:51Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553911167",
      "id" : 1553911167,
      "in_reply_to_id" : 1549414682,
      "line" : 831,
      "node_id" : "PRRC_kwDOABII585cns1_",
      "original_commit_id" : "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "original_line" : 831,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 34,
      "pull_request_review_id" : 1983578881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553911167/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553911167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914428"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok hm. I've simplified the wording a bit. Maybe that helps?",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T15:46:38Z",
      "diff_hunk" : "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914428",
      "id" : 1553914428,
      "in_reply_to_id" : 1551287725,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cnto8",
      "original_commit_id" : "d6df19000118768678c7afd4b9330b4604bb37ce",
      "original_line" : 6189,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1983578881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914428/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914428",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914606"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914606"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T15:46:47Z",
      "diff_hunk" : "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914606",
      "id" : 1553914606,
      "in_reply_to_id" : 1549395161,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cntru",
      "original_commit_id" : "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "original_line" : 176,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1983578881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914606/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done, yay for 20",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T15:46:53Z",
      "diff_hunk" : "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914701",
      "id" : 1553914701,
      "in_reply_to_id" : 1550334355,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cnttN",
      "original_commit_id" : "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "original_line" : 198,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 1983578881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914701/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914777"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914777"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T15:46:57Z",
      "diff_hunk" : "@@ -138,4 +162,46 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    BOOST_CHECK(parent1->GetHash() != parent2->GetHash());\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& child : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.count(child->GetWitnessHash()) > 0);\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& child : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914777",
      "id" : 1553914777,
      "in_reply_to_id" : 1549404732,
      "line" : 206,
      "node_id" : "PRRC_kwDOABII585cntuZ",
      "original_commit_id" : "b49b634556388ff5ec3c48fd05d628f77f6126a0",
      "original_line" : 206,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 86,
      "pull_request_review_id" : 1983578881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914777/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914777",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914876"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T15:47:02Z",
      "diff_hunk" : "@@ -241,3 +241,28 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildren(const CTransactionRef& parent) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a set of iterators to ensure we do not return duplicates of the same tx.\n+    std::set<OrphanMap::iterator, IteratorComparator> set_child_iterators;\n+\n+    // For each input, get all entries spending this prevout.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553914876",
      "id" : 1553914876,
      "in_reply_to_id" : 1549376386,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cntv8",
      "original_commit_id" : "d3d7dcf00439655a921f3be4624d01814de2e346",
      "original_line" : 252,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 1983578881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914876/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553914876",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553965998"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553965998"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wait oof, we don't require the orphanage child to be provided by the same peer who sent the low-feerate tx. I think this would mean you can get other people disconnected by sending a bogus child of the package they're sending.",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T16:21:34Z",
      "diff_hunk" : "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553965998",
      "id" : 1553965998,
      "in_reply_to_id" : 1551410174,
      "line" : 212,
      "node_id" : "PRRC_kwDOABII585cn6Ou",
      "original_commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "original_line" : 212,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 212,
      "pull_request_review_id" : 1983578881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553965998/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553965998",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553982455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982455"
         }
      },
      "author_association" : "MEMBER",
      "body" : "think you forgot to push?",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T16:37:36Z",
      "diff_hunk" : "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553982455",
      "id" : 1553982455,
      "in_reply_to_id" : 1551287725,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585cn-P3",
      "original_commit_id" : "d6df19000118768678c7afd4b9330b4604bb37ce",
      "original_line" : 6189,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1983689499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982455/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:37:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982455",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553982697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "we should have tests(in master?) for this I hope. \r\n\r\nsomething below minfee is rejected, block comes in, node should respond to an INV for the same thing again",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T16:37:52Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553982697",
      "id" : 1553982697,
      "in_reply_to_id" : 1549414682,
      "line" : 831,
      "node_id" : "PRRC_kwDOABII585cn-Tp",
      "original_commit_id" : "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "original_line" : 831,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 34,
      "pull_request_review_id" : 1983689912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982697/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:37:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553982697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553992489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553992489"
         }
      },
      "author_association" : "MEMBER",
      "body" : "looks like peer id needs to be used again: https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1542964936",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T16:45:50Z",
      "diff_hunk" : "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553992489",
      "id" : 1553992489,
      "in_reply_to_id" : 1551410174,
      "line" : 212,
      "node_id" : "PRRC_kwDOABII585coAsp",
      "original_commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "original_line" : 212,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 212,
      "pull_request_review_id" : 1983705498,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553992489/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:45:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553992489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553996459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553996459"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> think you forgot to push?\r\n\r\nGithub published everything instead of adding my comment to the group -_- yes, pushing in a second.",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T16:49:47Z",
      "diff_hunk" : "@@ -6061,7 +6186,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 entry.second.GetHash().ToString(), entry.first);\n         }\n         for (const GenTxid& gtxid : requestable) {\n-            if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) {\n+            // Skip m_recent_rejects_reconsiderable because we may be requesting a missing parent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1553996459",
      "id" : 1553996459,
      "in_reply_to_id" : 1551287725,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585coBqr",
      "original_commit_id" : "d6df19000118768678c7afd4b9330b4604bb37ce",
      "original_line" : 6189,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1983711619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553996459/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:49:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1553996459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554000244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554000244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> we should have tests(in master?) for this I hope.\r\n\r\napparently not?",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T16:53:39Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554000244",
      "id" : 1554000244,
      "in_reply_to_id" : 1549414682,
      "line" : 831,
      "node_id" : "PRRC_kwDOABII585coCl0",
      "original_commit_id" : "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "original_line" : 831,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 34,
      "pull_request_review_id" : 1983717342,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554000244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:53:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554000244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554004259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554004259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hm no, I think we should return pairs of tx and the `fromPeer`, and just attribute the error to the right peer. If we restrict it to same sender, then we can also block packages by sending the children fast and refusing to send the parent.",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T16:57:22Z",
      "diff_hunk" : "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554004259",
      "id" : 1554004259,
      "in_reply_to_id" : 1551410174,
      "line" : 212,
      "node_id" : "PRRC_kwDOABII585coDkj",
      "original_commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "original_line" : 212,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 212,
      "pull_request_review_id" : 1983723249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554004259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T16:57:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554004259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554024570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554024570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Last push should fix this with the above approach. Still need to write a test case for the peers being different.",
      "commit_id" : "fd5e770cd5ca3de4a7f8b63fb08e1ef87ef88313",
      "created_at" : "2024-04-05T17:17:05Z",
      "diff_hunk" : "@@ -0,0 +1,203 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1554024570",
      "id" : 1554024570,
      "in_reply_to_id" : 1551410174,
      "line" : 212,
      "node_id" : "PRRC_kwDOABII585coIh6",
      "original_commit_id" : "c5e196b8e7b610cc9e6321b76fee4f0c45c1448e",
      "original_line" : 212,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 212,
      "pull_request_review_id" : 1983753486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554024570/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-05T17:17:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1554024570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1557310808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1557310808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n     * The senders arg should be populated in same order as individual transactions\r\n     * in the package_result argument.\r\n     */\r\n```",
      "commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "created_at" : "2024-04-09T09:28:38Z",
      "diff_hunk" : "@@ -596,6 +596,19 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    /** Handle the results of package validation: calls ProcessValidTx and ProcessInvalidTx for\n+     * individual transactions, and caches rejection for the package as a group.\n+     *   */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1557310808",
      "id" : 1557310808,
      "line" : 601,
      "node_id" : "PRRC_kwDOABII585c0q1Y",
      "original_commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "original_line" : 601,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 6,
      "pull_request_review_id" : 1988568046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1557310808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-10T07:27:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1557310808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1558971541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558971541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\nnet_processing.cpp:3224:40: warning: comparison of unsigned expression in â>= 0â is always true [-Wtype-limits]\r\n 3224 |     for (auto i{package.size() - 1}; i >= 0; --i) {\r\n      |            \r\n```",
      "commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "created_at" : "2024-04-10T07:20:03Z",
      "diff_hunk" : "@@ -3153,6 +3208,103 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto i{package.size() - 1}; i >= 0; --i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1558971541",
      "id" : 1558971541,
      "line" : 3224,
      "node_id" : "PRRC_kwDOABII585c7ASV",
      "original_commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "original_line" : 3224,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 135,
      "pull_request_review_id" : 1988568046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558971541/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-10T07:27:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558971541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1558979841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558979841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this is also causing the sanitizer run failure",
      "commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "created_at" : "2024-04-10T07:27:21Z",
      "diff_hunk" : "@@ -3153,6 +3208,103 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto i{package.size() - 1}; i >= 0; --i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1558979841",
      "id" : 1558979841,
      "in_reply_to_id" : 1558971541,
      "line" : 3224,
      "node_id" : "PRRC_kwDOABII585c7CUB",
      "original_commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "original_line" : 3224,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 135,
      "pull_request_review_id" : 1988568046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558979841/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-10T07:27:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1558979841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559187981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559187981"
         }
      },
      "author_association" : "MEMBER",
      "body" : "newline?",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-10T10:10:47Z",
      "diff_hunk" : "@@ -147,3 +147,17 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids)\n+{\n+    std::vector<Wtxid> wtxids_copy(wtxids.cbegin(), wtxids.cend());\n+    std::sort(wtxids_copy.begin(), wtxids_copy.end());\n+    return (HashWriter() << wtxids_copy).GetHash();\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559187981",
      "id" : 1559187981,
      "line" : 156,
      "node_id" : "PRRC_kwDOABII585c71IN",
      "original_commit_id" : "c502734fa50104c18790ba0a5b63744552113110",
      "original_line" : 156,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : 10,
      "pull_request_review_id" : 1991298023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559187981/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559187981",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559188232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559188232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "newline?",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-10T10:11:02Z",
      "diff_hunk" : "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids);\n+/** Get the hash of these transactions' wtxids, concatenated in lexicographical order. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559188232",
      "id" : 1559188232,
      "line" : 94,
      "node_id" : "PRRC_kwDOABII585c71MI",
      "original_commit_id" : "c502734fa50104c18790ba0a5b63744552113110",
      "original_line" : 94,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 7,
      "pull_request_review_id" : 1991298023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559188232/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559188232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559354990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559354990"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Woops yes will fix",
      "commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "created_at" : "2024-04-10T12:34:05Z",
      "diff_hunk" : "@@ -3153,6 +3208,103 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    for (auto i{package.size() - 1}; i >= 0; --i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1559354990",
      "id" : 1559354990,
      "in_reply_to_id" : 1558971541,
      "line" : 3224,
      "node_id" : "PRRC_kwDOABII585c8d5u",
      "original_commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "original_line" : 3224,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 135,
      "pull_request_review_id" : 1991563785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559354990/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-10T12:34:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1559354990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1560983729"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1560983729"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added something similar",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-11T12:57:56Z",
      "diff_hunk" : "@@ -596,6 +596,19 @@ class PeerManagerImpl final : public PeerManager\n     void ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, const std::list<CTransactionRef>& replaced_transactions)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex, g_msgproc_mutex, cs_main);\n \n+    /** Handle the results of package validation: calls ProcessValidTx and ProcessInvalidTx for\n+     * individual transactions, and caches rejection for the package as a group.\n+     *   */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1560983729",
      "id" : 1560983729,
      "in_reply_to_id" : 1557310808,
      "line" : 603,
      "node_id" : "PRRC_kwDOABII585dCrix",
      "original_commit_id" : "e313001b1bf12f9fafeef1029d365af2c8f8126e",
      "original_line" : 603,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 8,
      "pull_request_review_id" : 1994122936,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1560983729/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-11T12:57:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1560983729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased for #29735 and fixed failure.",
      "created_at" : "2024-04-11T12:58:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2049639073",
      "id" : 2049639073,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5856KwKh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2049639073/reactions"
      },
      "updated_at" : "2024-04-11T12:58:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2049639073",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Update since my last comment https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2025812846\r\nRunning for 20 days:\r\n- My node made 5218 package evaluation attempts (x2 = 10,436 transactions). That's ~260 attempts per day.\r\n- Of those attempts, 2260 were successful (x2 = 4520 transactions). That's ~43% acceptance rate.\r\n- Some were repeats. I have 4202 unique txids accepted through package evaluation. I don't know if they were repeated packages or not.\r\n- Of the accepted transactions, 3232 (77%) were later mined in a block.",
      "created_at" : "2024-04-15T09:55:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2056422724",
      "id" : 2056422724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5856koVE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056422724/reactions"
      },
      "updated_at" : "2024-04-15T09:55:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056422724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1565949969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1565949969"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I asked myself the same question, found this discussion too late. I also think it would be good to mention this in the commit message (so it becomes clear that it has nothing to do with whether `m_replaced_transactions` has entries or is empty).",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-15T15:04:37Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1565949969",
      "id" : 1565949969,
      "in_reply_to_id" : 1550260907,
      "line" : 4527,
      "node_id" : "PRRC_kwDOABII585dVoAR",
      "original_commit_id" : "53f1e65f30a0a6b931e97743113e0227748680df",
      "original_line" : 4527,
      "original_position" : 7,
      "original_start_line" : 4357,
      "path" : "src/net_processing.cpp",
      "position" : 270,
      "pull_request_review_id" : 2001371851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1565949969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 4357,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-04-15T21:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1565949969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566025027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566025027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that they are sorted by internal order, not reversed-byte order (because they are sorted by `Wtxid` / `uint256`, not by `uint256.GetHex()`). Is that on purpose? In any case, maybe it would be useful to specify in the doc which order is used to avoid possbile confusion.\r\n\r\nAlso, the tests added in this commit only test for relative order between multiple transactions but not if they are actually sorted in lexicographical order, so that could also be done.",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-15T15:59:17Z",
      "diff_hunk" : "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566025027",
      "id" : 1566025027,
      "line" : 92,
      "node_id" : "PRRC_kwDOABII585dV6VD",
      "original_commit_id" : "75855a4d337d8eb1c432acd54b7b507a61232b48",
      "original_line" : 92,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 5,
      "pull_request_review_id" : 2001371851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566025027/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-15T21:03:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566025027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566233731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566233731"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should update `ProcessInvalidTx` doc above too (it lists all member variables that the function updates). ",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-15T17:56:58Z",
      "diff_hunk" : "@@ -3097,7 +3130,14 @@ void PeerManagerImpl::ProcessInvalidTx(NodeId nodeid, const CTransactionRef& ptx\n         // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n         // for concerns around weakening security of unupgraded nodes\n         // if we start doing this too early.\n-        m_recent_rejects.insert(ptx->GetWitnessHash().ToUint256());\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {\n+            // If the result is TX_RECONSIDERABLE, add it to m_recent_rejects_reconsiderable\n+            // because we should not download or submit this transaction by itself again, but may\n+            // submit it as part of a package later.\n+            m_recent_rejects_reconsiderable.insert(ptx->GetWitnessHash().ToUint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566233731",
      "id" : 1566233731,
      "line" : 3152,
      "node_id" : "PRRC_kwDOABII585dWtSD",
      "original_commit_id" : "35351159736d71222eb358c21003881947215f3a",
      "original_line" : 3137,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 2001371851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566233731/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-15T21:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566233731",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566300445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566300445"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "have you considered returning early here if `cpfp_candidates` is empty? It should work regardless, but seems conceptually simpler than checking all the steps below can handle that case (and may be slightly faster too).",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-15T18:59:24Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566300445",
      "id" : 1566300445,
      "line" : 3272,
      "node_id" : "PRRC_kwDOABII585dW9kd",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3272,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 183,
      "pull_request_review_id" : 2001371851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566300445/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-15T21:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566300445",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566329125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566329125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could we assume more strictly here that the package size is 2 (for now)?",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-15T19:27:21Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566329125",
      "id" : 1566329125,
      "line" : 3222,
      "node_id" : "PRRC_kwDOABII585dXEkl",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3222,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 133,
      "pull_request_review_id" : 2001371851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566329125/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-15T21:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566329125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566378431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566378431"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why put the package hash into `m_recent_rejects_reconsiderable` instead of `m_recent_rejects`?\r\nWe never reconsider a failed package after all as far as I understand it.",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-15T20:15:35Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566378431",
      "id" : 1566378431,
      "line" : 3292,
      "node_id" : "PRRC_kwDOABII585dXQm_",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3292,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 203,
      "pull_request_review_id" : 2001371851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566378431/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-15T21:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566378431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566405746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566405746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why do we only try once in the case there are multiple children in the orphanage, instead of trying multiple times until one package succeeds? To avoid some kind of spamming attacks that could exhaust our computing power?",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-15T20:37:50Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566405746",
      "id" : 1566405746,
      "line" : 3281,
      "node_id" : "PRRC_kwDOABII585dXXRy",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3281,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 192,
      "pull_request_review_id" : 2001371851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566405746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-15T21:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566405746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566889900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566889900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes exactly, this is to bound computation (imagine if somebody sent us 100 fake orphans descended from 1 transaction and we processed them all here). My idea was to do something similar to regular orphan processing, where we have a work queue and limit to 1 item per `ProcessMessages`.\r\n\r\nThere is no work queue here, though, and we drop the parent as soon as we try 1 (pass or fail). At coredev, we discussed adding a work queue for 1p1c as well. However, since it involves finding a way to store the low feerate parent, and we have plenty of low hanging fruit for improving orphan handling, we'll save that for a later PR.",
      "commit_id" : "c6b1d20a8ef55475949efda1108b5966a45acc1c",
      "created_at" : "2024-04-16T07:51:17Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566889900",
      "id" : 1566889900,
      "in_reply_to_id" : 1566405746,
      "line" : 3281,
      "node_id" : "PRRC_kwDOABII585dZNes",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3281,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 192,
      "pull_request_review_id" : 2002880430,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566889900/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T07:51:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566889900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566907728"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566907728"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes I think we could use either `m_recent_rejects_reconsiderable` and `m_recent_rejects` right now to get the same behavior.\r\n\r\nI suppose one mild benefit of using `m_recent_rejects_reconsiderable` is that our `m_recent_rejects` bloom filter churns less frequently.\r\n\r\n~The other benefit is extensibility in the future. In more general ancestor package relay, we could reject a parent+child for being too low feerate, but later accept it as parent+child+grandchild (where the grandchild is very high feerate).~",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T08:03:26Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1566907728",
      "id" : 1566907728,
      "in_reply_to_id" : 1566378431,
      "line" : 3299,
      "node_id" : "PRRC_kwDOABII585dZR1Q",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3299,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 219,
      "pull_request_review_id" : 2002909080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566907728/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T12:25:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1566907728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567146604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567146604"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added more explicit tests and changed this to be ordered based on `uint256.GetHex()` instead. I don't know enough to say which sorting is better here, but this seems like the natural ordering when I'm reading the hex strings as a human.",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T10:49:28Z",
      "diff_hunk" : "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567146604",
      "id" : 1567146604,
      "in_reply_to_id" : 1566025027,
      "line" : 92,
      "node_id" : "PRRC_kwDOABII585daMJs",
      "original_commit_id" : "75855a4d337d8eb1c432acd54b7b507a61232b48",
      "original_line" : 92,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : 5,
      "pull_request_review_id" : 2003285723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567146604/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567146604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567165968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567165968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Elaborated in commit message",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T11:05:57Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());\n+            std::list<CTransactionRef> empty_replacement_list;\n+            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value_or(empty_replacement_list));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567165968",
      "id" : 1567165968,
      "in_reply_to_id" : 1550260907,
      "line" : 4534,
      "node_id" : "PRRC_kwDOABII585daQ4Q",
      "original_commit_id" : "53f1e65f30a0a6b931e97743113e0227748680df",
      "original_line" : 4534,
      "original_position" : 7,
      "original_start_line" : 4357,
      "path" : "src/net_processing.cpp",
      "position" : 286,
      "pull_request_review_id" : 2003285723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567165968/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 4357,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567165968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166206"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, and edited the logging a bit",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T11:06:11Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166206",
      "id" : 1567166206,
      "in_reply_to_id" : 1566300445,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585daQ7-",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3272,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 2003285723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166206/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T11:06:16Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166366",
      "id" : 1567166366,
      "in_reply_to_id" : 1566329125,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585daQ-e",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3222,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 2003285723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166366/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "updated",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T11:06:22Z",
      "diff_hunk" : "@@ -3097,7 +3130,14 @@ void PeerManagerImpl::ProcessInvalidTx(NodeId nodeid, const CTransactionRef& ptx\n         // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n         // for concerns around weakening security of unupgraded nodes\n         // if we start doing this too early.\n-        m_recent_rejects.insert(ptx->GetWitnessHash().ToUint256());\n+        if (state.GetResult() == TxValidationResult::TX_RECONSIDERABLE) {\n+            // If the result is TX_RECONSIDERABLE, add it to m_recent_rejects_reconsiderable\n+            // because we should not download or submit this transaction by itself again, but may\n+            // submit it as part of a package later.\n+            m_recent_rejects_reconsiderable.insert(ptx->GetWitnessHash().ToUint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166471",
      "id" : 1567166471,
      "in_reply_to_id" : 1566233731,
      "line" : 3152,
      "node_id" : "PRRC_kwDOABII585daRAH",
      "original_commit_id" : "35351159736d71222eb358c21003881947215f3a",
      "original_line" : 3152,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 113,
      "pull_request_review_id" : 2003285723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166471/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166818"
         }
      },
      "author_association" : "MEMBER",
      "body" : "marking as resolved since #29827 does this",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T11:06:43Z",
      "diff_hunk" : "@@ -806,7 +806,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Stalling timeout for blocks in IBD */\n     std::atomic<std::chrono::seconds> m_block_stalling_timeout{BLOCK_STALLING_TIMEOUT_DEFAULT};\n \n-    bool AlreadyHaveTx(const GenTxid& gtxid)\n+    bool AlreadyHaveTx(const GenTxid& gtxid, bool include_reconsiderable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567166818",
      "id" : 1567166818,
      "in_reply_to_id" : 1549414682,
      "line" : 833,
      "node_id" : "PRRC_kwDOABII585daRFi",
      "original_commit_id" : "826b31b5a3bef4adb3d1d9145d1452b8e91fda46",
      "original_line" : 833,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 45,
      "pull_request_review_id" : 2003285723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166818/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567166818",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567205749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567205749"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The other benefit is extensibility in the future. In more general ancestor package relay, we could reject a parent+child for being too low feerate, but later accept it as parent+child+grandchild (where the grandchild is very high feerate).\r\n\r\nPerhaps this doesn't matter but I'm not sure I understand the distinction here. We need the combined hash committed *somewhere* in a bloom filter to not fetch the same ancestor package again. If it's different at all, we'll fetch it regardless of which filter we add it to?",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T11:36:45Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567205749",
      "id" : 1567205749,
      "in_reply_to_id" : 1566378431,
      "line" : 3299,
      "node_id" : "PRRC_kwDOABII585daal1",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3299,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 219,
      "pull_request_review_id" : 1991298023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567205749/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T11:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567205749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567269406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567269406"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hm I think you're right, it wouldn't make a difference with downloads. Crossing that part out. Were we thinking of this within validation maybe? Linearize + chunk the package, see that a chunk has already been rejected as too low feerate, drop it?",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T12:25:36Z",
      "diff_hunk" : "@@ -3195,6 +3210,108 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    if (!Assume(!package.empty())) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+    for (const auto index : tx_indices) {\n+        // If we already tried a package and failed for any reason, the combined hash was\n+        // cached in m_recent_rejects_reconsiderable.\n+        Package maybe_cpfp_package{ptx, cpfp_candidates.at(index).first};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567269406",
      "id" : 1567269406,
      "in_reply_to_id" : 1566378431,
      "line" : 3299,
      "node_id" : "PRRC_kwDOABII585daqIe",
      "original_commit_id" : "f5989537e7969c14d41c451bbc1f962e498eb0e0",
      "original_line" : 3299,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 219,
      "pull_request_review_id" : 2003481893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567269406/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T12:25:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567269406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567718964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567718964"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```Suggestion\r\n        # 3. Sender relays the parent. Parent+Child are evaluated as a package and rejected.\r\n```",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T17:25:54Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_orphan_consensus_failure(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567718964",
      "id" : 1567718964,
      "line" : 201,
      "node_id" : "PRRC_kwDOABII585dcX40",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 201,
      "original_position" : 201,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 201,
      "pull_request_review_id" : 2004232080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567718964/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T17:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567718964",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567724841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567724841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "would be good to explicitly test that the parent-giver isn't punished in this scenario, and test if parent is consensus-bad it results in something expected.\r\n\r\n```\r\ndiff --git a/test/functional/p2p_opportunistic_1p1c.py b/test/functional/p2p_opportunistic_1p1c.py\r\nindex 603cbf08a9..1c887289dc 100755\r\n--- a/test/functional/p2p_opportunistic_1p1c.py\r\n+++ b/test/functional/p2p_opportunistic_1p1c.py\r\n@@ -164,78 +164,129 @@ class PackageRelayTest(BitcoinTestFramework):\r\n         # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\r\n         parent_txid_int = int(low_fee_parent[\"txid\"], 16)\r\n         peer_sender.wait_for_getdata([parent_txid_int])\r\n \r\n         # 7. The low feerate parent + high feerate child are submitted as a package.\r\n         peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\r\n \r\n         # 8. Both transactions should now be in mempool\r\n         node_mempool = node.getrawmempool()\r\n         assert low_fee_parent[\"txid\"] in node_mempool\r\n         assert high_fee_child[\"txid\"] in node_mempool\r\n \r\n         node.disconnect_p2ps()\r\n \r\n     def test_orphan_consensus_failure(self):\r\n         node = self.nodes[0]\r\n         low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\r\n         coin = low_fee_parent[\"new_utxo\"]\r\n         address = node.get_deterministic_priv_key().address\r\n         # Create raw transaction spending the parent, but with no signature (a consensus error).\r\n         hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\r\n         tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\r\n         tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\r\n         tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\r\n \r\n-        peer_sender = node.add_p2p_connection(P2PInterface())\r\n+        child_peer_sender = node.add_p2p_connection(P2PInterface())\r\n+        parent_peer_sender = node.add_p2p_connection(P2PInterface())\r\n \r\n         # 1. Child is received first. It is missing an input.\r\n         child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\r\n-        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\r\n-        peer_sender.wait_for_getdata([child_wtxid_int])\r\n-        peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\r\n+        child_peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\r\n+        child_peer_sender.wait_for_getdata([child_wtxid_int])\r\n+        child_peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\r\n \r\n         # 2. Node requests the missing parent by txid.\r\n         parent_txid_int = int(low_fee_parent[\"txid\"], 16)\r\n-        peer_sender.wait_for_getdata([parent_txid_int])\r\n+        child_peer_sender.wait_for_getdata([parent_txid_int])\r\n \r\n-        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\r\n-        peer_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\r\n+        # 3. \"Honest\" sender relays the parent. Parent+Child are evaluated as a package and accepted.\r\n+        parent_peer_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\r\n \r\n         # 4. Transactions should not be in mempool.\r\n         node_mempool = node.getrawmempool()\r\n         assert low_fee_parent[\"txid\"] not in node_mempool\r\n         assert tx_orphan_bad_wit.rehash() not in node_mempool\r\n \r\n         # 5. Peer sent a consensus-invalid transaction.\r\n-        peer_sender.wait_for_disconnect()\r\n+        child_peer_sender.wait_for_disconnect()\r\n+\r\n+        # 6. \"Honest\" peer unpunished\r\n+        parent_peer_sender.sync_with_ping()\r\n+\r\n+    def test_parent_consensus_failure(self):\r\n+        node = self.nodes[0]\r\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\r\n+\r\n+        # Add bad sigature to parent\r\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\r\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\r\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\r\n+\r\n+        coin = low_fee_parent[\"new_utxo\"]\r\n+        address = node.get_deterministic_priv_key().address\r\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\r\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\r\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\r\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\r\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\r\n+\r\n+        child_peer_sender = node.add_p2p_connection(P2PInterface())\r\n+        parent_peer_sender = node.add_p2p_connection(P2PInterface())\r\n+\r\n+        # 1. Child is received first. It is missing an input.\r\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\r\n+        child_peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\r\n+        child_peer_sender.wait_for_getdata([child_wtxid_int])\r\n+        child_peer_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\r\n+\r\n+        # 2. Node requests the missing parent by txid.\r\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\r\n+        child_peer_sender.wait_for_getdata([parent_txid_int])\r\n+\r\n+        # 3. Parent sender relays the parent. Only parent should be evaluated.\r\n+        parent_peer_sender.send_message(msg_tx(tx_parent_bad_wit))\r\n+\r\n+        # 4. Transactions should not be in mempool.\r\n+        node_mempool = node.getrawmempool()\r\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\r\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\r\n+\r\n+        # 5. Peer sent a consensus-invalid transaction.\r\n+        parent_peer_sender.wait_for_disconnect()\r\n+\r\n+        # 6. Child-sending peer unpunished for now!\r\n+        child_peer_sender.sync_with_ping()\r\n \r\n     def run_test(self):\r\n         node = self.nodes[0]\r\n         self.wallet = MiniWallet(node)\r\n         self.wallet_nonsegwit = MiniWallet(node, mode=MiniWalletMode.RAW_P2PK)\r\n         self.generate(self.wallet_nonsegwit, 10)\r\n         self.generate(self.wallet, 20)\r\n \r\n         fill_mempool(self, node, self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when parent (txid != wtxid) is received before child\")\r\n         self.test_basic_parent_then_child(self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when parent (txid == wtxid) is received before child\")\r\n         self.test_basic_parent_then_child(self.wallet_nonsegwit)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when child is received before parent\")\r\n         self.test_basic_child_then_parent()\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when 2 candidate children exist (parent txid != wtxid)\")\r\n         self.test_low_and_high_child(self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when 2 candidate children exist (parent txid == wtxid)\")\r\n         self.test_low_and_high_child(self.wallet_nonsegwit)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect\")\r\n         self.test_orphan_consensus_failure()\r\n \r\n+        self.log.info(\"Check opportunistic 1p1c logic doesn't evaluate package with consensus-invalid parent\")\r\n+        self.test_parent_consensus_failure()\r\n+\r\n \r\n if __name__ == '__main__':\r\n     PackageRelayTest().main()\r\n``` \r\n",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T17:31:12Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_orphan_consensus_failure(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567724841",
      "id" : 1567724841,
      "line" : 189,
      "node_id" : "PRRC_kwDOABII585dcZUp",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 189,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 189,
      "pull_request_review_id" : 2004232080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567724841/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T17:48:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567724841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567763258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567763258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "suggestion:\r\ncall this `med_fee_child` and use the mempoolminfee directly since that's a more meaningful value than `2*FEERATE_1SAT_VB` which is below the floating minfee",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-16T18:06:22Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567763258",
      "id" : 1567763258,
      "line" : 115,
      "node_id" : "PRRC_kwDOABII585dcis6",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 115,
      "pull_request_review_id" : 2004307670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567763258/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-16T18:06:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567763258",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567870936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567870936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nThis seems redundant",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-16T19:51:41Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1567870936",
      "id" : 1567870936,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dc8_Y",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 66,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567870936/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1567870936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568781077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568781077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a code style nit, but I think I agree with https://github.com/bitcoin/bitcoin/pull/21062/files#r571975710 that there's not much benefit from using a `std::optional` on `m_replaced_transactions`?  It just seems to lead to extra code around understanding when the field is set or not, when I think it would be simpler to say that it's just a list which is either empty or non-empty based on whether a replacement took place.\r\n\r\nAnyway I have no objection to the changes in this commit; just wanted to mention it so that if others agree, then perhaps this is a change we could make in the future.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-17T12:42:31Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568781077",
      "id" : 1568781077,
      "line" : 4557,
      "node_id" : "PRRC_kwDOABII585dgbMV",
      "original_commit_id" : "6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf",
      "original_line" : 4357,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 309,
      "pull_request_review_id" : 2005939457,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568781077/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T22:38:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568781077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568834899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568834899"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "would it make sense to match peers and (if possible) always pick a child from the orphanage that was sent to us by the same peer that sent us the parent (instead of a random one)?\r\nThat way, it wouldn't be possible that a third peer could send us multiple low-fee children that we'd store in the orphanage, in the hope that we pick one of those and reject the package.",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-17T13:20:12Z",
      "diff_hunk" : "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568834899",
      "id" : 1568834899,
      "line" : 3293,
      "node_id" : "PRRC_kwDOABII585dgoVT",
      "original_commit_id" : "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "original_line" : 3293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 213,
      "pull_request_review_id" : 2006030894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568834899/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T13:20:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568834899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568861661"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568861661"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think I made this point in person from the philosophical standpoint that orphanage-churning aside, we probably shouldn't allow peers to \"cross-talk\" when it comes to package evaluation and possible punishment.\r\n\r\nIn practice I think an adversary can just churn the orphanage until Future Work happens, but still might be a good conceptual framework to adhere to? \r\n\r\n",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-17T13:37:26Z",
      "diff_hunk" : "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568861661",
      "id" : 1568861661,
      "in_reply_to_id" : 1568834899,
      "line" : 3293,
      "node_id" : "PRRC_kwDOABII585dgu3d",
      "original_commit_id" : "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "original_line" : 3293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 213,
      "pull_request_review_id" : 2006075374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568861661/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T13:37:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568861661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568894409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568894409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "great idea, will change ð ",
      "commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "created_at" : "2024-04-17T13:57:18Z",
      "diff_hunk" : "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568894409",
      "id" : 1568894409,
      "in_reply_to_id" : 1568834899,
      "line" : 3293,
      "node_id" : "PRRC_kwDOABII585dg23J",
      "original_commit_id" : "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "original_line" : 3293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 213,
      "pull_request_review_id" : 2006130667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568894409/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T13:57:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568894409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568990742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568990742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nI don't see what the point of building the `txid` from a literal in this way and comparing it to the one obtained via `GetHash()` is. I'm guessing you're trying to make the point that the txids are actually what you are claiming them to be (as opposed to just writing them in a comment), so the reader can manually check the difference between internal and human-readable lexicographic ordering. Is that really necessary? ",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-17T14:55:58Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1568990742",
      "id" : 1568990742,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dhOYW",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 77,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568990742/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1568990742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569085792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569085792"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nCalling `ToUint256()` shouldn't be needed",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-17T15:55:57Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569085792",
      "id" : 1569085792,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dhllg",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 123,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569085792/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569085792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569086405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569086405"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nSame as before, no need to cast to `ToUint256`",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-17T15:56:25Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};\n+    uint256 calculated_hash_456 = (HashWriter() << expected_order_txns).GetHash();\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_456));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_465));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_564));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_546));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_645));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_654));\n+    // GetCombinedHash is consistent with GetPackageHash: try a couple permutations\n+    std::vector<Wtxid> wtxids_546{wtxid_5, wtxid_4, wtxid_6};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_546));\n+    std::vector<Wtxid> wtxids_654{wtxid_6, wtxid_5, wtxid_4};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_654));\n+\n+    std::vector<uint256> expected_order_wtxids{wtxid_1.ToUint256(), wtxid_2.ToUint256(), wtxid_3.ToUint256(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569086405",
      "id" : 1569086405,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dhlvF",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 137,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569086405/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569086405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569100856"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569100856"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nI'm struggling to see the usefulness of this. You are showing that, for the provided transactions, the ordering may be different based on the representation used (`wtxid`/`txid`/`ToUint256`/`GetHex`), but I don't think this clearly shows that the package hash is using one or the other.\r\n\r\nYou are already proving that the order is the one you are expecting by manually computing `calculated_hash_456`. You could also create different orderings based on `ToUint256` (instead of `GetHex`) and `txid` (instead of `wtxid`) and check how those are not equal to `calculated_hash_456` (after having checked that all of the permutations of `GetPackageHash` are equal to `calculated_hash_456`)",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-17T16:06:56Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569100856",
      "id" : 1569100856,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dhpQ4",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 113,
      "original_position" : 84,
      "original_start_line" : 101,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569100856/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569100856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569200313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569200313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In: 54d0c78d104fb5412a194816590a06cad8cadf80\r\n\r\nnit: I think it wouldn't hurt to have a comment here along the lines of:\r\n\r\n```\r\n/// Check that `GetPackageHash`/ `GetCombinedHash` are consistent with each other, and that the input order does not affect the resulting hash \r\n```",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-17T17:23:42Z",
      "diff_hunk" : "@@ -190,17 +296,28 @@ BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n         BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n         BOOST_CHECK(IsChildWithParentsTree({tx_parent, tx_child}));\n+        BOOST_CHECK_EQUAL(GetPackageHash({tx_child}), GetCombinedHash({tx_child->GetWitnessHash()}));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569200313",
      "id" : 1569200313,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585diBi5",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 299,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569200313/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569200313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569461340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569461340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 91f4efa420958a93f4620379f8830231f276b23b\r\n\r\nThis should also be comparable by `CTransactionRef`, shouldn't it? So `GetWitnessHash` doesn't need to be called here and in following loops",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-17T20:08:47Z",
      "diff_hunk" : "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569461340",
      "id" : 1569461340,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585djBRc",
      "original_commit_id" : "91f4efa420958a93f4620379f8830231f276b23b",
      "original_line" : 195,
      "original_position" : 75,
      "original_start_line" : 194,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569461340/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569461340",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569471367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569471367"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in: 91f4efa420958a93f4620379f8830231f276b23b\r\n\r\nnit: Use `contains` instead of `count(...) > 0` for consistency with the previous check (previous loop)",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-17T20:14:01Z",
      "diff_hunk" : "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& [child, peer] : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.contains(child->GetWitnessHash()));\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& [child, peer] : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1569471367",
      "id" : 1569471367,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585djDuH",
      "original_commit_id" : "91f4efa420958a93f4620379f8830231f276b23b",
      "original_line" : 205,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2004484626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569471367/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T20:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569471367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1570150713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1570150713"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit, feel free to ignore: strictly speaking those 3 lines are not needed, as sending in the tx unsolicitedly (without prior inv/getdata) works as well, though not adhering to the typical protocol flow.",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T07:25:22Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that 1p1c package submission allows a 1p1c package to propagate in a \"network\" of nodes. Send\n+various packages from different nodes on a network in which some nodes have already received some of\n+the transactions (and submitted them to mempool, kept them as orphans or rejected them as\n+too-low-feerate transactions). The packages should be received and accepted by all nodes.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        # hugely speeds up the test, as it involves multiple hops of tx relay.\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        fill_mempool(self, self.nodes[0], filler_wallet)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        # Parent's txid is the same as its wtxid.\n+        low_fee_parent_nonsegwit = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        assert_equal(low_fee_parent_nonsegwit[\"txid\"], low_fee_parent_nonsegwit[\"wtxid\"])\n+        high_fee_child_nonsegwit = self.wallet_nonsegwit.create_self_transfer(utxo_to_spend=low_fee_parent_nonsegwit[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        assert_equal(high_fee_child_nonsegwit[\"txid\"], high_fee_child_nonsegwit[\"wtxid\"])\n+        package_hex_basic_nonsegwit = [low_fee_parent_nonsegwit[\"hex\"], high_fee_child_nonsegwit[\"hex\"]]\n+\n+        packages_to_submit = []\n+        transactions_to_presend = [[]] * self.num_nodes\n+\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        packages_to_submit.append(package_hex_basic)\n+        packages_to_submit.append(package_hex_basic_nonsegwit)\n+        transactions_to_presend[1] = [high_fee_child[\"tx\"], high_fee_child_nonsegwit[\"tx\"]]\n+        transactions_to_presend[3] = [low_fee_parent[\"tx\"], low_fee_parent_nonsegwit[\"tx\"]]\n+\n+        return packages_to_submit, transactions_to_presend\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.wallet_nonsegwit = MiniWallet(self.nodes[2], mode=MiniWalletMode.RAW_P2PK)\n+        self.generate(self.wallet_nonsegwit, 10)\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        # Create the transactions.\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        packages_to_submit, transactions_to_presend = self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_p2p_connection(P2PInterface()))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1570150713",
      "id" : 1570150713,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dlpk5",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 111,
      "original_position" : 111,
      "original_start_line" : 109,
      "path" : "test/functional/p2p_1p1c_network.py",
      "position" : null,
      "pull_request_review_id" : 2008064624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1570150713/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-18T07:40:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1570150713",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571005910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571005910"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:48:10Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test that 1p1c package submission allows a 1p1c package to propagate in a \"network\" of nodes. Send\n+various packages from different nodes on a network in which some nodes have already received some of\n+the transactions (and submitted them to mempool, kept them as orphans or rejected them as\n+too-low-feerate transactions). The packages should be received and accepted by all nodes.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        # hugely speeds up the test, as it involves multiple hops of tx relay.\n+        self.noban_tx_relay = True\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+        self.supports_cli = False\n+\n+    def raise_network_minfee(self):\n+        filler_wallet = MiniWallet(self.nodes[0])\n+        fill_mempool(self, self.nodes[0], filler_wallet)\n+\n+        self.log.debug(\"Wait for the network to sync mempools\")\n+        self.sync_mempools()\n+\n+        self.log.debug(\"Check that all nodes' mempool minimum feerates are above min relay feerate\")\n+        for node in self.nodes:\n+            assert_equal(node.getmempoolinfo()['minrelaytxfee'], FEERATE_1SAT_VB)\n+            assert_greater_than(node.getmempoolinfo()['mempoolminfee'], FEERATE_1SAT_VB)\n+\n+    def create_packages(self):\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        package_hex_basic = [low_fee_parent[\"hex\"], high_fee_child[\"hex\"]]\n+\n+        # Basic 1-parent-1-child package, parent 1sat/vB, child 999sat/vB\n+        # Parent's txid is the same as its wtxid.\n+        low_fee_parent_nonsegwit = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        assert_equal(low_fee_parent_nonsegwit[\"txid\"], low_fee_parent_nonsegwit[\"wtxid\"])\n+        high_fee_child_nonsegwit = self.wallet_nonsegwit.create_self_transfer(utxo_to_spend=low_fee_parent_nonsegwit[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+        assert_equal(high_fee_child_nonsegwit[\"txid\"], high_fee_child_nonsegwit[\"wtxid\"])\n+        package_hex_basic_nonsegwit = [low_fee_parent_nonsegwit[\"hex\"], high_fee_child_nonsegwit[\"hex\"]]\n+\n+        packages_to_submit = []\n+        transactions_to_presend = [[]] * self.num_nodes\n+\n+        # node0: sender\n+        # node1: pre-received the child (orphan)\n+        # node2: pre-received nothing\n+        # node3: pre-received the parent (too low fee)\n+        packages_to_submit.append(package_hex_basic)\n+        packages_to_submit.append(package_hex_basic_nonsegwit)\n+        transactions_to_presend[1] = [high_fee_child[\"tx\"], high_fee_child_nonsegwit[\"tx\"]]\n+        transactions_to_presend[3] = [low_fee_parent[\"tx\"], low_fee_parent_nonsegwit[\"tx\"]]\n+\n+        return packages_to_submit, transactions_to_presend\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[1])\n+        self.wallet_nonsegwit = MiniWallet(self.nodes[2], mode=MiniWalletMode.RAW_P2PK)\n+        self.generate(self.wallet_nonsegwit, 10)\n+        self.generate(self.wallet, 120)\n+\n+        self.log.info(\"Fill mempools with large transactions to raise mempool minimum feerates\")\n+        self.raise_network_minfee()\n+\n+        # Create the transactions.\n+        self.wallet.rescan_utxos(include_mempool=True)\n+        packages_to_submit, transactions_to_presend = self.create_packages()\n+\n+        self.peers = []\n+        for i in range(self.num_nodes):\n+            self.peers.append(self.nodes[i].add_p2p_connection(P2PInterface()))\n+\n+        self.log.info(\"Pre-send some transactions to nodes\")\n+        for i in range(self.num_nodes):\n+            peer = self.peers[i]\n+            for tx in transactions_to_presend[i]:\n+                inv = CInv(t=MSG_WTX, h=int(tx.getwtxid(), 16))\n+                peer.send_and_ping(msg_inv([inv]))\n+                peer.wait_for_getdata([int(tx.getwtxid(), 16)])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571005910",
      "id" : 1571005910,
      "in_reply_to_id" : 1570150713,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do6XW",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 111,
      "original_position" : 111,
      "original_start_line" : 109,
      "path" : "test/functional/p2p_1p1c_network.py",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571005910/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571005910",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006395"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(deleted `GetCombinedHash`)",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:48:31Z",
      "diff_hunk" : "@@ -190,17 +296,28 @@ BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n         BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n         BOOST_CHECK(IsChildWithParentsTree({tx_parent, tx_child}));\n+        BOOST_CHECK_EQUAL(GetPackageHash({tx_child}), GetCombinedHash({tx_child->GetWitnessHash()}));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006395",
      "id" : 1571006395,
      "in_reply_to_id" : 1569200313,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do6e7",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 299,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006395/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006395",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006616"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done, thanks",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:48:42Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};\n+    uint256 calculated_hash_456 = (HashWriter() << expected_order_txns).GetHash();\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_456));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_465));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_564));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_546));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_645));\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetPackageHash(package_654));\n+    // GetCombinedHash is consistent with GetPackageHash: try a couple permutations\n+    std::vector<Wtxid> wtxids_546{wtxid_5, wtxid_4, wtxid_6};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_546));\n+    std::vector<Wtxid> wtxids_654{wtxid_6, wtxid_5, wtxid_4};\n+    BOOST_CHECK_EQUAL(calculated_hash_456, GetCombinedHash(wtxids_654));\n+\n+    std::vector<uint256> expected_order_wtxids{wtxid_1.ToUint256(), wtxid_2.ToUint256(), wtxid_3.ToUint256(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006616",
      "id" : 1571006616,
      "in_reply_to_id" : 1569086405,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do6iY",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 137,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done, thanks",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:48:46Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());\n+\n+    // All permutations of the package containing ptx4, ptx5, ptx6\n+    std::vector<CTransactionRef> package_456{ptx4, ptx5, ptx6};\n+    std::vector<CTransactionRef> package_465{ptx4, ptx6, ptx5};\n+    std::vector<CTransactionRef> package_564{ptx5, ptx6, ptx4};\n+    std::vector<CTransactionRef> package_546{ptx5, ptx4, ptx6};\n+    std::vector<CTransactionRef> package_645{ptx6, ptx4, ptx5};\n+    std::vector<CTransactionRef> package_654{ptx6, ptx5, ptx4};\n+    // All of them must have the same package hash 2dc93431aa6eb415a4e0995f77c78098d7ed97ca6f123a0d77a7747339525acd\n+    std::vector<uint256> expected_order_txns{wtxid_4.ToUint256(), wtxid_5.ToUint256(), wtxid_6.ToUint256()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571006745",
      "id" : 1571006745,
      "in_reply_to_id" : 1569085792,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do6kZ",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 123,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006745/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571006745",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571013196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571013196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok added tests calculating what the hashes would be if we used another order + checking they're not the same",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:53:18Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};\n+    BOOST_CHECK_EQUAL(tx4.GetHash(), txid_4);\n+    BOOST_CHECK_EQUAL(tx4.GetWitnessHash(), wtxid_4);\n+\n+    // Random real nonsegwit transaction, corresponds to wtxid_5\n+    DataStream stream5{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx5(deserialize, TX_WITH_WITNESS, stream5);\n+    CTransactionRef ptx5{MakeTransactionRef(tx5)};\n+    BOOST_CHECK_EQUAL(tx5.GetWitnessHash(), wtxid_5);\n+    Txid txid_5{TxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    BOOST_CHECK_EQUAL(tx5.GetHash(), txid_5);\n+\n+    // Random real segwit transaction, corresponds to wtxid_6\n+    DataStream stream6{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx6(deserialize, TX_WITH_WITNESS, stream6);\n+    CTransactionRef ptx6{MakeTransactionRef(tx6)};\n+    BOOST_CHECK_EQUAL(tx6.GetWitnessHash(), wtxid_6);\n+    Txid txid_6{TxidFromString(\"0xee707be5201160e32c4fc715bec227d1aeea5940fb4295605e7373edce3b1a93\")};\n+    BOOST_CHECK_EQUAL(tx6.GetHash(), txid_6);\n+\n+    // Testing that both functions compare using GetHex() and not uint256.\n+    // In these pairs of wtxids, hex string order != uint256 order\n+    BOOST_CHECK(wtxid_3 < wtxid_1);\n+    BOOST_CHECK(wtxid_3 < wtxid_2);\n+    BOOST_CHECK(wtxid_5 < wtxid_4);\n+\n+    // Testing that package hash is using wtxids, not txids.\n+    BOOST_CHECK(txid_4.ToUint256() != wtxid_4.ToUint256());\n+    BOOST_CHECK(txid_6.ToUint256() != wtxid_6.ToUint256());\n+\n+    // Testing that package hash is sorting by wtxids, not txids.\n+    // For tx4 and tx5, txid order != wtxid order\n+    BOOST_CHECK(txid_5.GetHex() < txid_4.GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571013196",
      "id" : 1571013196,
      "in_reply_to_id" : 1569100856,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do8JM",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 113,
      "original_position" : 84,
      "original_start_line" : 101,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571013196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571013196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571014755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571014755"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I figure it's easier to read the test this way; you can easily tell that the lexicographical ordering is what I claim it to be",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:54:25Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_3.GetHex() < wtxid_4.GetHex());\n+    BOOST_CHECK(wtxid_4.GetHex() < wtxid_5.GetHex());\n+    BOOST_CHECK(wtxid_5.GetHex() < wtxid_6.GetHex());\n+\n+    // Random real segwit transaction, corresponds to wtxid_4\n+    DataStream stream4{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx4(deserialize, TX_WITH_WITNESS, stream4);\n+    CTransactionRef ptx4{MakeTransactionRef(tx4)};\n+    Txid txid_4{TxidFromString(\"0xbd0f71c1d5e50589063e134fad22053cdae5ab2320db5bf5e540198b0b5a4e69\")};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571014755",
      "id" : 1571014755,
      "in_reply_to_id" : 1568990742,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do8hj",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 77,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571014755/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571014755",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015190"
         }
      },
      "author_association" : "MEMBER",
      "body" : "deleted",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:54:41Z",
      "diff_hunk" : "@@ -40,6 +43,109 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Some wtxids, in lexicographical order:\n+    Wtxid wtxid_0{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_1{WtxidFromString(\"0x0000000000000000000000000000000000000000000000000000000000000001\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0x00000000000000000000000000000000000000000000000000000000ffffffff\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0x1000000000000000000000000000000000000000000000000000000000000000\")};\n+    Wtxid wtxid_4{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_5{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_6{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+\n+    BOOST_CHECK(wtxid_0.GetHex() < wtxid_1.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015190",
      "id" : 1571015190,
      "in_reply_to_id" : 1567870936,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do8oW",
      "original_commit_id" : "54d0c78d104fb5412a194816590a06cad8cadf80",
      "original_line" : 66,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015190/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:54:47Z",
      "diff_hunk" : "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};\n+\n+    auto parent1_children{orphanage.GetChildren(parent1)};\n+    BOOST_CHECK_EQUAL(parent1_children.size(), expected_parent1_children.size());\n+    for (const auto& [child, peer] : parent1_children) {\n+        BOOST_CHECK(expected_parent1_children.contains(child->GetWitnessHash()));\n+    }\n+    auto parent2_children{orphanage.GetChildren(parent2)};\n+    BOOST_CHECK_EQUAL(parent2_children.size(), expected_parent2_children.size());\n+    for (const auto& [child, peer] : parent2_children) {\n+        BOOST_CHECK(expected_parent2_children.count(child->GetWitnessHash()) > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015344",
      "id" : 1571015344,
      "in_reply_to_id" : 1569471367,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do8qw",
      "original_commit_id" : "91f4efa420958a93f4620379f8830231f276b23b",
      "original_line" : 205,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015344/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015434"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:54:50Z",
      "diff_hunk" : "@@ -138,4 +162,51 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    TxOrphanage orphanage;\n+    const NodeId node{0};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates in GetChildren.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p2n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node));\n+    BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node));\n+\n+    // Check that GetChildren returns what is expected.\n+    std::set<Wtxid> expected_parent1_children{child_p1n0->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash(), child_p1n0_p1n1->GetWitnessHash()};\n+    std::set<Wtxid> expected_parent2_children{child_p2n1->GetWitnessHash(), child_p1n0_p2n0->GetWitnessHash()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015434",
      "id" : 1571015434,
      "in_reply_to_id" : 1569461340,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do8sK",
      "original_commit_id" : "91f4efa420958a93f4620379f8830231f276b23b",
      "original_line" : 195,
      "original_position" : 75,
      "original_start_line" : 194,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015434/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015884"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(deleted `GetCombinedHash`)",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:55:09Z",
      "diff_hunk" : "@@ -88,4 +88,10 @@ bool IsChildWithParents(const Package& package);\n  * other (the package is a \"tree\").\n  */\n bool IsChildWithParentsTree(const Package& package);\n+\n+/** Get the hash of these wtxids, concatenated in lexicographical order. */\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids);\n+/** Get the hash of these transactions' wtxids, concatenated in lexicographical order. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015884",
      "id" : 1571015884,
      "in_reply_to_id" : 1559188232,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do8zM",
      "original_commit_id" : "c502734fa50104c18790ba0a5b63744552113110",
      "original_line" : 94,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/policy/packages.h",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015884/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015884",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015988"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015988"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(deleted `GetCombinedHash`)",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:55:13Z",
      "diff_hunk" : "@@ -147,3 +147,17 @@ bool IsChildWithParentsTree(const Package& package)\n         return true;\n     });\n }\n+\n+uint256 GetCombinedHash(const std::vector<Wtxid>& wtxids)\n+{\n+    std::vector<Wtxid> wtxids_copy(wtxids.cbegin(), wtxids.cend());\n+    std::sort(wtxids_copy.begin(), wtxids_copy.end());\n+    return (HashWriter() << wtxids_copy).GetHash();\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571015988",
      "id" : 1571015988,
      "in_reply_to_id" : 1559187981,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do800",
      "original_commit_id" : "c502734fa50104c18790ba0a5b63744552113110",
      "original_line" : 156,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/policy/packages.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015988/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571015988",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571017712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571017712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Did this now. We first gather all children by the same peer and try by recency order. If we cannot find one that matches, we look for children not by this peer, and try in random order.",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T15:56:24Z",
      "diff_hunk" : "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571017712",
      "id" : 1571017712,
      "in_reply_to_id" : 1568834899,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585do9Pw",
      "original_commit_id" : "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "original_line" : 3293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 2009283703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571017712/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:02:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571017712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23986234746</sub>",
      "created_at" : "2024-04-18T16:29:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2064460626",
      "id" : 2064460626,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5857DStS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2064460626/reactions"
      },
      "updated_at" : "2024-04-18T16:29:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2064460626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571063644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571063644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For some code deduplication you could just have `GetChildrenFromPeer` which takes `std::optional<NodeId>`, returning full `std::vector<std::pair<CTransactionRef, NodeId>>` list if `std::nullopt` or filtered to the specific nodeid otherwise. You can call it filtered once, then if a suitable orphan isn't found, call it again unfiltered. ",
      "commit_id" : "9a00b09c53b30a453d2be9785858f62494869b75",
      "created_at" : "2024-04-18T16:32:56Z",
      "diff_hunk" : "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1571063644",
      "id" : 1571063644,
      "in_reply_to_id" : 1568834899,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dpIdc",
      "original_commit_id" : "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "original_line" : 3293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 2009379866,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571063644/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:32:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571063644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "debugging the p2p_opportunistic_1p1c.py failure. I think the wallet one is unrelated.",
      "created_at" : "2024-04-19T09:40:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2066207955",
      "id" : 2066207955,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5857J9TT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066207955/reactions"
      },
      "updated_at" : "2024-04-19T09:40:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066207955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572288041"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572288041"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added this test and tweaked a bit to check that orphan stays + can still be resolved.",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-19T12:24:02Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(low_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert low_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_orphan_consensus_failure(self):\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572288041",
      "id" : 1572288041,
      "in_reply_to_id" : 1567724841,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dtzYp",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 189,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 2011282364,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572288041/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-19T12:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572288041",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572288118"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572288118"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-19T12:24:07Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=2*FEERATE_1SAT_VB)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572288118",
      "id" : 1572288118,
      "in_reply_to_id" : 1567763258,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dtzZ2",
      "original_commit_id" : "142d584dab3725081344520bec0a092d6b58d996",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 2011282515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572288118/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-19T12:24:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572288118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok ready for review again.",
      "created_at" : "2024-04-19T12:32:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#issuecomment-2066473350",
      "id" : 2066473350,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28970",
      "node_id" : "IC_kwDOABII5857K-GG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066473350/reactions"
      },
      "updated_at" : "2024-04-19T12:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066473350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572436712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572436712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "duplicated `cleanup`, or something?",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-19T14:08:55Z",
      "diff_hunk" : "@@ -0,0 +1,319 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def subest_check(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572436712",
      "id" : 1572436712,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII585duXro",
      "original_commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 56,
      "pull_request_review_id" : 2011541463,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572436712/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-19T14:08:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572436712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572451256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572451256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah forgot to delete, yes",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-19T14:18:53Z",
      "diff_hunk" : "@@ -0,0 +1,319 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def subest_check(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572451256",
      "id" : 1572451256,
      "in_reply_to_id" : 1572436712,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII585dubO4",
      "original_commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 56,
      "pull_request_review_id" : 2011565637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572451256/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-19T14:18:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572451256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572504707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572504707"
         }
      },
      "author_association" : "MEMBER",
      "body" : "duplicate log?",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-19T14:56:20Z",
      "diff_hunk" : "@@ -0,0 +1,319 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def subest_check(self):\n+        self.nodes[0].disconnect_p2ps()\n+        # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+        # relay feerate. However, do check that this is the case.\n+        assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+        # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+        self.wallet.rescan_utxos(include_mempool=True)\n+\n+    @cleanup\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    @cleanup\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        # This feerate is above mempoolminfee, but not enough to also bump the low feerate parent.\n+        feerate_just_above = node.getmempoolinfo()[\"mempoolminfee\"]\n+        med_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=feerate_just_above)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(med_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(med_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert med_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_orphan_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        bad_orphan_sender = node.add_p2p_connection(P2PInterface())\n+        parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        bad_orphan_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        bad_orphan_sender.wait_for_getdata([child_wtxid_int])\n+        bad_orphan_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        bad_orphan_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different peer relays the parent. Parent+Child are evaluated as a package and rejected.\n+        parent_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] not in node_mempool\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\n+\n+        # 5. Peer that sent a consensus-invalid transaction should be disconnected.\n+        bad_orphan_sender.wait_for_disconnect()\n+\n+        # The peer that didn't provide the orphan should not be disconnected.\n+        parent_sender.sync_with_ping()\n+\n+    @cleanup\n+    def test_parent_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        # Create invalid version of parent with a bad signature.\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        package_sender = node.add_p2p_connection(P2PInterface())\n+        fake_parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        package_sender.wait_for_getdata([child_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\n+        package_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different node relays the parent. The parent is first evaluated by itself and\n+        # rejected for being too low feerate. Then it is evaluated as a package and, after passing\n+        # feerate checks, rejected for having a bad signature (consensus error).\n+        fake_parent_sender.send_message(msg_tx(tx_parent_bad_wit))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\n+        assert high_fee_child[\"txid\"] not in node_mempool\n+\n+        # 5. Peer sent a consensus-invalid transaction.\n+        fake_parent_sender.wait_for_disconnect()\n+\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1572504707",
      "id" : 1572504707,
      "line" : 278,
      "node_id" : "PRRC_kwDOABII585duoSD",
      "original_commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_line" : 278,
      "original_position" : 278,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 278,
      "pull_request_review_id" : 2011658807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572504707/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-19T14:56:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572504707",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573331603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573331603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 5c8aa657642ef24e711a73c28278644f14117d73\r\n\r\nThis last check is still redundant",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-20T16:18:20Z",
      "diff_hunk" : "@@ -40,6 +43,93 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Random real segwit transaction\n+    DataStream stream_1{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx_1(deserialize, TX_WITH_WITNESS, stream_1);\n+    CTransactionRef ptx_1{MakeTransactionRef(tx_1)};\n+\n+    // Random real nonsegwit transaction\n+    DataStream stream_2{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx_2(deserialize, TX_WITH_WITNESS, stream_2);\n+    CTransactionRef ptx_2{MakeTransactionRef(tx_2)};\n+\n+    // Random real segwit transaction\n+    DataStream stream_3{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx_3(deserialize, TX_WITH_WITNESS, stream_3);\n+    CTransactionRef ptx_3{MakeTransactionRef(tx_3)};\n+\n+    // It's easy to see that wtxids are sorted in lexicographical order:\n+    Wtxid wtxid_1{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+    BOOST_CHECK_EQUAL(tx_1.GetWitnessHash(), wtxid_1);\n+    BOOST_CHECK_EQUAL(tx_2.GetWitnessHash(), wtxid_2);\n+    BOOST_CHECK_EQUAL(tx_3.GetWitnessHash(), wtxid_3);\n+\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573331603",
      "id" : 1573331603,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585dxyKT",
      "original_commit_id" : "5c8aa657642ef24e711a73c28278644f14117d73",
      "original_line" : 85,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 56,
      "pull_request_review_id" : 2013113076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573331603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-20T18:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573331603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573341141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573341141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In ca9f03f2207854c849a14d7af2fcd91a5f675e14\r\n\r\nWouldn't it be easier (and simpler) to use a set here instead of a vector (as used to be the case in 9dc967195c4965973be0174ae6041be70a886c7a). It makes sense to use a `vec` in `GetChildrenFromSamePeer` given you are sorting based on a custom order, but here a set should be equivalent and involve less boilerplate (?)",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-20T16:56:31Z",
      "diff_hunk" : "@@ -241,3 +241,71 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildrenFromSamePeer(const CTransactionRef& parent, NodeId nodeid) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a vector of iterators to ensure we do not return duplicates of the same tx\n+    // and so we can sort by nTimeExpire.\n+    std::vector<OrphanMap::iterator> unique_iters;\n+\n+    // For each output, get all entries spending this prevout, filtering for ones from the specified peer.\n+    for (unsigned int i = 0; i < parent->vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(parent->GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                if (elem->second.fromPeer == nodeid) {\n+                    unique_iters.emplace_back(elem);\n+                }\n+            }\n+        }\n+    }\n+\n+    // Sort so that more recent orphans (which expire later) come first.\n+    std::sort(unique_iters.begin(), unique_iters.end(), [](const auto& lhs, const auto& rhs) {\n+        return lhs->second.nTimeExpire > rhs->second.nTimeExpire;\n+    });\n+    // Erase duplicates\n+    unique_iters.erase(std::unique(unique_iters.begin(), unique_iters.end()), unique_iters.end());\n+\n+    // Convert to a vector of CTransactionRef\n+    std::vector<CTransactionRef> children_found;\n+    children_found.reserve(unique_iters.size());\n+    for (const auto child_iter : unique_iters) {\n+        children_found.emplace_back(child_iter->second.tx);\n+    }\n+    return children_found;\n+}\n+\n+std::vector<std::pair<CTransactionRef, NodeId>> TxOrphanage::GetChildrenFromDifferentPeer(const CTransactionRef& parent, NodeId nodeid) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct vector of iterators to ensure we do not return duplicates of the same tx.\n+    std::vector<OrphanMap::iterator> unique_iters;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573341141",
      "id" : 1573341141,
      "line" : 290,
      "node_id" : "PRRC_kwDOABII585dx0fV",
      "original_commit_id" : "ca9f03f2207854c849a14d7af2fcd91a5f675e14",
      "original_line" : 286,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 50,
      "pull_request_review_id" : 2013113076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573341141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-20T22:24:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573341141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573344593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573344593"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In ca9f03f2207854c849a14d7af2fcd91a5f675e14\r\n\r\nI think this is misleading (both the variable name and the comment).\r\n\r\nThe reason a vector is chosen is so you can sort based on `nTimeExpire`. Removing the duplicates comes later (for most of the function, the iters may not be unique).\r\n\r\nFor the sake of future readers it may be worth changing it",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-20T17:10:51Z",
      "diff_hunk" : "@@ -241,3 +241,71 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildrenFromSamePeer(const CTransactionRef& parent, NodeId nodeid) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a vector of iterators to ensure we do not return duplicates of the same tx\n+    // and so we can sort by nTimeExpire.\n+    std::vector<OrphanMap::iterator> unique_iters;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573344593",
      "id" : 1573344593,
      "line" : 251,
      "node_id" : "PRRC_kwDOABII585dx1VR",
      "original_commit_id" : "ca9f03f2207854c849a14d7af2fcd91a5f675e14",
      "original_line" : 251,
      "original_position" : 11,
      "original_start_line" : 249,
      "path" : "src/txorphanage.cpp",
      "position" : 11,
      "pull_request_review_id" : 2013113076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573344593/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 249,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-20T18:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573344593",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573353122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573353122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 42859548ab5aebf40da6089b85065f7c204b992a\r\n\r\nI don't think the order of recency is being tested",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-20T17:43:40Z",
      "diff_hunk" : "@@ -138,4 +162,154 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        // Check contents and ensure transactions are returned in order of recency.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573353122",
      "id" : 1573353122,
      "line" : 200,
      "node_id" : "PRRC_kwDOABII585dx3ai",
      "original_commit_id" : "42859548ab5aebf40da6089b85065f7c204b992a",
      "original_line" : 200,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 80,
      "pull_request_review_id" : 2013113076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573353122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-20T18:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573353122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573354857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573354857"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 42859548ab5aebf40da6089b85065f7c204b992a\r\n\r\nTo make sure the two collections are equal you also need to check the their sizes match. This applies to the four cases.",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-20T17:50:37Z",
      "diff_hunk" : "@@ -138,4 +162,154 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        // Check contents and ensure transactions are returned in order of recency.\n+        const auto parent1_children_from_sender{orphanage.GetChildrenFromSamePeer(parent1, node1)};\n+        for (const auto& tx : parent1_children_from_sender) {\n+            BOOST_CHECK(expected_parent1_children.contains(tx));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1573354857",
      "id" : 1573354857,
      "line" : 203,
      "node_id" : "PRRC_kwDOABII585dx31p",
      "original_commit_id" : "42859548ab5aebf40da6089b85065f7c204b992a",
      "original_line" : 203,
      "original_position" : 83,
      "original_start_line" : 201,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 83,
      "pull_request_review_id" : 2013113076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573354857/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 201,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-20T18:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1573354857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6665628?v=4",
         "events_url" : "https://api.github.com/users/sr-gi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sr-gi/followers",
         "following_url" : "https://api.github.com/users/sr-gi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sr-gi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sr-gi",
         "id" : 6665628,
         "login" : "sr-gi",
         "node_id" : "MDQ6VXNlcjY2NjU2Mjg=",
         "organizations_url" : "https://api.github.com/users/sr-gi/orgs",
         "received_events_url" : "https://api.github.com/users/sr-gi/received_events",
         "repos_url" : "https://api.github.com/users/sr-gi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sr-gi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sr-gi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sr-gi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574610556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574610556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I copied this from the way we do `unique_parents` in orphan parent requests (see the discussion on #19596 about the dynamic memory usage and speed). However I don't mind either way and agree a `std::set` would be simpler, so happy to change if people prefer using a set.",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-22T11:39:04Z",
      "diff_hunk" : "@@ -241,3 +241,71 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildrenFromSamePeer(const CTransactionRef& parent, NodeId nodeid) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a vector of iterators to ensure we do not return duplicates of the same tx\n+    // and so we can sort by nTimeExpire.\n+    std::vector<OrphanMap::iterator> unique_iters;\n+\n+    // For each output, get all entries spending this prevout, filtering for ones from the specified peer.\n+    for (unsigned int i = 0; i < parent->vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(parent->GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                if (elem->second.fromPeer == nodeid) {\n+                    unique_iters.emplace_back(elem);\n+                }\n+            }\n+        }\n+    }\n+\n+    // Sort so that more recent orphans (which expire later) come first.\n+    std::sort(unique_iters.begin(), unique_iters.end(), [](const auto& lhs, const auto& rhs) {\n+        return lhs->second.nTimeExpire > rhs->second.nTimeExpire;\n+    });\n+    // Erase duplicates\n+    unique_iters.erase(std::unique(unique_iters.begin(), unique_iters.end()), unique_iters.end());\n+\n+    // Convert to a vector of CTransactionRef\n+    std::vector<CTransactionRef> children_found;\n+    children_found.reserve(unique_iters.size());\n+    for (const auto child_iter : unique_iters) {\n+        children_found.emplace_back(child_iter->second.tx);\n+    }\n+    return children_found;\n+}\n+\n+std::vector<std::pair<CTransactionRef, NodeId>> TxOrphanage::GetChildrenFromDifferentPeer(const CTransactionRef& parent, NodeId nodeid) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct vector of iterators to ensure we do not return duplicates of the same tx.\n+    std::vector<OrphanMap::iterator> unique_iters;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574610556",
      "id" : 1574610556,
      "in_reply_to_id" : 1573341141,
      "line" : 290,
      "node_id" : "PRRC_kwDOABII585d2qZ8",
      "original_commit_id" : "ca9f03f2207854c849a14d7af2fcd91a5f675e14",
      "original_line" : 286,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/txorphanage.cpp",
      "position" : 50,
      "pull_request_review_id" : 2014522439,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574610556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T11:39:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574610556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574612750"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574612750"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, forgot to remove the comment. We need to make time parameterizable across `TxOrphanage` members to test order, so not testing / saving for followup.",
      "commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "created_at" : "2024-04-22T11:40:56Z",
      "diff_hunk" : "@@ -138,4 +162,154 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        // Check contents and ensure transactions are returned in order of recency.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574612750",
      "id" : 1574612750,
      "in_reply_to_id" : 1573353122,
      "line" : 200,
      "node_id" : "PRRC_kwDOABII585d2q8O",
      "original_commit_id" : "42859548ab5aebf40da6089b85065f7c204b992a",
      "original_line" : 200,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 80,
      "pull_request_review_id" : 2014525744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574612750/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T11:40:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574612750",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574616498"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616498"
         }
      },
      "author_association" : "MEMBER",
      "body" : "deleted",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T11:44:03Z",
      "diff_hunk" : "@@ -138,4 +162,154 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        // Check contents and ensure transactions are returned in order of recency.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574616498",
      "id" : 1574616498,
      "in_reply_to_id" : 1573353122,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585d2r2y",
      "original_commit_id" : "42859548ab5aebf40da6089b85065f7c204b992a",
      "original_line" : 200,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2014531627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616498/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T12:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616498",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574616580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616580"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T11:44:07Z",
      "diff_hunk" : "@@ -138,4 +162,154 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        // Check contents and ensure transactions are returned in order of recency.\n+        const auto parent1_children_from_sender{orphanage.GetChildrenFromSamePeer(parent1, node1)};\n+        for (const auto& tx : parent1_children_from_sender) {\n+            BOOST_CHECK(expected_parent1_children.contains(tx));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574616580",
      "id" : 1574616580,
      "in_reply_to_id" : 1573354857,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585d2r4E",
      "original_commit_id" : "42859548ab5aebf40da6089b85065f7c204b992a",
      "original_line" : 203,
      "original_position" : 83,
      "original_start_line" : 201,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2014531627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616580/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-22T12:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616580",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574616703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "deleted",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T11:44:14Z",
      "diff_hunk" : "@@ -40,6 +43,93 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n     return MakeTransactionRef(mtx);\n }\n \n+// Create a Wtxid from a hex string\n+inline Wtxid WtxidFromString(std::string_view str)\n+{\n+    return Wtxid::FromUint256(uint256S(str.data()));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_hash_tests, TestChain100Setup)\n+{\n+    // Random real segwit transaction\n+    DataStream stream_1{\n+        ParseHex(\"02000000000101964b8aa63509579ca6086e6012eeaa4c2f4dd1e283da29b67c8eea38b3c6fd220000000000fdffffff0294c618000000000017a9145afbbb42f4e83312666d0697f9e66259912ecde38768fa2c0000000000160014897388a0889390fd0e153a22bb2cf9d8f019faf50247304402200547406380719f84d68cf4e96cc3e4a1688309ef475b150be2b471c70ea562aa02206d255f5acc40fd95981874d77201d2eb07883657ce1c796513f32b6079545cdf0121023ae77335cefcb5ab4c1dc1fb0d2acfece184e593727d7d5906c78e564c7c11d125cf0c00\"),\n+    };\n+    CTransaction tx_1(deserialize, TX_WITH_WITNESS, stream_1);\n+    CTransactionRef ptx_1{MakeTransactionRef(tx_1)};\n+\n+    // Random real nonsegwit transaction\n+    DataStream stream_2{\n+        ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"),\n+    };\n+    CTransaction tx_2(deserialize, TX_WITH_WITNESS, stream_2);\n+    CTransactionRef ptx_2{MakeTransactionRef(tx_2)};\n+\n+    // Random real segwit transaction\n+    DataStream stream_3{\n+        ParseHex(\"0200000000010177862801f77c2c068a70372b4c435ef8dd621291c36a64eb4dd491f02218f5324600000000fdffffff014a0100000000000022512035ea312034cfac01e956a269f3bf147f569c2fbb00180677421262da042290d803402be713325ff285e66b0380f53f2fae0d0fb4e16f378a440fed51ce835061437566729d4883bc917632f3cff474d6384bc8b989961a1d730d4a87ed38ad28bd337b20f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7fac0063036f7264010118746578742f706c61696e3b636861727365743d7574662d3800357b2270223a226272632d3230222c226f70223a226d696e74222c227469636b223a224342414c222c22616d74223a2236393639227d6821c1f1d658c6c138b1c312e072b4446f50f01ae0da03a42e6274f8788aae53416a7f00000000\"),\n+    };\n+    CTransaction tx_3(deserialize, TX_WITH_WITNESS, stream_3);\n+    CTransactionRef ptx_3{MakeTransactionRef(tx_3)};\n+\n+    // It's easy to see that wtxids are sorted in lexicographical order:\n+    Wtxid wtxid_1{WtxidFromString(\"0x85cd1a31eb38f74ed5742ec9cb546712ab5aaf747de28a9168b53e846cbda17f\")};\n+    Wtxid wtxid_2{WtxidFromString(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\")};\n+    Wtxid wtxid_3{WtxidFromString(\"0xe065bac15f62bb4e761d761db928ddee65a47296b2b776785abb912cdec474e3\")};\n+    BOOST_CHECK_EQUAL(tx_1.GetWitnessHash(), wtxid_1);\n+    BOOST_CHECK_EQUAL(tx_2.GetWitnessHash(), wtxid_2);\n+    BOOST_CHECK_EQUAL(tx_3.GetWitnessHash(), wtxid_3);\n+\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_2.GetHex());\n+    BOOST_CHECK(wtxid_2.GetHex() < wtxid_3.GetHex());\n+    BOOST_CHECK(wtxid_1.GetHex() < wtxid_3.GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574616703",
      "id" : 1574616703,
      "in_reply_to_id" : 1573331603,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585d2r5_",
      "original_commit_id" : "5c8aa657642ef24e711a73c28278644f14117d73",
      "original_line" : 85,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2014531627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616703/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T12:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574616703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574632413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574632413"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's pretty common to name a temporary data structure based on its intended result. But ok, I've changed it to `iters` now.",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T11:56:56Z",
      "diff_hunk" : "@@ -241,3 +241,71 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n         LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n }\n+\n+std::vector<CTransactionRef> TxOrphanage::GetChildrenFromSamePeer(const CTransactionRef& parent, NodeId nodeid) const\n+{\n+    LOCK(m_mutex);\n+\n+    // First construct a vector of iterators to ensure we do not return duplicates of the same tx\n+    // and so we can sort by nTimeExpire.\n+    std::vector<OrphanMap::iterator> unique_iters;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574632413",
      "id" : 1574632413,
      "in_reply_to_id" : 1573344593,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585d2vvd",
      "original_commit_id" : "ca9f03f2207854c849a14d7af2fcd91a5f675e14",
      "original_line" : 251,
      "original_position" : 11,
      "original_start_line" : 249,
      "path" : "src/txorphanage.cpp",
      "position" : null,
      "pull_request_review_id" : 2014531627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574632413/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-22T12:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574632413",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574633307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574633307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "deleted",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T11:57:39Z",
      "diff_hunk" : "@@ -0,0 +1,319 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def subest_check(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574633307",
      "id" : 1574633307,
      "in_reply_to_id" : 1572436712,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585d2v9b",
      "original_commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 2014531627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574633307/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T12:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574633307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574634137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574634137"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah that was supposed to be another log, should be fixed now",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T11:58:15Z",
      "diff_hunk" : "@@ -0,0 +1,319 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    def subest_check(self):\n+        self.nodes[0].disconnect_p2ps()\n+        # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+        # relay feerate. However, do check that this is the case.\n+        assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+        # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+        self.wallet.rescan_utxos(include_mempool=True)\n+\n+    @cleanup\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    @cleanup\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        # This feerate is above mempoolminfee, but not enough to also bump the low feerate parent.\n+        feerate_just_above = node.getmempoolinfo()[\"mempoolminfee\"]\n+        med_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=feerate_just_above)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(med_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(med_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert med_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_orphan_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        bad_orphan_sender = node.add_p2p_connection(P2PInterface())\n+        parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        bad_orphan_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        bad_orphan_sender.wait_for_getdata([child_wtxid_int])\n+        bad_orphan_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        bad_orphan_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different peer relays the parent. Parent+Child are evaluated as a package and rejected.\n+        parent_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] not in node_mempool\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\n+\n+        # 5. Peer that sent a consensus-invalid transaction should be disconnected.\n+        bad_orphan_sender.wait_for_disconnect()\n+\n+        # The peer that didn't provide the orphan should not be disconnected.\n+        parent_sender.sync_with_ping()\n+\n+    @cleanup\n+    def test_parent_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        # Create invalid version of parent with a bad signature.\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        package_sender = node.add_p2p_connection(P2PInterface())\n+        fake_parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        package_sender.wait_for_getdata([child_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\n+        package_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different node relays the parent. The parent is first evaluated by itself and\n+        # rejected for being too low feerate. Then it is evaluated as a package and, after passing\n+        # feerate checks, rejected for having a bad signature (consensus error).\n+        fake_parent_sender.send_message(msg_tx(tx_parent_bad_wit))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\n+        assert high_fee_child[\"txid\"] not in node_mempool\n+\n+        # 5. Peer sent a consensus-invalid transaction.\n+        fake_parent_sender.wait_for_disconnect()\n+\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1574634137",
      "id" : 1574634137,
      "in_reply_to_id" : 1572504707,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585d2wKZ",
      "original_commit_id" : "a053911cb9957797faff7f68dbd6deb6b6080578",
      "original_line" : 278,
      "original_position" : 278,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 2014531627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574634137/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T12:27:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574634137",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575059642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575059642"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit\r\n```Suggestion\r\n        BOOST_CHECK(orphanage.GetChildrenFromSamePeer(parent1, node2).empty());\r\n        BOOST_CHECK(orphanage.GetChildrenFromSamePeer(parent2, node2).empty());\r\n```",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T16:39:47Z",
      "diff_hunk" : "@@ -138,4 +162,157 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        const auto parent1_children_from_sender{orphanage.GetChildrenFromSamePeer(parent1, node1)};\n+        BOOST_CHECK_EQUAL(parent1_children_from_sender.size(), expected_parent1_children.size());\n+        for (const auto& tx : parent1_children_from_sender) {\n+            BOOST_CHECK(expected_parent1_children.contains(tx));\n+        }\n+        const auto parent2_children_from_sender{orphanage.GetChildrenFromSamePeer(parent2, node1)};\n+        BOOST_CHECK_EQUAL(parent2_children_from_sender.size(), expected_parent2_children.size());\n+        for (const auto& tx : parent2_children_from_sender) {\n+            BOOST_CHECK(expected_parent2_children.contains(tx));\n+        }\n+        // The peer must match\n+        BOOST_CHECK(orphanage.GetChildrenFromSamePeer(parent1, node2).empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575059642",
      "id" : 1575059642,
      "line" : 211,
      "node_id" : "PRRC_kwDOABII585d4YC6",
      "original_commit_id" : "507f5ea12a9637a5922d6220dedb91ca40396d7e",
      "original_line" : 211,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 91,
      "pull_request_review_id" : 2015296846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575059642/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T17:01:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575059642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575061630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575061630"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit\r\n```Suggestion\r\n        // There shouldn't be any children of this tx in orphanage\r\n```",
      "commit_id" : "7d220c6a5c0e0c5e8cfe79ebd2eae6e845d1d983",
      "created_at" : "2024-04-22T16:41:26Z",
      "diff_hunk" : "@@ -138,4 +162,157 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        const auto parent1_children_from_sender{orphanage.GetChildrenFromSamePeer(parent1, node1)};\n+        BOOST_CHECK_EQUAL(parent1_children_from_sender.size(), expected_parent1_children.size());\n+        for (const auto& tx : parent1_children_from_sender) {\n+            BOOST_CHECK(expected_parent1_children.contains(tx));\n+        }\n+        const auto parent2_children_from_sender{orphanage.GetChildrenFromSamePeer(parent2, node1)};\n+        BOOST_CHECK_EQUAL(parent2_children_from_sender.size(), expected_parent2_children.size());\n+        for (const auto& tx : parent2_children_from_sender) {\n+            BOOST_CHECK(expected_parent2_children.contains(tx));\n+        }\n+        // The peer must match\n+        BOOST_CHECK(orphanage.GetChildrenFromSamePeer(parent1, node2).empty());\n+\n+        const auto parent1_children_not_other{orphanage.GetChildrenFromDifferentPeer(parent1, node2)};\n+        BOOST_CHECK_EQUAL(parent1_children_from_sender.size(), expected_parent1_children.size());\n+        for (const auto& [tx, peer] : parent1_children_not_other) {\n+            BOOST_CHECK(expected_parent1_children.contains(tx));\n+            BOOST_CHECK_EQUAL(peer, node1);\n+        }\n+        const auto parent2_children_not_other{orphanage.GetChildrenFromDifferentPeer(parent2, node2)};\n+        BOOST_CHECK_EQUAL(parent2_children_from_sender.size(), expected_parent2_children.size());\n+        for (const auto& [tx, peer] : parent2_children_not_other) {\n+            BOOST_CHECK(expected_parent2_children.contains(tx));\n+            BOOST_CHECK_EQUAL(peer, node1);\n+        }\n+\n+        // There shouldn't be any children of this tx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575061630",
      "id" : 1575061630,
      "line" : 226,
      "node_id" : "PRRC_kwDOABII585d4Yh-",
      "original_commit_id" : "507f5ea12a9637a5922d6220dedb91ca40396d7e",
      "original_line" : 226,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 106,
      "pull_request_review_id" : 2015296846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575061630/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T17:01:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575061630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575118464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575118464"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Let's say we've got a transaction T that is missing inputs.  We loop through the missing parents and see that none are in `m_recent_rejects`, so we drop into this block of code.\r\n\r\nIf there's more than 1 missing parent in `m_recent_rejects_reconsiderable`, is there any benefit to fetching them?  It seems like we could tell in advance that validation would fail in that circumstance, because we only try 1P1C packages.\r\n\r\nI don't know if it's worth additional complexity to deal with this case, but just wanted to flag the potential bandwidth waste if this were a common pattern.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-22T17:23:36Z",
      "diff_hunk" : "@@ -4432,7 +4586,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     // protocol for getting all unconfirmed parents.\n                     const auto gtxid{GenTxid::Txid(parent_txid)};\n                     AddKnownTx(*peer, parent_txid);\n-                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) AddTxAnnouncement(pfrom, gtxid, current_time);\n+                    // Exclude m_recent_rejects_reconsiderable: the missing parent may have been\n+                    // previously rejected for being too low feerate. This orphan might CPFP it.\n+                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/false)) AddTxAnnouncement(pfrom, gtxid, current_time);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575118464",
      "id" : 1575118464,
      "line" : 4608,
      "node_id" : "PRRC_kwDOABII585d4maA",
      "original_commit_id" : "668313e00df9db815b392811bfc27dbb673ea9f9",
      "original_line" : 4608,
      "original_position" : 182,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 346,
      "pull_request_review_id" : 2005939457,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575118464/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T22:38:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575118464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575419630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575419630"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just an observation: I guess the more common case will likely be multiple children of the same parent transaction (rather than conflicting children).  Still, we have no idea which child will have the best chance of successfully bumping it, so this ordering seems as good as any.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-22T22:27:52Z",
      "diff_hunk" : "@@ -3195,6 +3210,136 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the case of children that\n+    // replace each other, this helps us accept the highest feerate (most recent) one most\n+    // efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575419630",
      "id" : 1575419630,
      "line" : 3292,
      "node_id" : "PRRC_kwDOABII585d5v7u",
      "original_commit_id" : "668313e00df9db815b392811bfc27dbb673ea9f9",
      "original_line" : 3292,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 212,
      "pull_request_review_id" : 2005939457,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575419630/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T22:38:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575419630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575987644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575987644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done. Also refactored orphanage_tests to be more readable.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T09:57:42Z",
      "diff_hunk" : "@@ -138,4 +162,157 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(get_children)\n+{\n+    FastRandomContext det_rand{true};\n+    std::vector<COutPoint> empty_outpoints;\n+\n+    auto parent1 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    auto parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+\n+    // Make sure these parents have different txids otherwise this test won't make sense.\n+    while (parent1->GetHash() == parent2->GetHash()) {\n+        parent2 = MakeTransactionSpending(empty_outpoints, det_rand);\n+    }\n+\n+    // Create children to go into orphanage.\n+    auto child_p1n0 = MakeTransactionSpending({{parent1->GetHash(), 0}}, det_rand);\n+    auto child_p2n1 = MakeTransactionSpending({{parent2->GetHash(), 1}}, det_rand);\n+    // Spends the same tx twice. Should not cause duplicates.\n+    auto child_p1n0_p1n1 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent1->GetHash(), 1}}, det_rand);\n+    // Spends the same outpoint as previous tx. Should still be returned; don't assume outpoints are unique.\n+    auto child_p1n0_p2n0 = MakeTransactionSpending({{parent1->GetHash(), 0}, {parent2->GetHash(), 0}}, det_rand);\n+\n+    const NodeId node1{1};\n+    const NodeId node2{2};\n+\n+    // All orphans provided by node1\n+    {\n+        TxOrphanage orphanage;\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p2n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p1n1, node1));\n+        BOOST_CHECK(orphanage.AddTx(child_p1n0_p2n0, node1));\n+\n+        std::set<CTransactionRef> expected_parent1_children{child_p1n0, child_p1n0_p2n0, child_p1n0_p1n1};\n+        std::set<CTransactionRef> expected_parent2_children{child_p2n1, child_p1n0_p2n0};\n+\n+        const auto parent1_children_from_sender{orphanage.GetChildrenFromSamePeer(parent1, node1)};\n+        BOOST_CHECK_EQUAL(parent1_children_from_sender.size(), expected_parent1_children.size());\n+        for (const auto& tx : parent1_children_from_sender) {\n+            BOOST_CHECK(expected_parent1_children.contains(tx));\n+        }\n+        const auto parent2_children_from_sender{orphanage.GetChildrenFromSamePeer(parent2, node1)};\n+        BOOST_CHECK_EQUAL(parent2_children_from_sender.size(), expected_parent2_children.size());\n+        for (const auto& tx : parent2_children_from_sender) {\n+            BOOST_CHECK(expected_parent2_children.contains(tx));\n+        }\n+        // The peer must match\n+        BOOST_CHECK(orphanage.GetChildrenFromSamePeer(parent1, node2).empty());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575987644",
      "id" : 1575987644,
      "in_reply_to_id" : 1575059642,
      "line" : 225,
      "node_id" : "PRRC_kwDOABII585d76m8",
      "original_commit_id" : "507f5ea12a9637a5922d6220dedb91ca40396d7e",
      "original_line" : 225,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/test/orphanage_tests.cpp",
      "position" : 105,
      "pull_request_review_id" : 2016798985,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575987644/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T09:57:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575987644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575989359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575989359"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Edited the comment to say this is a probably uncommon case",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T09:59:08Z",
      "diff_hunk" : "@@ -3195,6 +3210,136 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the case of children that\n+    // replace each other, this helps us accept the highest feerate (most recent) one most\n+    // efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575989359",
      "id" : 1575989359,
      "in_reply_to_id" : 1575419630,
      "line" : 3292,
      "node_id" : "PRRC_kwDOABII585d77Bv",
      "original_commit_id" : "668313e00df9db815b392811bfc27dbb673ea9f9",
      "original_line" : 3292,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 212,
      "pull_request_review_id" : 2016801867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575989359/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T09:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575989359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575996002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575996002"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I definitely agree it's awkward and doesn't have much benefit. I'll leave the assume/handling here, and maybe in a followup we can change it to non-optional.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T10:04:17Z",
      "diff_hunk" : "@@ -4354,7 +4354,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const TxValidationState& state = result.m_state;\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-            ProcessValidTx(pfrom.GetId(), ptx, result.m_replaced_transactions.value());\n+            Assume(result.m_replaced_transactions.has_value());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1575996002",
      "id" : 1575996002,
      "in_reply_to_id" : 1568781077,
      "line" : 4557,
      "node_id" : "PRRC_kwDOABII585d78pi",
      "original_commit_id" : "6f4da19cc3b1b7cd23cb4be95a6bb9acb79eb3bf",
      "original_line" : 4357,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 309,
      "pull_request_review_id" : 2016812242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575996002/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T10:04:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1575996002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576145432"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576145432"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point, I don't think this is too complex so I've added it.\r\n\r\nWhile working on this, I remembered/realized that if there are any other unconfirmed parents at all, we will reject it because the package must be child-with-unconfirmed-parents, enforced here:\r\nhttps://github.com/bitcoin/bitcoin/blob/256e1703197fdddd78bc6d659431cd0fc3b63cde/src/validation.cpp#L1558-L1564\r\n\r\nIIRC this was the way to check that a package was \"2 generations only\". But I don't know how useful this is, and it's quite annoying here, so perhaps we should consider getting rid of this restriction in a followup... Then we can accept packages where the child has parents already in mempool.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T12:11:32Z",
      "diff_hunk" : "@@ -4432,7 +4586,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     // protocol for getting all unconfirmed parents.\n                     const auto gtxid{GenTxid::Txid(parent_txid)};\n                     AddKnownTx(*peer, parent_txid);\n-                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/true)) AddTxAnnouncement(pfrom, gtxid, current_time);\n+                    // Exclude m_recent_rejects_reconsiderable: the missing parent may have been\n+                    // previously rejected for being too low feerate. This orphan might CPFP it.\n+                    if (!AlreadyHaveTx(gtxid, /*include_reconsiderable=*/false)) AddTxAnnouncement(pfrom, gtxid, current_time);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576145432",
      "id" : 1576145432,
      "in_reply_to_id" : 1575118464,
      "line" : 4608,
      "node_id" : "PRRC_kwDOABII585d8hIY",
      "original_commit_id" : "668313e00df9db815b392811bfc27dbb673ea9f9",
      "original_line" : 4608,
      "original_position" : 182,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 346,
      "pull_request_review_id" : 2017068778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576145432/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T12:11:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576145432",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576164670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576164670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FWIW: I added logging here to see what number of parents and given by different peers than the orphan. After a day of running it's 0 out of 162. \r\n\r\nIs there a reason to think this should be a common pattern? ",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T12:26:42Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576164670",
      "id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585d8l0-",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2017100083,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576164670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T12:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576164670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576171557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576171557"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If a parent+child are relayed roughly simultaneously across the network, then I would expect there to be times when we download the transactions out of order (eg because we send a request for the parent to a different peer than the request for the child).",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T12:31:50Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576171557",
      "id" : 1576171557,
      "in_reply_to_id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585d8ngl",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2017111931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576171557/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T12:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576171557",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576185766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576185766"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess it'll likely be something like:\r\n\r\n1) peer A sends child, child is put in orphanage and parent tx request queued(but not yet sent)\r\n2) peer B has slightly out of date feefilter for your node, sends INV for parent\r\n\r\nthough I'm not convinced this really will make a difference",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T12:40:37Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576185766",
      "id" : 1576185766,
      "in_reply_to_id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585d8q-m",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2017135526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576185766/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T12:41:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576185766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576208038"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576208038"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fwiw it's definitely not common, but I do see them occasionally and have a handful of acceptances of packages from 2 different peers",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T12:55:59Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576208038",
      "id" : 1576208038,
      "in_reply_to_id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585d8wam",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2017171935,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576208038/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T12:55:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576208038",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576214320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576214320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> though I'm not convinced this really will make a difference\r\n\r\nIs the suggestion to drop this and only try same-peer packages?",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T13:00:19Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576214320",
      "id" : 1576214320,
      "in_reply_to_id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585d8x8w",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2017182417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576214320/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T13:00:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576214320",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576220246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576220246"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I guess it'll likely be something like:\r\n> \r\n> 1. peer A sends child, child is put in orphanage and parent tx request queued(but not yet sent)\r\n> 2. peer B has slightly out of date feefilter for your node, sends INV for parent\r\n\r\nWhat I'd expect to happen is that we get inv's for parent+child from both Peer A and Peer B, and we happen to request the parent from A and the child from B, but the child arrives first -- it's put in the orphanage, and since a request for the parent is already in flight to A, we don't send another request for the parent to B.\r\n\r\n(In this scenario I guess I'm assuming no feefilter, or that the feefilter value is slightly stale.)\r\n",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T13:04:12Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576220246",
      "id" : 1576220246,
      "in_reply_to_id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585d8zZW",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2017192534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576220246/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T13:04:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576220246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576261445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576261445"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Is the suggestion to drop this and only try same-peer packages?\r\n\r\nIf this is hitting actual usage, no, because it's coded and I actually reviewed it, and tests seem to cover it. I'm unsure if in BIP331-like world it would be used since it would be receiver-driven, but that might be thinking too far ahead.\r\n\r\n> (In this scenario I guess I'm assuming no feefilter, or that the feefilter value is slightly stale.)\r\n\r\nLatter scenario seems likely in practice as I see things right on the bubble all the time.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T13:25:54Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576261445",
      "id" : 1576261445,
      "in_reply_to_id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585d89dF",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2017269003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576261445/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T13:26:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576261445",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576365857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576365857"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is there a constant we can put here?",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T14:29:29Z",
      "diff_hunk" : "@@ -0,0 +1,348 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+import time\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    @cleanup\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    @cleanup\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        # This feerate is above mempoolminfee, but not enough to also bump the low feerate parent.\n+        feerate_just_above = node.getmempoolinfo()[\"mempoolminfee\"]\n+        med_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=feerate_just_above)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(med_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(med_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert med_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_orphan_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        bad_orphan_sender = node.add_p2p_connection(P2PInterface())\n+        parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        bad_orphan_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        bad_orphan_sender.wait_for_getdata([child_wtxid_int])\n+        bad_orphan_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        bad_orphan_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different peer relays the parent. Parent+Child are evaluated as a package and rejected.\n+        parent_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] not in node_mempool\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\n+\n+        # 5. Peer that sent a consensus-invalid transaction should be disconnected.\n+        bad_orphan_sender.wait_for_disconnect()\n+\n+        # The peer that didn't provide the orphan should not be disconnected.\n+        parent_sender.sync_with_ping()\n+\n+    @cleanup\n+    def test_parent_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        # Create invalid version of parent with a bad signature.\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        package_sender = node.add_p2p_connection(P2PInterface())\n+        fake_parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        package_sender.wait_for_getdata([child_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\n+        package_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different node relays the parent. The parent is first evaluated by itself and\n+        # rejected for being too low feerate. Then it is evaluated as a package and, after passing\n+        # feerate checks, rejected for having a bad signature (consensus error).\n+        fake_parent_sender.send_message(msg_tx(tx_parent_bad_wit))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\n+        assert high_fee_child[\"txid\"] not in node_mempool\n+\n+        # 5. Peer sent a consensus-invalid transaction.\n+        fake_parent_sender.wait_for_disconnect()\n+\n+        self.log.info(\"Check that fake parent does not cause orphan to be deleted and real package can still be submitted\")\n+        # 6. Child-sending should not have been punished and the orphan should remain in orphanage.\n+        # It can send the \"real\" parent transaction, and the package is accepted.\n+        package_sender.sync_with_ping()\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_multiple_parents(self):\n+        self.log.info(\"Check that node does not request more than 1 previously-rejected low feerate parent\")\n+\n+        node = self.nodes[0]\n+        node.setmocktime(int(time.time()))\n+\n+        # 2-parent-1-child package where both parents are below mempool min feerate\n+        parent_low_1 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        parent_low_2 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        child_bumping = self.wallet_nonsegwit.create_self_transfer_multi(\n+            utxos_to_spend=[parent_low_1[\"new_utxo\"], parent_low_2[\"new_utxo\"]],\n+            fee_per_output=999*parent_low_1[\"tx\"].get_vsize(),\n+        )\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Send both parents. Each should be rejected for being too low feerate.\n+        # Send unsolicited so that we can later check that no \"getdata\" was ever received.\n+        peer_sender.send_and_ping(msg_tx(parent_low_1[\"tx\"]))\n+        peer_sender.send_and_ping(msg_tx(parent_low_2[\"tx\"]))\n+\n+        # parent_low_1 and parent_low_2 are rejected for being low feerate.\n+        assert parent_low_1[\"txid\"] not in node.getrawmempool()\n+        assert parent_low_2[\"txid\"] not in node.getrawmempool()\n+\n+        # 2. Send child.\n+        peer_sender.send_and_ping(msg_tx(child_bumping[\"tx\"]))\n+\n+        # 3. Node should not request any parents, as it should recognize that it will not accept\n+        # multi-parent-1-child packages.\n+        node.bumpmocktime(60)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576365857",
      "id" : 1576365857,
      "line" : 312,
      "node_id" : "PRRC_kwDOABII585d9W8h",
      "original_commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "original_line" : 312,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 312,
      "pull_request_review_id" : 2017442665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576365857/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T16:33:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576365857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576479584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576479584"
         }
      },
      "author_association" : "MEMBER",
      "body" : "regression test for the `Assume()` that was hit? And unsetting the mocktime to not have interference in subtests...\r\n```\r\ndiff --git a/test/functional/p2p_opportunistic_1p1c.py b/test/functional/p2p_opportunistic_1p1c.py\r\nindex 2eaa2a0a79..f3a741498b 100755\r\n--- a/test/functional/p2p_opportunistic_1p1c.py\r\n+++ b/test/functional/p2p_opportunistic_1p1c.py\r\n@@ -291,58 +291,97 @@ class PackageRelayTest(BitcoinTestFramework):\r\n         child_bumping = self.wallet_nonsegwit.create_self_transfer_multi(\r\n             utxos_to_spend=[parent_low_1[\"new_utxo\"], parent_low_2[\"new_utxo\"]],\r\n             fee_per_output=999*parent_low_1[\"tx\"].get_vsize(),\r\n         )\r\n \r\n         peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\r\n \r\n         # 1. Send both parents. Each should be rejected for being too low feerate.\r\n         # Send unsolicited so that we can later check that no \"getdata\" was ever received.\r\n         peer_sender.send_and_ping(msg_tx(parent_low_1[\"tx\"]))\r\n         peer_sender.send_and_ping(msg_tx(parent_low_2[\"tx\"]))\r\n \r\n         # parent_low_1 and parent_low_2 are rejected for being low feerate.\r\n         assert parent_low_1[\"txid\"] not in node.getrawmempool()\r\n         assert parent_low_2[\"txid\"] not in node.getrawmempool()\r\n \r\n         # 2. Send child.\r\n         peer_sender.send_and_ping(msg_tx(child_bumping[\"tx\"]))\r\n \r\n         # 3. Node should not request any parents, as it should recognize that it will not accept\r\n         # multi-parent-1-child packages.\r\n         node.bumpmocktime(60)\r\n         peer_sender.sync_with_ping()\r\n         assert \"getdata\" not in peer_sender.last_message\r\n \r\n+        node.setmocktime(0)\r\n+\r\n+\r\n+    @cleanup\r\n+    def test_in_mempool_parent(self):\r\n+        self.log.info(\"Check that node rejects a 1p1c package if another parent is already in mempool\")\r\n+\r\n+        node = self.nodes[0]\r\n+        #node.setmocktime(int(time.time()))\r\n+\r\n+        # 2-parent-1-child package where first parent is above mempool minfeerate but second parents is below\r\n+        parent_high = self.wallet_nonsegwit.create_self_transfer(fee_rate=999*FEERATE_1SAT_VB, confirmed_only=True)\r\n+        parent_low = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\r\n+        child_bumping = self.wallet_nonsegwit.create_self_transfer_multi(\r\n+            utxos_to_spend=[parent_high[\"new_utxo\"], parent_low[\"new_utxo\"]],\r\n+            fee_per_output=999*parent_low[\"tx\"].get_vsize(),\r\n+        )\r\n+\r\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\r\n+\r\n+        # 1. Send first parent which will be accepted.\r\n+        peer_sender.send_and_ping(msg_tx(parent_high[\"tx\"]))\r\n+        assert parent_high[\"txid\"] in node.getrawmempool()\r\n+\r\n+        # 2. Send child.\r\n+        peer_sender.send_and_ping(msg_tx(child_bumping[\"tx\"]))\r\n+\r\n+        # 3. Node should request parent_low via txid, but node will reject child_bumping + parent_low\r\n+        #    due to `package-not-child-with-unconfirmed-parents`\r\n+        #node.bumpmocktime(60)\r\n+        parent_low_txid_int = int(parent_low[\"txid\"], 16)\r\n+        peer_sender.wait_for_getdata([parent_low_txid_int])\r\n+        peer_sender.send_and_ping(msg_tx(parent_low[\"tx\"]))\r\n+\r\n+        node_mempool = node.getrawmempool()\r\n+        assert parent_low[\"txid\"] not in node_mempool\r\n+        assert child_bumping[\"txid\"] not in node_mempool\r\n+        assert parent_high[\"txid\"] in node_mempool\r\n \r\n     def run_test(self):\r\n         node = self.nodes[0]\r\n         self.wallet = MiniWallet(node)\r\n         self.wallet_nonsegwit = MiniWallet(node, mode=MiniWalletMode.RAW_P2PK)\r\n         self.generate(self.wallet_nonsegwit, 10)\r\n         self.generate(self.wallet, 20)\r\n \r\n         filler_wallet = MiniWallet(node)\r\n         fill_mempool(self, node, filler_wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when parent (txid != wtxid) is received before child\")\r\n         self.test_basic_parent_then_child(self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when parent (txid == wtxid) is received before child\")\r\n         self.test_basic_parent_then_child(self.wallet_nonsegwit)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when child is received before parent\")\r\n         self.test_basic_child_then_parent()\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when 2 candidate children exist (parent txid != wtxid)\")\r\n         self.test_low_and_high_child(self.wallet)\r\n \r\n         self.log.info(\"Check opportunistic 1p1c logic when 2 candidate children exist (parent txid == wtxid)\")\r\n         self.test_low_and_high_child(self.wallet_nonsegwit)\r\n \r\n         self.test_orphan_consensus_failure()\r\n         self.test_parent_consensus_failure()\r\n         self.test_multiple_parents()\r\n+        self.test_in_mempool_parent()\r\n \r\n \r\n if __name__ == '__main__':\r\n     PackageRelayTest().main()\r\n```",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-23T15:38:56Z",
      "diff_hunk" : "@@ -0,0 +1,348 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+import time\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    @cleanup\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    @cleanup\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        # This feerate is above mempoolminfee, but not enough to also bump the low feerate parent.\n+        feerate_just_above = node.getmempoolinfo()[\"mempoolminfee\"]\n+        med_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=feerate_just_above)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(med_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(med_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert med_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_orphan_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        bad_orphan_sender = node.add_p2p_connection(P2PInterface())\n+        parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        bad_orphan_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        bad_orphan_sender.wait_for_getdata([child_wtxid_int])\n+        bad_orphan_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        bad_orphan_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different peer relays the parent. Parent+Child are evaluated as a package and rejected.\n+        parent_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] not in node_mempool\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\n+\n+        # 5. Peer that sent a consensus-invalid transaction should be disconnected.\n+        bad_orphan_sender.wait_for_disconnect()\n+\n+        # The peer that didn't provide the orphan should not be disconnected.\n+        parent_sender.sync_with_ping()\n+\n+    @cleanup\n+    def test_parent_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        # Create invalid version of parent with a bad signature.\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        package_sender = node.add_p2p_connection(P2PInterface())\n+        fake_parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        package_sender.wait_for_getdata([child_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\n+        package_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different node relays the parent. The parent is first evaluated by itself and\n+        # rejected for being too low feerate. Then it is evaluated as a package and, after passing\n+        # feerate checks, rejected for having a bad signature (consensus error).\n+        fake_parent_sender.send_message(msg_tx(tx_parent_bad_wit))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\n+        assert high_fee_child[\"txid\"] not in node_mempool\n+\n+        # 5. Peer sent a consensus-invalid transaction.\n+        fake_parent_sender.wait_for_disconnect()\n+\n+        self.log.info(\"Check that fake parent does not cause orphan to be deleted and real package can still be submitted\")\n+        # 6. Child-sending should not have been punished and the orphan should remain in orphanage.\n+        # It can send the \"real\" parent transaction, and the package is accepted.\n+        package_sender.sync_with_ping()\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_multiple_parents(self):\n+        self.log.info(\"Check that node does not request more than 1 previously-rejected low feerate parent\")\n+\n+        node = self.nodes[0]\n+        node.setmocktime(int(time.time()))\n+\n+        # 2-parent-1-child package where both parents are below mempool min feerate\n+        parent_low_1 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        parent_low_2 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        child_bumping = self.wallet_nonsegwit.create_self_transfer_multi(\n+            utxos_to_spend=[parent_low_1[\"new_utxo\"], parent_low_2[\"new_utxo\"]],\n+            fee_per_output=999*parent_low_1[\"tx\"].get_vsize(),\n+        )\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Send both parents. Each should be rejected for being too low feerate.\n+        # Send unsolicited so that we can later check that no \"getdata\" was ever received.\n+        peer_sender.send_and_ping(msg_tx(parent_low_1[\"tx\"]))\n+        peer_sender.send_and_ping(msg_tx(parent_low_2[\"tx\"]))\n+\n+        # parent_low_1 and parent_low_2 are rejected for being low feerate.\n+        assert parent_low_1[\"txid\"] not in node.getrawmempool()\n+        assert parent_low_2[\"txid\"] not in node.getrawmempool()\n+\n+        # 2. Send child.\n+        peer_sender.send_and_ping(msg_tx(child_bumping[\"tx\"]))\n+\n+        # 3. Node should not request any parents, as it should recognize that it will not accept\n+        # multi-parent-1-child packages.\n+        node.bumpmocktime(60)\n+        peer_sender.sync_with_ping()\n+        assert \"getdata\" not in peer_sender.last_message\n+\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1576479584",
      "id" : 1576479584,
      "line" : 317,
      "node_id" : "PRRC_kwDOABII585d9ytg",
      "original_commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "original_line" : 317,
      "original_position" : 317,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 317,
      "pull_request_review_id" : 2017442665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576479584/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-23T16:33:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1576479584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577936862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577936862"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think that is much simpler. Also I think this is easier to delete if/when we don't try orphans from different peers in the future.",
      "commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "created_at" : "2024-04-24T13:53:43Z",
      "diff_hunk" : "@@ -3195,6 +3210,115 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    const auto cpfp_candidates{m_orphanage.GetChildren(ptx)};\n+    // Exit early.\n+    if (cpfp_candidates.empty()) {\n+        LogDebug(BCLog::TXPACKAGES, \"didn't evaluate package for %s (wtxid=%s), no corresponding orphan found\\n\",\n+                 parent_txid.ToString(), parent_wtxid.ToString());\n+        return;\n+    }\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Create a 1p1c package using the first child that hasn't already been rejected. Sort\n+    // the children in random order to not create a bias that attackers can use to delay\n+    // package acceptance. Create a random permutation of the indices.\n+    std::vector<size_t> tx_indices(cpfp_candidates.size());\n+    std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+    Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577936862",
      "id" : 1577936862,
      "in_reply_to_id" : 1568834899,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eDWfe",
      "original_commit_id" : "25c712711d6b1074b40c440676e3b1c4e12e59af",
      "original_line" : 3293,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 2019952070,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577936862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-24T13:53:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577936862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577947487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577947487"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, marking this as resolved",
      "commit_id" : "30c9e6bc4e9f8b8b606e55435dc3f743cb2dd670",
      "created_at" : "2024-04-24T14:00:21Z",
      "diff_hunk" : "@@ -3195,6 +3210,140 @@ void PeerManagerImpl::ProcessValidTx(NodeId nodeid, const CTransactionRef& tx, c\n     }\n }\n \n+void PeerManagerImpl::ProcessPackageResult(const Package& package, const PackageMempoolAcceptResult& package_result, const std::vector<NodeId>& senders)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    if (package_result.m_state.IsInvalid()) {\n+        m_recent_rejects_reconsiderable.insert(GetPackageHash(package));\n+    }\n+    // We currently only expect to process 1-parent-1-child packages. Remove if this changes.\n+    if (!Assume(package.size() == 2)) return;\n+\n+    // No package results to look through for PCKG_POLICY or PCKG_MEMPOOL_ERROR\n+    if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY ||\n+        package_result.m_state.GetResult() == PackageValidationResult::PCKG_MEMPOOL_ERROR) return;\n+\n+    // Iterate backwards to erase in-package descendants from the orphanage before they become\n+    // relevant in AddChildrenToWorkSet.\n+    auto package_iter = package.rbegin();\n+    auto senders_iter = senders.rbegin();\n+    while (package_iter != package.rend()) {\n+        const auto& tx = *package_iter;\n+        const NodeId nodeid = *senders_iter;\n+        const auto it_result{package_result.m_tx_results.find(tx->GetWitnessHash())};\n+        if (Assume(it_result != package_result.m_tx_results.end())) {\n+            const auto& tx_result = it_result->second;\n+            switch (tx_result.m_result_type) {\n+                case MempoolAcceptResult::ResultType::VALID:\n+                {\n+                    Assume(tx_result.m_replaced_transactions.has_value());\n+                    std::list<CTransactionRef> empty_replacement_list;\n+                    ProcessValidTx(nodeid, tx, tx_result.m_replaced_transactions.value_or(empty_replacement_list));\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::INVALID:\n+                case MempoolAcceptResult::ResultType::DIFFERENT_WITNESS:\n+                {\n+                    // Don't add to vExtraTxnForCompact, as these transactions should have already been\n+                    // added there when added to the orphanage or rejected for TX_RECONSIDERABLE.\n+                    // This should be updated if package submission is ever used for transactions\n+                    // that haven't already been validated before.\n+                    ProcessInvalidTx(nodeid, tx, tx_result.m_state, /*maybe_add_extra_compact_tx=*/false);\n+                    break;\n+                }\n+                case MempoolAcceptResult::ResultType::MEMPOOL_ENTRY:\n+                {\n+                    // AlreadyHaveTx() should be catching transactions that are already in mempool.\n+                    Assume(false);\n+                    break;\n+                }\n+            }\n+        }\n+        package_iter++;\n+        // There should be a sender for each tx, but fall back to the last one otherwise.\n+        if (Assume(senders_iter != senders.rend())) senders_iter++;\n+    }\n+}\n+\n+void PeerManagerImpl::MaybeProcess1P1CPackage(const CTransactionRef& ptx, NodeId nodeid)\n+{\n+    AssertLockNotHeld(m_peer_mutex);\n+    AssertLockHeld(g_msgproc_mutex);\n+    AssertLockHeld(cs_main);\n+\n+    const auto& parent_txid{ptx->GetHash()};\n+    const auto& parent_wtxid{ptx->GetWitnessHash()};\n+\n+    CTransactionRef tx_orphan{nullptr};\n+    NodeId orphan_sender{-1};\n+    Assume(m_recent_rejects_reconsiderable.contains(parent_wtxid.ToUint256()));\n+\n+    // Prefer children from this peer. This helps prevent censorship attempts in which an attacker\n+    // sends lots of fake children for the parent, and we (unluckily) keep selecting the fake\n+    // children instead of the real one provided by the honest peer.\n+    const auto cpfp_candidates_same_peer{m_orphanage.GetChildrenFromSamePeer(ptx, nodeid)};\n+\n+    // These children should be sorted from most newest to oldest. In the (probably uncommon) case\n+    // of children that replace each other, this helps us accept the highest feerate (probably the\n+    // most recent) one efficiently.\n+    for (const auto& child : cpfp_candidates_same_peer) {\n+        Package maybe_cpfp_package{ptx, child};\n+        if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+            tx_orphan = child;\n+            orphan_sender = nodeid;\n+            break;\n+        }\n+    }\n+\n+    // If no suitable candidate from the same peer is found, also try children that were provided by\n+    // a different peer. This is useful because sometimes multiple peers announce both transactions\n+    // to us, and we happen to download them from different peers (we wouldn't have known that these\n+    // 2 transactions are related). We still want to find 1p1c packages then.\n+    //\n+    // If we start tracking all announcers of orphans, we can restrict this logic to parent + child\n+    // pairs in which both were provided by the same peer, i.e. delete this step.\n+    if (!tx_orphan) {\n+        const auto cpfp_candidates_different_peer{m_orphanage.GetChildrenFromDifferentPeer(ptx, nodeid)};\n+\n+        // Find the first 1p1c that hasn't already been rejected. We randomize the order to not\n+        // create a bias that attackers can use to delay package acceptance.\n+        //\n+        // Create a random permutation of the indices.\n+        std::vector<size_t> tx_indices(cpfp_candidates_different_peer.size());\n+        std::iota(tx_indices.begin(), tx_indices.end(), 0);\n+        Shuffle(tx_indices.begin(), tx_indices.end(), m_rng);\n+\n+        for (const auto index : tx_indices) {\n+            // If we already tried a package and failed for any reason, the combined hash was\n+            // cached in m_recent_rejects_reconsiderable.\n+            Package maybe_cpfp_package{ptx, cpfp_candidates_different_peer.at(index).first};\n+            if (!m_recent_rejects_reconsiderable.contains(GetPackageHash(maybe_cpfp_package))) {\n+                tx_orphan = cpfp_candidates_different_peer.at(index).first;\n+                orphan_sender = cpfp_candidates_different_peer.at(index).second;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (tx_orphan) {\n+        const Package package_1p1c{ptx, tx_orphan};\n+        const std::vector<NodeId> senders{nodeid, orphan_sender};\n+        const auto package_result{ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_1p1c, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt)};\n+        LogDebug(BCLog::TXPACKAGES, \"package evaluation for parent %s (wtxid=%s) + child %s (wtxid=%s) in orphanage: %s\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577947487",
      "id" : 1577947487,
      "in_reply_to_id" : 1576164670,
      "line" : 3335,
      "node_id" : "PRRC_kwDOABII585eDZFf",
      "original_commit_id" : "bb3bf0a39c036fbd94b99ed7002db7d9bdf0a1d6",
      "original_line" : 3335,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 255,
      "pull_request_review_id" : 2019970056,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577947487/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-24T14:00:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577947487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577949702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577949702"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a similar test",
      "commit_id" : "30c9e6bc4e9f8b8b606e55435dc3f743cb2dd670",
      "created_at" : "2024-04-24T14:01:45Z",
      "diff_hunk" : "@@ -0,0 +1,348 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+import time\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    @cleanup\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    @cleanup\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        # This feerate is above mempoolminfee, but not enough to also bump the low feerate parent.\n+        feerate_just_above = node.getmempoolinfo()[\"mempoolminfee\"]\n+        med_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=feerate_just_above)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(med_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(med_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert med_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_orphan_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        bad_orphan_sender = node.add_p2p_connection(P2PInterface())\n+        parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        bad_orphan_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        bad_orphan_sender.wait_for_getdata([child_wtxid_int])\n+        bad_orphan_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        bad_orphan_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different peer relays the parent. Parent+Child are evaluated as a package and rejected.\n+        parent_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] not in node_mempool\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\n+\n+        # 5. Peer that sent a consensus-invalid transaction should be disconnected.\n+        bad_orphan_sender.wait_for_disconnect()\n+\n+        # The peer that didn't provide the orphan should not be disconnected.\n+        parent_sender.sync_with_ping()\n+\n+    @cleanup\n+    def test_parent_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        # Create invalid version of parent with a bad signature.\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        package_sender = node.add_p2p_connection(P2PInterface())\n+        fake_parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        package_sender.wait_for_getdata([child_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\n+        package_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different node relays the parent. The parent is first evaluated by itself and\n+        # rejected for being too low feerate. Then it is evaluated as a package and, after passing\n+        # feerate checks, rejected for having a bad signature (consensus error).\n+        fake_parent_sender.send_message(msg_tx(tx_parent_bad_wit))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\n+        assert high_fee_child[\"txid\"] not in node_mempool\n+\n+        # 5. Peer sent a consensus-invalid transaction.\n+        fake_parent_sender.wait_for_disconnect()\n+\n+        self.log.info(\"Check that fake parent does not cause orphan to be deleted and real package can still be submitted\")\n+        # 6. Child-sending should not have been punished and the orphan should remain in orphanage.\n+        # It can send the \"real\" parent transaction, and the package is accepted.\n+        package_sender.sync_with_ping()\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_multiple_parents(self):\n+        self.log.info(\"Check that node does not request more than 1 previously-rejected low feerate parent\")\n+\n+        node = self.nodes[0]\n+        node.setmocktime(int(time.time()))\n+\n+        # 2-parent-1-child package where both parents are below mempool min feerate\n+        parent_low_1 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        parent_low_2 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        child_bumping = self.wallet_nonsegwit.create_self_transfer_multi(\n+            utxos_to_spend=[parent_low_1[\"new_utxo\"], parent_low_2[\"new_utxo\"]],\n+            fee_per_output=999*parent_low_1[\"tx\"].get_vsize(),\n+        )\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Send both parents. Each should be rejected for being too low feerate.\n+        # Send unsolicited so that we can later check that no \"getdata\" was ever received.\n+        peer_sender.send_and_ping(msg_tx(parent_low_1[\"tx\"]))\n+        peer_sender.send_and_ping(msg_tx(parent_low_2[\"tx\"]))\n+\n+        # parent_low_1 and parent_low_2 are rejected for being low feerate.\n+        assert parent_low_1[\"txid\"] not in node.getrawmempool()\n+        assert parent_low_2[\"txid\"] not in node.getrawmempool()\n+\n+        # 2. Send child.\n+        peer_sender.send_and_ping(msg_tx(child_bumping[\"tx\"]))\n+\n+        # 3. Node should not request any parents, as it should recognize that it will not accept\n+        # multi-parent-1-child packages.\n+        node.bumpmocktime(60)\n+        peer_sender.sync_with_ping()\n+        assert \"getdata\" not in peer_sender.last_message\n+\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577949702",
      "id" : 1577949702,
      "in_reply_to_id" : 1576479584,
      "line" : 360,
      "node_id" : "PRRC_kwDOABII585eDZoG",
      "original_commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "original_line" : 360,
      "original_position" : 317,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : 360,
      "pull_request_review_id" : 2019973872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577949702/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-24T14:01:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577949702",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577950806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577950806"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added ",
      "commit_id" : "30c9e6bc4e9f8b8b606e55435dc3f743cb2dd670",
      "created_at" : "2024-04-24T14:02:24Z",
      "diff_hunk" : "@@ -0,0 +1,348 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test opportunistic 1p1c package submission logic.\n+\"\"\"\n+\n+from decimal import Decimal\n+import time\n+from test_framework.messages import (\n+    CInv,\n+    CTxInWitness,\n+    MSG_WTX,\n+    msg_inv,\n+    msg_tx,\n+    tx_from_hex,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self, *args, **kwargs):\n+        try:\n+            func(self, *args, **kwargs)\n+        finally:\n+            self.nodes[0].disconnect_p2ps()\n+            # Do not clear the node's mempool, as each test requires mempool min feerate > min\n+            # relay feerate. However, do check that this is the case.\n+            assert self.nodes[0].getmempoolinfo()[\"mempoolminfee\"] > self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            # Ensure we do not try to spend the same UTXOs in subsequent tests, as they will look like RBF attempts.\n+            self.wallet.rescan_utxos(include_mempool=True)\n+    return wrapper\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+        self.supports_cli = False\n+\n+    @cleanup\n+    def test_basic_child_then_parent(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that opportunistic 1p1c logic works when child is received before parent\")\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first (perhaps the low feerate parent didn't meet feefilter or the requests were sent to different nodes). It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Sender relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+        node.disconnect_p2ps()\n+\n+    @cleanup\n+    def test_basic_parent_then_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=20*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=2, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Parent is relayed first. It is too low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Child is relayed next. It is missing an input.\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the missing parent by txid.\n+        # It should do so even if it has previously rejected that parent for being too low feerate.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. Sender re-relays the parent. Parent+Child are evaluated as a package and accepted.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Both transactions should now be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_low_and_high_child(self, wallet):\n+        node = self.nodes[0]\n+        low_fee_parent = wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        # This feerate is above mempoolminfee, but not enough to also bump the low feerate parent.\n+        feerate_just_above = node.getmempoolinfo()[\"mempoolminfee\"]\n+        med_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=feerate_just_above)\n+        high_fee_child = wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer_ignored = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        self.log.info(\"Check that tx caches low fee parent + low fee child package rejections\")\n+\n+        # 1. Send parent, rejected for being low feerate.\n+        parent_wtxid_int = int(low_fee_parent[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        peer_sender.wait_for_getdata([parent_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+\n+        # Send again from peer_ignored, check that it is ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=parent_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+\n+        # 2. Send an (orphan) child that has a higher feerate, but not enough to bump the parent.\n+        low_child_wtxid_int = int(med_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([low_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(med_fee_child[\"tx\"]))\n+\n+        # 3. Node requests the orphan's missing parent.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 4. The low parent + low child are submitted as a package. They are not accepted due to low package feerate.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        assert low_fee_parent[\"txid\"] not in node.getrawmempool()\n+        assert med_fee_child[\"txid\"] not in node.getrawmempool()\n+\n+        # If peer_ignored announces the low feerate child, it should be ignored\n+        peer_ignored.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_child_wtxid_int)]))\n+        assert \"getdata\" not in peer_ignored.last_message\n+        # If either peer sends the parent again, package evaluation should not be attempted\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+        peer_ignored.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 5. Send the high feerate (orphan) child\n+        high_child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        peer_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        peer_sender.wait_for_getdata([high_child_wtxid_int])\n+        peer_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 6. Node requests the orphan's parent, even though it has already been rejected, both by\n+        # itself and with a child. This is necessary, otherwise high_fee_child can be censored.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        peer_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 7. The low feerate parent + high feerate child are submitted as a package.\n+        peer_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 8. Both transactions should now be in mempool\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_orphan_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid orphan causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        coin = low_fee_parent[\"new_utxo\"]\n+        address = node.get_deterministic_priv_key().address\n+        # Create raw transaction spending the parent, but with no signature (a consensus error).\n+        hex_orphan_no_sig = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": coin[\"vout\"]}], {address : coin[\"value\"] - Decimal(\"0.0001\")})\n+        tx_orphan_bad_wit = tx_from_hex(hex_orphan_no_sig)\n+        tx_orphan_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_orphan_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        bad_orphan_sender = node.add_p2p_connection(P2PInterface())\n+        parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(tx_orphan_bad_wit.getwtxid(), 16)\n+        bad_orphan_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        bad_orphan_sender.wait_for_getdata([child_wtxid_int])\n+        bad_orphan_sender.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(low_fee_parent[\"txid\"], 16)\n+        bad_orphan_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different peer relays the parent. Parent+Child are evaluated as a package and rejected.\n+        parent_sender.send_message(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] not in node_mempool\n+        assert tx_orphan_bad_wit.rehash() not in node_mempool\n+\n+        # 5. Peer that sent a consensus-invalid transaction should be disconnected.\n+        bad_orphan_sender.wait_for_disconnect()\n+\n+        # The peer that didn't provide the orphan should not be disconnected.\n+        parent_sender.sync_with_ping()\n+\n+    @cleanup\n+    def test_parent_consensus_failure(self):\n+        self.log.info(\"Check opportunistic 1p1c logic with consensus-invalid parent causes disconnect of the correct peer\")\n+        node = self.nodes[0]\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=999*FEERATE_1SAT_VB)\n+\n+        # Create invalid version of parent with a bad signature.\n+        tx_parent_bad_wit = tx_from_hex(low_fee_parent[\"hex\"])\n+        tx_parent_bad_wit.wit.vtxinwit.append(CTxInWitness())\n+        tx_parent_bad_wit.wit.vtxinwit[0].scriptWitness.stack = [b'garbage']\n+\n+        package_sender = node.add_p2p_connection(P2PInterface())\n+        fake_parent_sender = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Child is received first. It is missing an input.\n+        child_wtxid_int = int(high_fee_child[\"tx\"].getwtxid(), 16)\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=child_wtxid_int)]))\n+        package_sender.wait_for_getdata([child_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(high_fee_child[\"tx\"]))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent_bad_wit.rehash(), 16)\n+        package_sender.wait_for_getdata([parent_txid_int])\n+\n+        # 3. A different node relays the parent. The parent is first evaluated by itself and\n+        # rejected for being too low feerate. Then it is evaluated as a package and, after passing\n+        # feerate checks, rejected for having a bad signature (consensus error).\n+        fake_parent_sender.send_message(msg_tx(tx_parent_bad_wit))\n+\n+        # 4. Transactions should not be in mempool.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent_bad_wit.rehash() not in node_mempool\n+        assert high_fee_child[\"txid\"] not in node_mempool\n+\n+        # 5. Peer sent a consensus-invalid transaction.\n+        fake_parent_sender.wait_for_disconnect()\n+\n+        self.log.info(\"Check that fake parent does not cause orphan to be deleted and real package can still be submitted\")\n+        # 6. Child-sending should not have been punished and the orphan should remain in orphanage.\n+        # It can send the \"real\" parent transaction, and the package is accepted.\n+        package_sender.sync_with_ping()\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        node_mempool = node.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_multiple_parents(self):\n+        self.log.info(\"Check that node does not request more than 1 previously-rejected low feerate parent\")\n+\n+        node = self.nodes[0]\n+        node.setmocktime(int(time.time()))\n+\n+        # 2-parent-1-child package where both parents are below mempool min feerate\n+        parent_low_1 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        parent_low_2 = self.wallet_nonsegwit.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        child_bumping = self.wallet_nonsegwit.create_self_transfer_multi(\n+            utxos_to_spend=[parent_low_1[\"new_utxo\"], parent_low_2[\"new_utxo\"]],\n+            fee_per_output=999*parent_low_1[\"tx\"].get_vsize(),\n+        )\n+\n+        peer_sender = node.add_outbound_p2p_connection(P2PInterface(), p2p_idx=4, connection_type=\"outbound-full-relay\")\n+\n+        # 1. Send both parents. Each should be rejected for being too low feerate.\n+        # Send unsolicited so that we can later check that no \"getdata\" was ever received.\n+        peer_sender.send_and_ping(msg_tx(parent_low_1[\"tx\"]))\n+        peer_sender.send_and_ping(msg_tx(parent_low_2[\"tx\"]))\n+\n+        # parent_low_1 and parent_low_2 are rejected for being low feerate.\n+        assert parent_low_1[\"txid\"] not in node.getrawmempool()\n+        assert parent_low_2[\"txid\"] not in node.getrawmempool()\n+\n+        # 2. Send child.\n+        peer_sender.send_and_ping(msg_tx(child_bumping[\"tx\"]))\n+\n+        # 3. Node should not request any parents, as it should recognize that it will not accept\n+        # multi-parent-1-child packages.\n+        node.bumpmocktime(60)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28970#discussion_r1577950806",
      "id" : 1577950806,
      "in_reply_to_id" : 1576365857,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eDZ5W",
      "original_commit_id" : "55b1280c52af81aa6ea0860799fa16da49f51447",
      "original_line" : 312,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "test/functional/p2p_opportunistic_1p1c.py",
      "position" : null,
      "pull_request_review_id" : 2019975582,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28970",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577950806/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-24T14:02:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1577950806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
