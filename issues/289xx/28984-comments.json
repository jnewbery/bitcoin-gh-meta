[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28984).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [murchandamus](https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1777863994), [glozow](https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1808799983) |\n| Stale ACK | [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2033245669) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29680](https://github.com/bitcoin/bitcoin/pull/29680) (wallet: fix unrelated parent conflict doesn't cause child tx to be marked as conflict by Eunovo)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n* [#29086](https://github.com/bitcoin/bitcoin/pull/29086) (refactor: Simply include CTxMemPool::Options in CTxMemPool directly rather than duplicating definition by luke-jr)\n* [#27432](https://github.com/bitcoin/bitcoin/pull/27432) (contrib: add tool to convert compact-serialized UTXO set to SQLite database by theStack)\n* [#26593](https://github.com/bitcoin/bitcoin/pull/26593) (tracing: Only prepare tracepoint arguments when actually tracing by 0xB10C)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-12-01T22:12:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1836848803",
      "id" : 1836848803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585tfBaj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1836848803/reactions"
      },
      "updated_at" : "2024-05-07T16:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1836848803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added this to the tracking issue",
      "created_at" : "2023-12-04T04:54:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1837840851",
      "id" : 1837840851,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585tiznT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837840851/reactions"
      },
      "updated_at" : "2023-12-04T04:54:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837840851",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1414385368"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414385368"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this can't be hit yet; post-v3 it can. I can remove this, or leave a note, or both. It makes some package rbfs more useful\r\n\r\n(edit: it's used in https://github.com/bitcoin/bitcoin/pull/29001 functional tests )",
      "commit_id" : "89beb714bb44e74ff785d3f0ae32684d737557de",
      "created_at" : "2023-12-04T19:26:16Z",
      "diff_hunk" : "@@ -181,3 +181,36 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : direct_conflicts) {\n+            const bool conflict_is_v3{entry->GetSharedTx()->nVersion == 3};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1414385368",
      "id" : 1414385368,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585UTc7Y",
      "original_commit_id" : "a6730af0678255d229eebf2cc31fcba9b35e1fd5",
      "original_line" : 194,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : null,
      "pull_request_review_id" : 1763228824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414385368/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-08T15:28:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414385368",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1415812593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415812593"
         }
      },
      "author_association" : "MEMBER",
      "body" : "commit message is old; will fix",
      "commit_id" : "be9d1634a9024e0b652cb77b89b856f25472fe68",
      "created_at" : "2023-12-05T15:28:27Z",
      "diff_hunk" : "@@ -228,6 +229,36 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n \n+    // Tests for CheckMinerScores\n+\n+    // These tests use modified fees (including prioritisation), not base fees.\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetFee() + entry6_low_prioritised->GetFee() + 1,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1415812593",
      "id" : 1415812593,
      "line" : 235,
      "node_id" : "PRRC_kwDOABII585UY5Xx",
      "original_commit_id" : "1996defeef0bb82cb51f6efe0ed0cb7092273f89",
      "original_line" : 235,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/test/rbf_tests.cpp",
      "position" : 129,
      "pull_request_review_id" : 1765400607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415812593/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-05T15:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415812593",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "So thinking conceptually about this, I'm most concerned by the new `CheckMinerScores()` criterion, where we only check the replacement package's feerate against the ancestor feerates of the indirect conflicts.\r\n\r\nI think there are two issues with this approach:\r\n1) If you look at `GetModFeesWithAncestors()/GetSizeWithAncestors()`, that can be greater than the transaction's individual feerate (ie if the parent of a transaction has a higher feerate than the child you're conflicting with). So this can cause the test to be too conservative and introduce some kind of weird pinning.  Granted, this is a new replacement functionality so maybe not the end of the world if it is sometimes too conservative, but it seems like a bug.\r\n\r\n2) Also if you look at the ancestor feerate of a transaction, that can underestimate its mining score, such as if some low feerate ancestor is being paid for by another transaction.  So that can allow for replacements that are not incentive compatible (similar to how this is possible today with our current single-transaction RBF rules).\r\n\r\nEven though the current RBF logic is broken already, I'd prefer to avoid adding on to that while rolling out the package RBF implementation, just so that users don't get used to some kinds of replacements working that really shouldn't be.\r\n\r\nSo I was wondering, can we deal with this by just restricting the topology of what we allow a package RBF to conflict with?  Let's say we allow a replacement if the conflict set consists of either (1) a single transaction with no ancestors (and of course no descendants, since any descendants would be in the conflict set as well), or (2) two transactions that are in a parent-child topology, and that have no other in-mempool ancestors (or descendants, of course).\r\n\r\nIn those situations, the maximum miner score you would have to consider is either the individual feerate of the parent tx or the ancestor feerate of the child, so the new logic should work perfectly.",
      "created_at" : "2023-12-08T16:12:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1847460679",
      "id" : 1847460679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585uHgNH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847460679/reactions"
      },
      "updated_at" : "2023-12-08T16:12:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847460679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "After offline discussion with @sdaftuar , I've worked on a set of prospective changes and pushed them to this branch as follow-on commits.\r\n\r\nKey change is that we will now only allow package RBF when the conflicted transactions are all in \"clusters\" of up to size 2. This allows us to calculate mining scores for each conflicted transaction, which means that post-cluster mempool, if we did this right, IIUC, the behavior should match with more general package RBF.",
      "created_at" : "2023-12-08T21:48:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1847884788",
      "id" : 1847884788,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585uJHv0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847884788/reactions"
      },
      "updated_at" : "2023-12-08T21:48:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847884788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sdaftuar should be ready for another look",
      "created_at" : "2023-12-11T20:06:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1850801317",
      "id" : 1850801317,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585uUPyl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850801317/reactions"
      },
      "updated_at" : "2023-12-11T20:06:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850801317",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1423084047"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423084047"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should this be \"> 2\"?  ",
      "commit_id" : "89beb714bb44e74ff785d3f0ae32684d737557de",
      "created_at" : "2023-12-11T20:23:38Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1423084047",
      "id" : 1423084047,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U0ooP",
      "original_commit_id" : "557da6c9027d676871fc03e55efcfbc0a7a42adb",
      "original_line" : 196,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : null,
      "pull_request_review_id" : 1776101239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423084047/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T20:24:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423084047",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1423098019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423098019"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have a failing unit test for this :facepalm: \r\n\r\npushed fix",
      "commit_id" : "89beb714bb44e74ff785d3f0ae32684d737557de",
      "created_at" : "2023-12-11T20:36:54Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1423098019",
      "id" : 1423098019,
      "in_reply_to_id" : 1423084047,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U0sCj",
      "original_commit_id" : "557da6c9027d676871fc03e55efcfbc0a7a42adb",
      "original_line" : 196,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : null,
      "pull_request_review_id" : 1776123407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423098019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-11T20:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423098019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> size-2 package rbf can have 6 types of conflicts:\r\n> \r\n> 1. parent conflicts with solo\r\n> 2. parent conflicts with child\r\n> 3. parent conflicts with parent\r\n> 4. child conflicts with parent\r\n> 5. child conflicts with solo\r\n> 6. child conflicts with child\r\n\r\nI think if you state it this way, then there are more cases to write out (but they all simplify down to the same thing) -- the parent transaction in the incoming package can directly conflict with {solo tx, child tx, parent tx, both child tx and parent tx}, and so can the child transaction in the package (ie it can also conflict with a solo tx, child tx, parent tx, and both), and you can have both of those going on at the same time, AND we permit the incoming package to conflict with up to 100 such in-mempool transactions that satisfy this \"cluster-size-2\" restriction.\r\n\r\nSo the way I'd try to describe this PR is that an incoming package with in-mempool conflicts must satisfy these RBF policy rules:\r\n1) Every direct conflict is connected to at most 1 other in-mempool transaction (ie the cluster size of the conflict is at most 2).\r\n2) The package consists of a (parent, child) pair with no other in-mempool ancestors (or descendants, obviously) (so it is also going to create a cluster of size 2)\r\n3) The package's child tx has greater feerate than the parent tx\r\n4) The total fee of the package, minus the total fee of what is being evicted, is at least the minrelayfee * size of the package\r\n5) The package feerate (total package fee / total package vsize) must exceed the min(individual feerate, ancestor feerate) of every transaction that would be evicted (direct and indirect conflicts).  For transactions in a cluster of size <= 2, min(feerate, ancestor feerate) exactly captures the mining score of a transaction.\r\n\r\nDid I miss anything?",
      "created_at" : "2023-12-12T13:12:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1852009874",
      "id" : 1852009874,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585uY22S",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852009874/reactions"
      },
      "updated_at" : "2023-12-12T13:12:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852009874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sdaftuar I took your suggestions, reordered and slightly reworded. Matches my implementation.",
      "created_at" : "2023-12-12T14:19:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1852127685",
      "id" : 1852127685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585uZTnF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852127685/reactions"
      },
      "updated_at" : "2023-12-12T14:19:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852127685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424077858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424077858"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there a reason to drop the `txns.size() > 1` test in this `if` clause?",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-12T14:31:23Z",
      "diff_hunk" : "@@ -1332,11 +1347,8 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n-    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n-    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n-    // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n-    std::string err_string;\n-    if (txns.size() > 1 && !PackageMempoolChecks(txns, m_total_vsize, package_state)) {\n+    // Apply package mempool ancestor/descendant limits.\n+    if (!PackageMempoolChecks(txns, m_total_vsize, package_state)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424077858",
      "id" : 1424077858,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U4bQi",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 1351,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1777611474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424077858/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T19:34:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424077858",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424084885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424084885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I found the \"not\" in this comment confusing.",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-12T14:36:16Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424084885",
      "id" : 1424084885,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII585U4c-V",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 58,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 4,
      "pull_request_review_id" : 1777611474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424084885/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T19:34:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424084885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424218735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424218735"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Did you mean _replacEable_?",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-12T15:54:55Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions\n+        replacable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replacable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replacable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replacable_tx[\"hex\"])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424218735",
      "id" : 1424218735,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII585U49pv",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 67,
      "original_position" : 14,
      "original_start_line" : 59,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 14,
      "pull_request_review_id" : 1777863994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424218735/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 59,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-12-28T21:50:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424218735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424358331"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424358331"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps a comment here would be helpful to explain why this change is needed.",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-12T17:38:57Z",
      "diff_hunk" : "@@ -972,7 +994,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n-    m_rbf = !ws.m_conflicts.empty();\n+    m_rbf |= !ws.m_conflicts.empty();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424358331",
      "id" : 1424358331,
      "line" : 1002,
      "node_id" : "PRRC_kwDOABII585U5fu7",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 997,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 203,
      "pull_request_review_id" : 1777611474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424358331/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T19:34:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424358331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424392025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424392025"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I was trying to figure out exactly why this code is safe in a package RBF context. I think for a generalized package RBF, this would not be safe, because we do not verify that a child transaction in an incoming package (say) isn't spending a coin in the mempool that would be conflicted by some other transaction in the package.\r\n\r\nHowever, in this particular case, we are enforcing in `PackageMempoolChecks()` (further down) that the incoming package has **no** other in-mempool ancestors (ie the new package is a cluster of size 2), and so I think that condition is what precludes the scenario I'm concerned about above.  (Specifically: if, say, we allowed the incoming package to have 1 in-mempool ancestor A, then it's possible that a package could consist of transactions (P, C) such that P spent one of A's outputs, while transaction C conflicted with A, which I don't think would be caught anywhere right now.)\r\n\r\nIf my understanding here is correct, I think it'd be worth updating the comment to explain this a bit more (and perhaps we could add a test that covers the scenario I described).",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-12T18:01:10Z",
      "diff_hunk" : "@@ -1337,11 +1423,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_rbf);\n+        // package to spend. Since we already checked conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424392025",
      "id" : 1424392025,
      "line" : 1429,
      "node_id" : "PRRC_kwDOABII585U5n9Z",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 1429,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 435,
      "pull_request_review_id" : 1777611474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424392025/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T19:34:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424392025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424495073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424495073"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's essentially an existing no-op. IIRC `AcceptMultipleTransactions` is only called in *unit tests* with size 1, otherwise it's always > 1. (maybe I should just kill those tests and `Assume()`?",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-12T19:40:46Z",
      "diff_hunk" : "@@ -1332,11 +1347,8 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n-    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n-    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n-    // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n-    std::string err_string;\n-    if (txns.size() > 1 && !PackageMempoolChecks(txns, m_total_vsize, package_state)) {\n+    // Apply package mempool ancestor/descendant limits.\n+    if (!PackageMempoolChecks(txns, m_total_vsize, package_state)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424495073",
      "id" : 1424495073,
      "in_reply_to_id" : 1424077858,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585U6BHh",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 1351,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1778311406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424495073/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T19:41:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424495073",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424551588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424551588"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Pushed a functional test covering this case specifically which is rejected due to existence of mempool ancestors.\r\n\r\nI'll try and rephrase soon.",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-12T20:41:09Z",
      "diff_hunk" : "@@ -1337,11 +1423,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_rbf);\n+        // package to spend. Since we already checked conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424551588",
      "id" : 1424551588,
      "in_reply_to_id" : 1424392025,
      "line" : 1429,
      "node_id" : "PRRC_kwDOABII585U6O6k",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 1429,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 435,
      "pull_request_review_id" : 1778401060,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424551588/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-12T20:41:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424551588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425282679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425282679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 671de055c8b3ff48b16b93d8389b80fead6342ac\r\nCommit title indicate \" [doc] cpfp carveout is excluded in packages \"\r\n\r\nBut the diff is not a only a doc change.",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-13T12:24:42Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425282679",
      "id" : 1425282679,
      "line" : 48,
      "node_id" : "PRRC_kwDOABII585U9BZ3",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 48,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 1,
      "pull_request_review_id" : 1779525637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425282679/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-30T13:30:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425282679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I thought of a couple issues with the current version of the PR that I wanted to summarize (longer form [here](https://delvingbitcoin.org/t/cluster-mempool-rbf-thoughts/156/23?u=sdaftuar)):\r\n\r\n1. The mempool might not be made \"strictly better\", in the sense that there are more fees available for every size of transactions selected, using the RBF criteria in this PR.  (I'm trying to figure out if there are any simple heuristics we can apply to resolve this issue.)\r\n\r\n2. It occurred to me that users might run into a problem if they submit a package (A, B), where B has in-mempool conflicts and A does not, if A would relay fine on its own.  Consider this scenario:\r\n   -  node receives package (A, B), either via submitpackage or a future package-relay protocol\r\n   - node applies the package RBF rules here and accepts the package \r\n   - node announces transactions A and B to peers \r\n   - a peer downloads the transactions separately\r\n   - the peer validates tx A, and it makes it into the mempool on its own (perhaps it itself had no conflicts and satisfied min fee requirements)\r\n   - the peer validates tx B and rejects it, because under single-tx-rbf rules, B is an invalid replacement (it has a new unconfirmed input compared with what it conflicts with, namely tx A)\r\n\r\nIt seems to me that the only solution for issue 2 would be to somehow ensure that tx A would not be eligible for relay on its own.  Are there any better ideas?",
      "created_at" : "2023-12-13T13:14:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1853897416",
      "id" : 1853897416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585ugDrI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853897416/reactions"
      },
      "updated_at" : "2023-12-13T13:14:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853897416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425551039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425551039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f\r\n```cpp\r\n#include <algorithm>\r\n```\r\n",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-13T15:50:08Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425551039",
      "id" : 1425551039,
      "line" : 184,
      "node_id" : "PRRC_kwDOABII585U-C6_",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 184,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 4,
      "pull_request_review_id" : 1779525637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425551039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-30T13:30:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425551039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425583249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425583249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be nice if this commit to be split into two,  RBF utility functions and test in one commit and package rbf validation in another?",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-13T16:13:46Z",
      "diff_hunk" : "@@ -507,7 +507,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425583249",
      "id" : 1425583249,
      "line" : 507,
      "node_id" : "PRRC_kwDOABII585U-KyR",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 507,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 1779525637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425583249/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-30T13:30:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425583249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I responded here: https://delvingbitcoin.org/t/cluster-mempool-rbf-thoughts/156/24?u=instagibbs \r\n\r\nissue 1: awaiting further details on potential diagram check integration vs suggested heuristic I gave (currently reviewing this work)\r\nissue 2: known issue, wallet authors shouldn't do that until cluster mempool fixes that (don't cross-sponsor)",
      "created_at" : "2023-12-14T14:18:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1855935981",
      "id" : 1855935981,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585un1Xt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1855935981/reactions"
      },
      "updated_at" : "2023-12-20T20:20:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1855935981",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1428378451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428378451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "too many zeroes on this, it's a 1/10 of a sat",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-15T19:07:51Z",
      "diff_hunk" : "@@ -0,0 +1,590 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.000000001\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1428378451",
      "id" : 1428378451,
      "line" : 183,
      "node_id" : "PRRC_kwDOABII585VI1NT",
      "original_commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "original_line" : 183,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 183,
      "pull_request_review_id" : 1784767020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428378451/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-15T19:07:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428378451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1428379004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428379004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "too many zeroes on this, it's a 1/10 of a sat",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-15T19:08:27Z",
      "diff_hunk" : "@@ -0,0 +1,590 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.000000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient anti-DoS fees')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.000000001\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1428379004",
      "id" : 1428379004,
      "line" : 198,
      "node_id" : "PRRC_kwDOABII585VI1V8",
      "original_commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "original_line" : 198,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 198,
      "pull_request_review_id" : 1784767711,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428379004/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-15T19:08:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428379004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1437884761"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1437884761"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Shouldnât this be greater or equal to _exceed_ the original?\r\n\r\n> 6. The package feerate (total package fee / total package vsize) must exceed the min(individual feerate, ancestor feerate) of every transaction that would be evicted (direct and indirect conflicts).",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2023-12-28T21:17:33Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : original_transactions) {\n+            CFeeRate original_miner_score(entry->GetModFeesWithAncestors(), entry->GetSizeWithAncestors());\n+            original_miner_score = std::min(original_miner_score, CFeeRate(entry->GetModifiedFee(), entry->GetTxSize()));\n+            if (replacement_miner_score < original_miner_score) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1437884761",
      "id" : 1437884761,
      "line" : 227,
      "node_id" : "PRRC_kwDOABII585VtGFZ",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 227,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 47,
      "pull_request_review_id" : 1777863994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1437884761/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-12-28T21:50:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1437884761",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/murchandamus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/murchandamus/followers",
         "following_url" : "https://api.github.com/users/murchandamus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/murchandamus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/murchandamus",
         "id" : 4060799,
         "login" : "murchandamus",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/murchandamus/orgs",
         "received_events_url" : "https://api.github.com/users/murchandamus/received_events",
         "repos_url" : "https://api.github.com/users/murchandamus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/murchandamus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/murchandamus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/murchandamus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Considering an alternative branch with fee diagram checks instead of heuristic here: https://github.com/instagibbs/bitcoin/commits/feefrac_package_rbf\r\n\r\n",
      "created_at" : "2024-01-05T18:59:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1879129804",
      "id" : 1879129804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585wAT7M",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879129804/reactions"
      },
      "updated_at" : "2024-01-05T18:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879129804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1443276867"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443276867"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Probably yeah, tests should catch this case regardless. Will add one after deciding what way to go with heuristic vs diagram check",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-05T19:03:19Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : original_transactions) {\n+            CFeeRate original_miner_score(entry->GetModFeesWithAncestors(), entry->GetSizeWithAncestors());\n+            original_miner_score = std::min(original_miner_score, CFeeRate(entry->GetModifiedFee(), entry->GetTxSize()));\n+            if (replacement_miner_score < original_miner_score) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1443276867",
      "id" : 1443276867,
      "in_reply_to_id" : 1437884761,
      "line" : 227,
      "node_id" : "PRRC_kwDOABII585WBqhD",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 227,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 47,
      "pull_request_review_id" : 1806682742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443276867/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-05T19:03:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443276867",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444457214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444457214"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add \"Each entry must be part of a cluster with size <=2.\"",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T11:04:46Z",
      "diff_hunk" : "@@ -106,4 +106,18 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/** Ensure we are only attempting RBF against connected components we can easily\n+ * compute mining scores from.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444457214",
      "id" : 1444457214,
      "line" : 110,
      "node_id" : "PRRC_kwDOABII585WGKr-",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 110,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/policy/rbf.h",
      "position" : 5,
      "pull_request_review_id" : 1808799983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444457214/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T12:35:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444457214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444482970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444482970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks correct. If you're willing to entertain a suggestion to make it more readable, I think the following logic is easier to follow and the strings less ambiguous. Since \"desc count' and \"anc count\" usually mean inclusive of tx, it's confusing if it's different in this function.\r\n\r\n```suggestion\r\n        // Ancestor and descendant counts are inclusive of the tx itself.\r\n        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\r\n        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\r\n        const bool has_ancestor{ancestor_count > 1};\r\n        const bool has_descendant{descendant_count > 1};\r\n\r\n        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\r\n\r\n        // The only allowed configurations are:\r\n        // 1 ancestor and 0 descendant\r\n        // 0 ancestor and 1 descendant\r\n        // 0 ancestor and 0 descendant\r\n        if (ancestor_count > 2) {\r\n            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string\", txid_string);\r\n        } else if (descendant_count > 2) {\r\n            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string\", txid_string);\r\n        } else if (has_ancestor && has_descendant) {\r\n            return strprintf(\"%s has both ancestor and descendant\", txid_string);\r\n        }\r\n\r\n        // Additionally enforce that:\r\n        // If we have a parent, we are its only child.\r\n        // If we have a child,  we are its only parent.\r\n        if (has_descendant) {\r\n            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\r\n            if (our_child->get().GetCountWithAncestors() > 2) {\r\n                return strprintf(\"%s is not the only parent of child %s\",\r\n                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\r\n            }\r\n        } else if (has_ancestor) {\r\n            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\r\n            if (our_parent->get().GetCountWithDescendants() > 2) {\r\n                return strprintf(\"%s is not the only child of parent %s\",\r\n                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\r\n            }\r\n        }\r\n```",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T11:32:16Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444482970",
      "id" : 1444482970,
      "line" : 212,
      "node_id" : "PRRC_kwDOABII585WGQ-a",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 212,
      "original_position" : 32,
      "original_start_line" : 188,
      "path" : "src/policy/rbf.cpp",
      "position" : 32,
      "pull_request_review_id" : 1808799983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444482970/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 188,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-08T12:35:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444482970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444492292"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444492292"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: good place to use annotations to double-check we're passing in the right fees:\r\n```suggestion\r\n    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\r\n                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\r\n```",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T11:42:16Z",
      "diff_hunk" : "@@ -1067,7 +1072,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate child_feerate(child_ws.m_modified_fees, child_ws.m_vsize);\n+    if (parent_feerate >= child_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if direct conflicts are all members of a up to size 2 cluster\n+    if (const auto err_string{CheckConflictTopology(direct_conflict_iters)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: unable to compute mining score\", *err_string);\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_string{CheckMinerScores(m_total_modified_fees, m_total_vsize,\n+                                               m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient feerate\", *err_string);\n+    }\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(m_conflicting_fees, m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444492292",
      "id" : 1444492292,
      "line" : 1144,
      "node_id" : "PRRC_kwDOABII585WGTQE",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 1144,
      "original_position" : 145,
      "original_start_line" : 1143,
      "path" : "src/validation.cpp",
      "position" : 336,
      "pull_request_review_id" : 1808799983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444492292/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1143,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-08T12:35:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444492292",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444495751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444495751"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add a test case for `CheckConflictTopology` where our 1 parent has 2 children, or our 1 child has 2 parents",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T11:45:54Z",
      "diff_hunk" : "@@ -228,6 +242,62 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n \n+    // Tests for CheckMinerScores\n+\n+    // Check non-modified package fee vs modified in-mempool which is used internally\n+    BOOST_CHECK(entry6_low_prioritised->GetFee() < entry6_low_prioritised->GetModifiedFee());\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetFee() + entry6_low_prioritised->GetFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low).has_value());\n+\n+    // Now modified vs modified\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetModifiedFee() + entry6_low_prioritised->GetModifiedFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low) == std::nullopt);\n+\n+\n+    // Replacement must be higher than the the feerate and ancestor feerates of replaced (same value here)\n+    BOOST_CHECK(CheckMinerScores(entry1_normal->GetFee() - 1,\n+                                 entry1_normal->GetTxSize(),\n+                                 set_12_normal).has_value());\n+\n+    // Note entry4_high's individual feerate is higher than its ancestor feerate (since it's a CPFP tx)\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 {entry4_high}) == std::nullopt);\n+\n+    // It's also higher than the scores of both transactions\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 set_34_cpfp) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444495751",
      "id" : 1444495751,
      "line" : 285,
      "node_id" : "PRRC_kwDOABII585WGUGH",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 285,
      "original_position" : 95,
      "original_start_line" : null,
      "path" : "src/test/rbf_tests.cpp",
      "position" : 195,
      "pull_request_review_id" : 1808799983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444495751/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T12:35:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444495751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444505904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444505904"
         }
      },
      "author_association" : "MEMBER",
      "body" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0\r\n\r\nWe copy this list into every transaction's `MempoolAcceptResult` (which does makes sense since both the parent and the child participated in the replacement of these txns - that's probably helpful for showing package RBFs in the RPC results). But the duplicates are a problem when we add to `vExtraTxnForCompact` in p2p:\r\nhttps://github.com/bitcoin/bitcoin/blob/04b9df0f9fd95e907b2e8bf823d63e9dfb37b4ad/src/net_processing.cpp#L4254-L4256\r\n\r\nPossible solutions:\r\n- Only add `m_replaced_transactions` to the last result in the `SubmitPackage` loop (along the lines of \"the child is the true 'replacer' of all these txns\"). I think this is fine since this var is per-subpackage.\r\n- Add logic to net_processing to deal with duplicates. Probably the most robust solution, and allows us to keep the lists per tx in the RPC results.\r\n- Add a new field to `PackageMempoolAcceptResult` and don't populate the `MempoolAcceptResult`s when there is a pcakage RBF (ehhh kind of ugly).",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T11:56:51Z",
      "diff_hunk" : "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444505904",
      "id" : 1444505904,
      "line" : 1478,
      "node_id" : "PRRC_kwDOABII585WGWkw",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1393,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 470,
      "pull_request_review_id" : 1808799983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444505904/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T12:35:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444505904",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444555154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444555154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just realized this log is pretty nonsensical for package RBF, and also whenever there are multiple transactions being replaced in by a single one.\r\n\r\nMaybe this log should be:\r\n```\r\n        LogPrint(BCLog::MEMPOOL, \"replacing mempool tx %s (wtxid=%s, fees=%s, vsize=%s). New tx %s (wtxid=%s, fees=%s, vsize=%s)\\n\",\r\n                it->GetTx().GetHash().ToString(),\r\n                it->GetTx().GetWitnessHash().ToString(),\r\n                it->GetFee(),\r\n                it->GetTxSize(),\r\n                hash.ToString(),\r\n                tx.GetWitnessHash().ToString(),\r\n                entry->GetFee(),\r\n                entry->GetTxSize());\r\n```\r\n\r\nAnd we should add a replacement summary log at the end of `SubmitPackage` and `AcceptSingleTransaction`:\r\n```\r\n    if (!m_replaced_transactions.empty()) {\r\n        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with %u new one(s) for %s additional fees, %d delta bytes\\n\",\r\n                 workspaces.size(), m_replaced_transactions.size(),\r\n                 m_total_modified_fees - m_conflicting_fees,\r\n                 m_total_vsize - m_conflicting_size);\r\n    }\r\n```\r\n\r\n```\r\n    if (!m_replaced_transactions.empty()) {\r\n        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",\r\n                 m_replaced_transactions.size(),\r\n                 m_total_modified_fees - m_conflicting_fees,\r\n                 m_total_vsize - m_conflicting_size);\r\n    }\r\n```",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T12:33:59Z",
      "diff_hunk" : "@@ -1116,19 +1139,18 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n     TxValidationState& state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n-\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n-    for (CTxMemPool::txiter it : ws.m_all_conflicting)\n+    for (CTxMemPool::txiter it : m_all_conflicts)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s (wtxid=%s) with %s (wtxid=%s) for %s additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 it->GetTx().GetWitnessHash().ToString(),\n                 hash.ToString(),\n                 tx.GetWitnessHash().ToString(),\n-                FormatMoney(ws.m_modified_fees - ws.m_conflicting_fees),\n-                (int)entry->GetTxSize() - (int)ws.m_conflicting_size);\n+                FormatMoney(ws.m_modified_fees - m_conflicting_fees),\n+                (int)entry->GetTxSize() - (int)m_conflicting_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444555154",
      "id" : 1444555154,
      "line" : 1233,
      "node_id" : "PRRC_kwDOABII585WGimS",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1153,
      "original_position" : 130,
      "original_start_line" : 1152,
      "path" : "src/validation.cpp",
      "position" : 365,
      "pull_request_review_id" : 1808799983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444555154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1232,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-08T12:35:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444555154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444669440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444669440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "dealing with duplicates seems strictly superior, will take a look, thanks!",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T13:47:43Z",
      "diff_hunk" : "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444669440",
      "id" : 1444669440,
      "in_reply_to_id" : 1444505904,
      "line" : 1478,
      "node_id" : "PRRC_kwDOABII585WG-gA",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1393,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 470,
      "pull_request_review_id" : 1809143290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444669440/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T13:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444669440",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444673561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444673561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "the more work solutions would be to refactor everything to have a \"subpackage eval\" state, but juice is probably not worth the squeeze until cluster mempool, where \"chunk eval\" is likely the natural boundary",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-08T13:50:28Z",
      "diff_hunk" : "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444673561",
      "id" : 1444673561,
      "in_reply_to_id" : 1444505904,
      "line" : 1478,
      "node_id" : "PRRC_kwDOABII585WG_gZ",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1393,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 470,
      "pull_request_review_id" : 1809148837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444673561/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-08T13:50:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444673561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446006765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446006765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah I think a temporary `set<Wtxid>` within net processing is probably the easiest",
      "commit_id" : "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "created_at" : "2024-01-09T12:02:10Z",
      "diff_hunk" : "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446006765",
      "id" : 1446006765,
      "in_reply_to_id" : 1444505904,
      "line" : 1478,
      "node_id" : "PRRC_kwDOABII585WME_t",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1393,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 470,
      "pull_request_review_id" : 1811014239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446006765/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T12:02:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446006765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "pushed update with fee diagram checks instead of heuristics. @sipa please see https://github.com/bitcoin/bitcoin/pull/28984/commits/9dda95d58442e4884a57216472c991c62f87ef1f and similar\r\n\r\nAddressing other comments next.",
      "created_at" : "2024-01-09T16:30:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1883380383",
      "id" : 1883380383,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585wQhqf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883380383/reactions"
      },
      "updated_at" : "2024-01-09T16:30:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883380383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434642"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Pretty sure following section covers it, adding two descendants one by one to `tx10` and checking the resulting failure",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:04:51Z",
      "diff_hunk" : "@@ -228,6 +242,62 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n \n+    // Tests for CheckMinerScores\n+\n+    // Check non-modified package fee vs modified in-mempool which is used internally\n+    BOOST_CHECK(entry6_low_prioritised->GetFee() < entry6_low_prioritised->GetModifiedFee());\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetFee() + entry6_low_prioritised->GetFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low).has_value());\n+\n+    // Now modified vs modified\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetModifiedFee() + entry6_low_prioritised->GetModifiedFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low) == std::nullopt);\n+\n+\n+    // Replacement must be higher than the the feerate and ancestor feerates of replaced (same value here)\n+    BOOST_CHECK(CheckMinerScores(entry1_normal->GetFee() - 1,\n+                                 entry1_normal->GetTxSize(),\n+                                 set_12_normal).has_value());\n+\n+    // Note entry4_high's individual feerate is higher than its ancestor feerate (since it's a CPFP tx)\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 {entry4_high}) == std::nullopt);\n+\n+    // It's also higher than the scores of both transactions\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 set_34_cpfp) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434642",
      "id" : 1446434642,
      "in_reply_to_id" : 1444495751,
      "line" : 256,
      "node_id" : "PRRC_kwDOABII585WNtdS",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 256,
      "original_position" : 95,
      "original_start_line" : null,
      "path" : "src/test/rbf_tests.cpp",
      "position" : 166,
      "pull_request_review_id" : 1811719724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434642/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:04:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434675"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434675"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:04:54Z",
      "diff_hunk" : "@@ -1067,7 +1072,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate child_feerate(child_ws.m_modified_fees, child_ws.m_vsize);\n+    if (parent_feerate >= child_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if direct conflicts are all members of a up to size 2 cluster\n+    if (const auto err_string{CheckConflictTopology(direct_conflict_iters)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: unable to compute mining score\", *err_string);\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_string{CheckMinerScores(m_total_modified_fees, m_total_vsize,\n+                                               m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient feerate\", *err_string);\n+    }\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(m_conflicting_fees, m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434675",
      "id" : 1446434675,
      "in_reply_to_id" : 1444492292,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNtdz",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 1138,
      "original_position" : 145,
      "original_start_line" : 1143,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1811719805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434675/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:04:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "cleaner, thanks. will take(minus typos :) )",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:04:57Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434720",
      "id" : 1446434720,
      "in_reply_to_id" : 1444482970,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNteg",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 212,
      "original_position" : 32,
      "original_start_line" : 188,
      "path" : "src/policy/rbf.cpp",
      "position" : null,
      "pull_request_review_id" : 1811719880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434720/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:04:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this all got moved internal to mempool",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:02Z",
      "diff_hunk" : "@@ -106,4 +106,18 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/** Ensure we are only attempting RBF against connected components we can easily\n+ * compute mining scores from.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434808",
      "id" : 1446434808,
      "in_reply_to_id" : 1444457214,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNtf4",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 110,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/policy/rbf.h",
      "position" : null,
      "pull_request_review_id" : 1811720024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20309843311</sub>",
      "created_at" : "2024-01-09T18:05:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1883540090",
      "id" : 1883540090,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585wRIp6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883540090/reactions"
      },
      "updated_at" : "2024-01-09T18:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883540090",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "replaced entirely(I think?)",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:09Z",
      "diff_hunk" : "@@ -507,7 +507,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434903",
      "id" : 1446434903,
      "in_reply_to_id" : 1425583249,
      "line" : 507,
      "node_id" : "PRRC_kwDOABII585WNthX",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 507,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 1811720197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434903/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434933"
         }
      },
      "author_association" : "MEMBER",
      "body" : "replaced section of code entirely",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:11Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434933",
      "id" : 1446434933,
      "in_reply_to_id" : 1425551039,
      "line" : 184,
      "node_id" : "PRRC_kwDOABII585WNth1",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 184,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 4,
      "pull_request_review_id" : 1811720243,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434933/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434963"
         }
      },
      "author_association" : "MEMBER",
      "body" : "changed wording of commit",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:13Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434963",
      "id" : 1446434963,
      "in_reply_to_id" : 1425282679,
      "line" : 48,
      "node_id" : "PRRC_kwDOABII585WNtiT",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 48,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 1,
      "pull_request_review_id" : 1811720313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434963/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435012"
         }
      },
      "author_association" : "MEMBER",
      "body" : "replaced with diagram check; should be fine now since it must be strictly superior.",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:16Z",
      "diff_hunk" : "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : original_transactions) {\n+            CFeeRate original_miner_score(entry->GetModFeesWithAncestors(), entry->GetSizeWithAncestors());\n+            original_miner_score = std::min(original_miner_score, CFeeRate(entry->GetModifiedFee(), entry->GetTxSize()));\n+            if (replacement_miner_score < original_miner_score) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435012",
      "id" : 1446435012,
      "in_reply_to_id" : 1437884761,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNtjE",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 227,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : null,
      "pull_request_review_id" : 1811720385,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435012/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:19Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions\n+        replacable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replacable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replacable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replacable_tx[\"hex\"])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435046",
      "id" : 1446435046,
      "in_reply_to_id" : 1424218735,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNtjm",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 67,
      "original_position" : 14,
      "original_start_line" : 59,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : null,
      "pull_request_review_id" : 1811720475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435046/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "rephrased into the two cases",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:24Z",
      "diff_hunk" : "@@ -1337,11 +1423,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_rbf);\n+        // package to spend. Since we already checked conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435113",
      "id" : 1446435113,
      "in_reply_to_id" : 1424392025,
      "line" : 1423,
      "node_id" : "PRRC_kwDOABII585WNtkp",
      "original_commit_id" : "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "original_line" : 1423,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 429,
      "pull_request_review_id" : 1811720589,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435113/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:26Z",
      "diff_hunk" : "@@ -972,7 +994,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n-    m_rbf = !ws.m_conflicts.empty();\n+    m_rbf |= !ws.m_conflicts.empty();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435138",
      "id" : 1446435138,
      "in_reply_to_id" : 1424358331,
      "line" : 1003,
      "node_id" : "PRRC_kwDOABII585WNtlC",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1003,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 204,
      "pull_request_review_id" : 1811720638,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435138/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435204"
         }
      },
      "author_association" : "MEMBER",
      "body" : "reworded ",
      "commit_id" : "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at" : "2024-01-09T18:05:29Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435204",
      "id" : 1446435204,
      "in_reply_to_id" : 1424084885,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WNtmE",
      "original_commit_id" : "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "original_line" : 58,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : null,
      "pull_request_review_id" : 1811720738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435204/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T18:05:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446545360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545360"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "6bf242caae8e762f91b188b9711c53a22dc1d04a",
      "created_at" : "2024-01-09T20:05:24Z",
      "diff_hunk" : "@@ -1116,19 +1139,18 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n     TxValidationState& state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n-\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n-    for (CTxMemPool::txiter it : ws.m_all_conflicting)\n+    for (CTxMemPool::txiter it : m_all_conflicts)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s (wtxid=%s) with %s (wtxid=%s) for %s additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 it->GetTx().GetWitnessHash().ToString(),\n                 hash.ToString(),\n                 tx.GetWitnessHash().ToString(),\n-                FormatMoney(ws.m_modified_fees - ws.m_conflicting_fees),\n-                (int)entry->GetTxSize() - (int)ws.m_conflicting_size);\n+                FormatMoney(ws.m_modified_fees - m_conflicting_fees),\n+                (int)entry->GetTxSize() - (int)m_conflicting_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446545360",
      "id" : 1446545360,
      "in_reply_to_id" : 1444555154,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585WOIfQ",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1227,
      "original_position" : 130,
      "original_start_line" : 1152,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 1811900894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545360/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-01-09T20:05:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446545395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545395"
         }
      },
      "author_association" : "MEMBER",
      "body" : "left a comment for future work",
      "commit_id" : "6bf242caae8e762f91b188b9711c53a22dc1d04a",
      "created_at" : "2024-01-09T20:05:27Z",
      "diff_hunk" : "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446545395",
      "id" : 1446545395,
      "in_reply_to_id" : 1444505904,
      "line" : 1492,
      "node_id" : "PRRC_kwDOABII585WOIfz",
      "original_commit_id" : "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "original_line" : 1492,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 492,
      "pull_request_review_id" : 1811900954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545395/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-01-09T20:05:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545395",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@instagibbs See https://github.com/sipa/bitcoin/commits/pr28984 for a commit that works exactly for all `FeeFrac` objects. It uses C++20 three-way comparisons to also reduce the line count by 25%.",
      "created_at" : "2024-01-09T22:02:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1883870883",
      "id" : 1883870883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585wSZaj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883870883/reactions"
      },
      "updated_at" : "2024-01-09T22:02:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883870883",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "broke off all the incentive compatibility check stuff into its own PR: https://github.com/bitcoin/bitcoin/pull/29242\r\n\r\nPutting this in draft for now to divert attention there",
      "created_at" : "2024-01-12T18:08:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1889742216",
      "id" : 1889742216,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585woy2I",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889742216/reactions"
      },
      "updated_at" : "2024-01-12T18:08:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889742216",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2024-02-10T04:46:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1936862594",
      "id" : 1936862594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585zci2C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936862594/reactions"
      },
      "updated_at" : "2024-02-10T04:46:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1936862594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2024-03-09T02:13:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1986694313",
      "id" : 1986694313,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5852aoyp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1986694313/reactions"
      },
      "updated_at" : "2024-03-09T02:13:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1986694313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased on master, and ready for review \r\n\r\nnote that I will likely rebase this on top of https://github.com/bitcoin/bitcoin/pull/29735 when merged, to pull in `fill_mempool`",
      "created_at" : "2024-03-26T15:06:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2020685463",
      "id" : 2020685463,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5854cTaX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020685463/reactions"
      },
      "updated_at" : "2024-03-26T15:40:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020685463",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ready for review",
      "created_at" : "2024-04-15T13:38:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2056882691",
      "id" : 2056882691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5856mYoD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056882691/reactions"
      },
      "updated_at" : "2024-04-15T13:38:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056882691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569130553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569130553"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems like a merge conflict with #28970, maybe add the fix here instead?",
      "commit_id" : "23b9bd8f3406b40b33e20bf9d4f7f1f0830f3e88",
      "created_at" : "2024-04-17T16:26:56Z",
      "diff_hunk" : "@@ -1798,6 +1798,8 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n+    // Note: If package evaluation is exposed, we need to make sure the same\n+    // tx isn't added multiple times in one invocation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569130553",
      "id" : 1569130553,
      "line" : 1802,
      "node_id" : "PRRC_kwDOABII585dhwg5",
      "original_commit_id" : "b0ab6875bb05f34d3f4783dfe7b60d1d3dda2cfc",
      "original_line" : 1802,
      "original_position" : 5,
      "original_start_line" : 1801,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 2006530259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569130553/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1801,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-17T17:13:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569130553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569134261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569134261"
         }
      },
      "author_association" : "MEMBER",
      "body" : "34c513554c7be97d91446126bb3ef0de2884fc19\r\n\r\nThis seems slightly inaccurate, as it wouldn't currently be in a package if `ReplacementChecks` is happening?",
      "commit_id" : "23b9bd8f3406b40b33e20bf9d4f7f1f0830f3e88",
      "created_at" : "2024-04-17T16:29:59Z",
      "diff_hunk" : "@@ -1098,16 +1102,15 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     }\n     if (const auto err_string{PaysForRBF(m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                          m_pool.m_incremental_relay_feerate, hash)}) {\n-        // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n-        // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        // This must be changed if package RBF is enabled.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+        // Result may change in another package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569134261",
      "id" : 1569134261,
      "line" : 1105,
      "node_id" : "PRRC_kwDOABII585dhxa1",
      "original_commit_id" : "34c513554c7be97d91446126bb3ef0de2884fc19",
      "original_line" : 1105,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 264,
      "pull_request_review_id" : 2006530259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569134261/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T17:13:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569134261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569241334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569241334"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"in a package\"?",
      "commit_id" : "23b9bd8f3406b40b33e20bf9d4f7f1f0830f3e88",
      "created_at" : "2024-04-17T17:52:12Z",
      "diff_hunk" : "@@ -1098,16 +1102,15 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     }\n     if (const auto err_string{PaysForRBF(m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                          m_pool.m_incremental_relay_feerate, hash)}) {\n-        // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n-        // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        // This must be changed if package RBF is enabled.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+        // Result may change in another package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569241334",
      "id" : 1569241334,
      "in_reply_to_id" : 1569134261,
      "line" : 1105,
      "node_id" : "PRRC_kwDOABII585diLj2",
      "original_commit_id" : "34c513554c7be97d91446126bb3ef0de2884fc19",
      "original_line" : 1105,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 264,
      "pull_request_review_id" : 2006733782,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569241334/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T17:52:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569241334",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569270142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569270142"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe you can also check the topology/cluster size of this tx in mempool?",
      "commit_id" : "23b9bd8f3406b40b33e20bf9d4f7f1f0830f3e88",
      "created_at" : "2024-04-17T18:12:44Z",
      "diff_hunk" : "@@ -68,10 +69,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n-        //m_replaced_transactions should exist iff the result was VALID\n-        if (atmp_result.m_replaced_transactions.has_value() != valid) {\n-            return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n+        if (atmp_result.m_replaced_transactions.has_value()) {\n+            // m_replaced_transactions should exist iff the result was VALID\n+            if (!valid) {\n+                return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n                                     wtxid.ToString(), valid ? \"\" : \"not \");\n+            }\n+            // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+            if (atmp_result.m_replaced_transactions.value().size() > MAX_REPLACEMENT_CANDIDATES) {\n+                return strprintf(\"tx %s result replaced too many transactions\",\n+                                    wtxid.ToString());\n+            }\n+\n+            // Replacements can't happen for subpackages larger than 2\n+            if (!atmp_result.m_replaced_transactions.value().empty() &&\n+                atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() > 2) {\n+                 return strprintf(\"tx %s was part of a too-large package RBF subpackage\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569270142",
      "id" : 1569270142,
      "line" : 87,
      "node_id" : "PRRC_kwDOABII585diSl-",
      "original_commit_id" : "f0c6e68d5d289d34934d57fb8d352ac81d81ab04",
      "original_line" : 87,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/util/txmempool.cpp",
      "position" : 30,
      "pull_request_review_id" : 2006797308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569270142/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-17T18:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569270142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1571093831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571093831"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think #28970 is handling this properly, as it's the only place where we expose package evaluation over p2p. Can just remove this commit?",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-18T16:56:18Z",
      "diff_hunk" : "@@ -1798,6 +1798,8 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n+    // Note: If package evaluation is exposed, we need to make sure the same\n+    // tx isn't added multiple times in one invocation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1571093831",
      "id" : 1571093831,
      "in_reply_to_id" : 1569130553,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585dpP1H",
      "original_commit_id" : "b0ab6875bb05f34d3f4783dfe7b60d1d3dda2cfc",
      "original_line" : 1802,
      "original_position" : 5,
      "original_start_line" : 1801,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 2009428569,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571093831/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-18T16:56:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571093831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23993793129</sub>",
      "created_at" : "2024-04-18T19:49:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2065132026",
      "id" : 2065132026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5857F2n6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2065132026/reactions"
      },
      "updated_at" : "2024-04-18T19:49:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2065132026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1572363409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572363409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "pushed updated text",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-19T13:20:31Z",
      "diff_hunk" : "@@ -1098,16 +1102,15 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     }\n     if (const auto err_string{PaysForRBF(m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                          m_pool.m_incremental_relay_feerate, hash)}) {\n-        // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n-        // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        // This must be changed if package RBF is enabled.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+        // Result may change in another package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1572363409",
      "id" : 1572363409,
      "in_reply_to_id" : 1569134261,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585duFyR",
      "original_commit_id" : "34c513554c7be97d91446126bb3ef0de2884fc19",
      "original_line" : 1105,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2011414824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572363409/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-19T13:20:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572363409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1572364608"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572364608"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added a small check here using `GetEntry` that takes `Wtxid`s.",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-19T13:21:31Z",
      "diff_hunk" : "@@ -68,10 +69,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n-        //m_replaced_transactions should exist iff the result was VALID\n-        if (atmp_result.m_replaced_transactions.has_value() != valid) {\n-            return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n+        if (atmp_result.m_replaced_transactions.has_value()) {\n+            // m_replaced_transactions should exist iff the result was VALID\n+            if (!valid) {\n+                return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n                                     wtxid.ToString(), valid ? \"\" : \"not \");\n+            }\n+            // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+            if (atmp_result.m_replaced_transactions.value().size() > MAX_REPLACEMENT_CANDIDATES) {\n+                return strprintf(\"tx %s result replaced too many transactions\",\n+                                    wtxid.ToString());\n+            }\n+\n+            // Replacements can't happen for subpackages larger than 2\n+            if (!atmp_result.m_replaced_transactions.value().empty() &&\n+                atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() > 2) {\n+                 return strprintf(\"tx %s was part of a too-large package RBF subpackage\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1572364608",
      "id" : 1572364608,
      "in_reply_to_id" : 1569270142,
      "line" : 86,
      "node_id" : "PRRC_kwDOABII585duGFA",
      "original_commit_id" : "f0c6e68d5d289d34934d57fb8d352ac81d81ab04",
      "original_line" : 86,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/util/txmempool.cpp",
      "position" : 29,
      "pull_request_review_id" : 2011417179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572364608/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-19T13:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572364608",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574737173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574737173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "At first when I see  CPFP carveout disabled I thought we are not longer supporting single transaction CPFP carveout because the linked document is describing rules for a single transaction CPFP carveout.\r\n\r\nBut from the commit message and reading the code I understand thats not the case, I think we should be explicit that it's package CPFP carvout that is disabled. \r\n\r\n```suggestion\r\n* [Package CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\r\n```",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-22T13:12:37Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574737173",
      "id" : 1574737173,
      "line" : 51,
      "node_id" : "PRRC_kwDOABII585d3JUV",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 51,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 6,
      "pull_request_review_id" : 2014725944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574737173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T13:29:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574737173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574739231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574739231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This also implies that [single conflict package RBF carvout](https://github.com/bitcoin/bitcoin/pull/23711#discussion_r765766768) is not supported, is this worth mentioning?\r\n",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-22T13:14:07Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574739231",
      "id" : 1574739231,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585d3J0f",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 55,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 10,
      "pull_request_review_id" : 2014725944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574739231/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T13:29:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574739231",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574741503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574741503"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        # Ensure an individual transaction with single direct conflict can RBF the chain which used our carve-out rule\r\n\r\n```",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-22T13:15:20Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574741503",
      "id" : 1574741503,
      "line" : 71,
      "node_id" : "PRRC_kwDOABII585d3KX_",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 71,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 18,
      "pull_request_review_id" : 2014725944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574741503/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T13:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574741503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574744045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574744045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe test that Package RBF carveout is not supported?\r\n```suggestion\r\n\r\n        # But We can not package RBF the chain which used our carveout rule\r\n        replaceable_tx_conflict = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\r\n        txns_conflict = [replaceable_tx_conflict[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx_conflict[\"new_utxos\"])[\"tx\"]]\r\n        txns_conflict_hex = [tx.serialize().hex() for tx in txns_conflict]\r\n        assert_equal(self.nodes[0].testmempoolaccept(txns_conflict_hex)[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\r\n        pkg_result = self.nodes[0].submitpackage(txns_conflict_hex)\r\n        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns_conflict[0].getwtxid()][\"error\"]\r\n        assert_equal(pkg_result[\"tx-results\"][txns_conflict[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\r\n```",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-22T13:17:12Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574744045",
      "id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585d3K_t",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 24,
      "pull_request_review_id" : 2014725944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574744045/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T13:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574744045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574766371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574766371"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In `packages.md` there is note stating \"Replace By Fee is currently disabled for packages.\" This is no longer the case, some variants of package can now be RBF'd I think we should indicate that we now support cluster size 2 package replacement into node's mempool stating the new acceptance rules.",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-22T13:32:15Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+\n+The following rules are only enforced for packages to be submitted to the mempool (not\n+enforced for test accepts):\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574766371",
      "id" : 1574766371,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII585d3Qcj",
      "original_commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "original_line" : 58,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 13,
      "pull_request_review_id" : 2014775362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574766371/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T13:32:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574766371",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574879185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574879185"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The carve-out, by definition, doesn't have support in (sub)package contexts. Specific suggestions to clarify are welcome of course.",
      "commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "created_at" : "2024-04-22T14:41:31Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574879185",
      "id" : 1574879185,
      "in_reply_to_id" : 1574739231,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII585d3r_R",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 55,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 10,
      "pull_request_review_id" : 2014970576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574879185/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-22T14:41:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574879185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579508562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579508562"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Question: here you mean the package RBF rules in OP not BIP125 right?",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-25T13:49:25Z",
      "diff_hunk" : "@@ -1123,7 +1126,74 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579508562",
      "id" : 1579508562,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eJWNS",
      "original_commit_id" : "a6e2372488140d66fc874243bee9092c6cbf99c1",
      "original_line" : 1154,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579508562/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579508562",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579748212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579748212"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `tx_parent_3` is the same transaction `tx_parent_1` maybe just use `tx_parent_1` as parent of `tx_child_3`",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-25T15:55:48Z",
      "diff_hunk" : "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579748212",
      "id" : 1579748212,
      "line" : 923,
      "node_id" : "PRRC_kwDOABII585eKQt0",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 923,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 89,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579748212/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579748212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579749486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579749486"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`package1` and `package3` has the same parent",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-25T15:56:39Z",
      "diff_hunk" : "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 200 - 1300, /*submit=*/false));\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat. Both v2.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat. Both v2.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 200sat, 1 child paying 1300. Both v2.\n+        Package package3{tx_parent_3, tx_child_3};\n+        // In all packages, the parents conflict with each other",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579749486",
      "id" : 1579749486,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eKRBu",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 936,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579749486/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579749486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580798337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580798337"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You  moved  `fill_mempool` to util in #29735 ",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T10:04:48Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580798337",
      "id" : 1580798337,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eORGB",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580798337/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580798337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580896456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580896456"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this might be a better name\r\n```suggestion\r\n    def test_package_rbf_with_conflicting_packages(self):\r\n```",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T11:29:31Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580896456",
      "id" : 1580896456,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eOpDI",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 237,
      "original_position" : 237,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580896456/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580896456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580918022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580918022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The parent transaction will be detected as `inmempool` as such the child just get added to the mempool if it passes normal transaction consensus and policy rules, the package does not have any conflict and hence package RBF rules are not checked.\r\n\r\nThis test also passes when I removed package RBF commits\r\n```suggestion\r\n    def test_submitpackage_with_a_mempool_parent(self):\r\n        self.log.info(\"Test that submitpackage works when parent transactions was already submitted\")\r\n```",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T11:52:37Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580918022",
      "id" : 1580918022,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eOuUG",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 261,
      "original_position" : 261,
      "original_start_line" : 260,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580918022/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580918022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580946063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580946063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: \r\n```suggestion\r\n    def test_package_rbf_with_numerous_ancestors(self):\r\n```",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T12:17:16Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580946063",
      "id" : 1580946063,
      "line" : 212,
      "node_id" : "PRRC_kwDOABII585eO1KP",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 212,
      "original_position" : 275,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 212,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580946063/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580946063",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580970962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580970962"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n    def test_package_rbf_with_wrong_pkg_size(self):\r\n```",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T12:39:31Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580970962",
      "id" : 1580970962,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eO7PS",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 485,
      "original_position" : 485,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580970962/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580970962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580973594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580973594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        # Package 2 feerate is below the feerate of directly conflicted parent, even though\r\n```",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T12:41:32Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580973594",
      "id" : 1580973594,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eO74a",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 548,
      "original_position" : 548,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580973594/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580973594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580978287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580978287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Incomplete sentence?",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T12:45:09Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        self.fill_mempool()\n+        # Reset coins since we filled the mempool with current coins\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False, confirmed_only=True)\n+\n+        self.log.info(\"Test that package RBF doesn't have issues with mempool<->package conflicts via inconsistency\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # Put simple tx in mempool to chain off of",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580978287",
      "id" : 1580978287,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eO9Bv",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 565,
      "original_position" : 565,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580978287/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580978287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581088045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581088045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nice this will be helpful for collecting data, previously we only know that a transaction is replaced now it indicates which tx replaced it!\r\n\r\nE.g two transaction package evicting another two\r\n```terminal\r\n2024-04-26T14:36:53.889903Z [httpworker.3] [validation.cpp:1282] [Finalize] [mempool] replacing mempool tx 1ae8118ceb71249b2af793f671a1293a4c999e89f5091f52c42a3cf1e08c6840 (wtxid=97fc8654dcbd025b4165c56179d124ee4adf2d65acf8a66f8f5464dab7d07089, fees=10000, vsize=104). New tx a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 (wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47, fees=10000, vsize=104)\r\n2024-04-26T14:36:53.889910Z [httpworker.3] [validation.cpp:1282] [Finalize] [mempool] replacing mempool tx 9bd6895590404d3b04a208bbebf48a0397cb43b4df7ad349427be5e7dc1a2bbb (wtxid=e26f5339fcf7d3232c9bd58a99e6e2cb9c2369d70e7f8fed7296221ee8667119, fees=10000, vsize=104). New tx a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 (wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47, fees=10000, vsize=104)\r\n2024-04-26T14:36:53.889920Z [httpworker.3] [validationinterface.cpp:203] [TransactionRemovedFromMempool] [validation] Enqueuing TransactionRemovedFromMempool: txid=1ae8118ceb71249b2af793f671a1293a4c999e89f5091f52c42a3cf1e08c6840 wtxid=97fc8654dcbd025b4165c56179d124ee4adf2d65acf8a66f8f5464dab7d07089 reason=replaced\r\n2024-04-26T14:36:53.889929Z [scheduler] [validationinterface.cpp:203] [operator()] [validation] TransactionRemovedFromMempool: txid=1ae8118ceb71249b2af793f671a1293a4c999e89f5091f52c42a3cf1e08c6840 wtxid=97fc8654dcbd025b4165c56179d124ee4adf2d65acf8a66f8f5464dab7d07089 reason=replaced\r\n2024-04-26T14:36:53.889938Z [httpworker.3] [validationinterface.cpp:203] [TransactionRemovedFromMempool] [validation] Enqueuing TransactionRemovedFromMempool: txid=9bd6895590404d3b04a208bbebf48a0397cb43b4df7ad349427be5e7dc1a2bbb wtxid=e26f5339fcf7d3232c9bd58a99e6e2cb9c2369d70e7f8fed7296221ee8667119 reason=replaced\r\n2024-04-26T14:36:53.889946Z [scheduler] [validationinterface.cpp:203] [operator()] [validation] TransactionRemovedFromMempool: txid=9bd6895590404d3b04a208bbebf48a0397cb43b4df7ad349427be5e7dc1a2bbb wtxid=e26f5339fcf7d3232c9bd58a99e6e2cb9c2369d70e7f8fed7296221ee8667119 reason=replaced\r\n2024-04-26T14:36:53.889974Z [httpworker.3] [validation.cpp:1378] [SubmitPackage] [mempool] replaced 2 mempool transactions with 2 new one(s) for 40000 additional fees, 0 delta bytes\r\n2024-04-26T14:36:53.889981Z [httpworker.3] [validationinterface.cpp:193] [TransactionAddedToMempool] [validation] Enqueuing TransactionAddedToMempool: txid=a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47\r\n2024-04-26T14:36:53.889988Z [httpworker.3] [validationinterface.cpp:193] [TransactionAddedToMempool] [validation] Enqueuing TransactionAddedToMempool: txid=69e3f27c8097c2f76b32c3f6fb31cc11d89b674bed800cf61236e921c8c9d5c3 wtxid=ed7b933757b73937bf454af80e60cbd9b4fb24d7ce95d297519f5327a0470333\r\n2024-04-26T14:36:53.889995Z [scheduler] [validationinterface.cpp:193] [operator()] [validation] TransactionAddedToMempool: txid=a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47\r\n2024-04-26T14:36:53.890001Z [scheduler] [validationinterface.cpp:193] [operator()] [validation] TransactionAddedToMempool: txid=69e3f27c8097c2f76b32c3f6fb31cc11d89b674bed800cf61236e921c8c9d5c3 wtxid=ed7b933757b73937bf454af80e60cbd9b4fb24d7ce95d297519f5327a0470333\r\n```\r\n",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T14:05:39Z",
      "diff_hunk" : "@@ -1271,13 +1271,15 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // Remove conflicting transactions from the mempool\n     for (CTxMemPool::txiter it : m_all_conflicts)\n     {\n-        LogPrint(BCLog::MEMPOOL, \"replacing tx %s (wtxid=%s) with %s (wtxid=%s) for %s additional fees, %d delta bytes\\n\",\n+        LogPrint(BCLog::MEMPOOL, \"replacing mempool tx %s (wtxid=%s, fees=%s, vsize=%s). New tx %s (wtxid=%s, fees=%s, vsize=%s)\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581088045",
      "id" : 1581088045,
      "line" : 1279,
      "node_id" : "PRRC_kwDOABII585ePX0t",
      "original_commit_id" : "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "original_line" : 1279,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 370,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581088045/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:46:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581088045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581146454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581146454"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new transaction for %s additional fees, %d delta bytes\\n\",\r\n```",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T14:49:48Z",
      "diff_hunk" : "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581146454",
      "id" : 1581146454,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ePmFW",
      "original_commit_id" : "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "original_line" : 1463,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581146454/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581146454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581147216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581147216"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\nuse static cast?",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T14:50:27Z",
      "diff_hunk" : "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",\n+                 m_replaced_transactions.size(),\n+                 ws.m_modified_fees - (int)m_conflicting_fees,\n+                 ws.m_vsize - (int)m_conflicting_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581147216",
      "id" : 1581147216,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ePmRQ",
      "original_commit_id" : "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "original_line" : 1466,
      "original_position" : 41,
      "original_start_line" : 1465,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2022566276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581147216/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-26T15:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581147216",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275198"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:36:53Z",
      "diff_hunk" : "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",\n+                 m_replaced_transactions.size(),\n+                 ws.m_modified_fees - (int)m_conflicting_fees,\n+                 ws.m_vsize - (int)m_conflicting_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275198",
      "id" : 1581275198,
      "in_reply_to_id" : 1581147216,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFg-",
      "original_commit_id" : "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "original_line" : 1466,
      "original_position" : 41,
      "original_start_line" : 1465,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2025448599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275198/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275198",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275245"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:36:56Z",
      "diff_hunk" : "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275245",
      "id" : 1581275245,
      "in_reply_to_id" : 1581146454,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFht",
      "original_commit_id" : "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "original_line" : 1463,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2025448671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275245/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:36:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275245",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275555"
         }
      },
      "author_association" : "MEMBER",
      "body" : "complete sentence, but not grammatically correct or useful, removed",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:13Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        self.fill_mempool()\n+        # Reset coins since we filled the mempool with current coins\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False, confirmed_only=True)\n+\n+        self.log.info(\"Test that package RBF doesn't have issues with mempool<->package conflicts via inconsistency\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # Put simple tx in mempool to chain off of",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275555",
      "id" : 1581275555,
      "in_reply_to_id" : 1580978287,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFmj",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 565,
      "original_position" : 565,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2025449100,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275555/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275555",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275611"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:16Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275611",
      "id" : 1581275611,
      "in_reply_to_id" : 1580973594,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFnb",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 548,
      "original_position" : 548,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2025449196,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275611/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:19Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275679",
      "id" : 1581275679,
      "in_reply_to_id" : 1580970962,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFof",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 485,
      "original_position" : 485,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2025449377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275679/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275786"
         }
      },
      "author_association" : "MEMBER",
      "body" : "it's a package rbf test, I think name is fine",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:24Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275786",
      "id" : 1581275786,
      "in_reply_to_id" : 1580946063,
      "line" : 212,
      "node_id" : "PRRC_kwDOABII585eQFqK",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 212,
      "original_position" : 275,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 212,
      "pull_request_review_id" : 2025449538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275786/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275786",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275855"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmm, yeah I don't think this test is meaningful. Removed.",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:30Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275855",
      "id" : 1581275855,
      "in_reply_to_id" : 1580918022,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFrP",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 261,
      "original_position" : 261,
      "original_start_line" : 260,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2025449671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275855/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:35Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275921",
      "id" : 1581275921,
      "in_reply_to_id" : 1580896456,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFsR",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 237,
      "original_position" : 237,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2025449794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275921/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275972"
         }
      },
      "author_association" : "MEMBER",
      "body" : "forgot to remove, done",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:38Z",
      "diff_hunk" : "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275972",
      "id" : 1581275972,
      "in_reply_to_id" : 1580798337,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFtE",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 37,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2025449886,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275972/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275972",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276032"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:43Z",
      "diff_hunk" : "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 200 - 1300, /*submit=*/false));\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat. Both v2.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat. Both v2.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 200sat, 1 child paying 1300. Both v2.\n+        Package package3{tx_parent_3, tx_child_3};\n+        // In all packages, the parents conflict with each other",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276032",
      "id" : 1581276032,
      "in_reply_to_id" : 1579749486,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFuA",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 936,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 2025449996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276032/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276032",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "conceptually the test is cleaner if each parent is different, so I updated the parent to be slightly different, and asserted the parents are all have different txids",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:48Z",
      "diff_hunk" : "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276105",
      "id" : 1581276105,
      "in_reply_to_id" : 1579748212,
      "line" : 923,
      "node_id" : "PRRC_kwDOABII585eQFvJ",
      "original_commit_id" : "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "original_line" : 923,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 89,
      "pull_request_review_id" : 2025450121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276105/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276105",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Deleting this comment as I don't think it's helpful",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:51Z",
      "diff_hunk" : "@@ -1123,7 +1126,74 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276165",
      "id" : 1581276165,
      "in_reply_to_id" : 1579508562,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFwF",
      "original_commit_id" : "a6e2372488140d66fc874243bee9092c6cbf99c1",
      "original_line" : 1154,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2025450190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276165/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added updated comment",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:37:56Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+\n+The following rules are only enforced for packages to be submitted to the mempool (not\n+enforced for test accepts):\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276237",
      "id" : 1581276237,
      "in_reply_to_id" : 1574766371,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585eQFxN",
      "original_commit_id" : "2eb09886f37f40568547eda3464188df88e88eed",
      "original_line" : 57,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 26,
      "pull_request_review_id" : 2025450313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276237/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:37:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "would need to do a bit more work to make sure it actually would be attempting a package rbf. I think we can rely on our conflict topology check tests to ensure this, at least for default mempool chains? \r\n\r\n",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:38:01Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276289",
      "id" : 1581276289,
      "in_reply_to_id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585eQFyB",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 25,
      "pull_request_review_id" : 2025450404,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276289/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:38:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276289",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276334"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:38:04Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276334",
      "id" : 1581276334,
      "in_reply_to_id" : 1574741503,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFyu",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 71,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : null,
      "pull_request_review_id" : 2025450486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276334/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:38:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276334",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added an extra phrase, hope that helps?",
      "commit_id" : "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at" : "2024-04-26T16:38:09Z",
      "diff_hunk" : "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276412",
      "id" : 1581276412,
      "in_reply_to_id" : 1574737173,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585eQFz8",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 51,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : null,
      "pull_request_review_id" : 2025450601,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276412/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-26T16:38:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24308043248</sub>",
      "created_at" : "2024-04-26T16:41:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2079732585",
      "id" : 2079732585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII58579jNp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079732585/reactions"
      },
      "updated_at" : "2024-04-26T16:41:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079732585",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "all feedback should be addressed now",
      "created_at" : "2024-04-26T16:46:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2079739934",
      "id" : 2079739934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII58579lAe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079739934/reactions"
      },
      "updated_at" : "2024-04-26T16:46:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079739934",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1582768678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1582768678"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I learned that we can RBF a transaction that gets into the mempool using carveout. I wanted to test that you wouldn't  RBF  that transaction using  a package.\r\n\r\nEven if the arrangement attempts to RBF or not, I think the error in the suggestion is how it would fail. We would set `m_allow_carveout` to false while evaluating the first parent transaction and fail its evaluation due to a `TX_MEMPOOL_POLICY` violation of `too-long-mempool-chain`. hence, all the descendants would fail due to missing input.\r\n\r\nI just think this is a \"nice-to-have\" test, but not necessarily required for this PR.",
      "commit_id" : "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "created_at" : "2024-04-29T09:27:17Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1582768678",
      "id" : 1582768678,
      "in_reply_to_id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585eVyIm",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 25,
      "pull_request_review_id" : 2027958558,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1582768678/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-29T09:27:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1582768678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583065711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583065711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "looked a bit closer, how is this different from the \"# ...even if it's submitted with other transactions\" case above in the test? To check package rbf the only difference is making sure it's evaluated as a single subpackage(by having the child feerate be larger)",
      "commit_id" : "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "created_at" : "2024-04-29T13:11:08Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583065711",
      "id" : 1583065711,
      "in_reply_to_id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585eW6pv",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 25,
      "pull_request_review_id" : 2028473495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583065711/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-29T13:11:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583065711",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583082284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583082284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ahh I see, it's the same code path.",
      "commit_id" : "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "created_at" : "2024-04-29T13:22:11Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583082284",
      "id" : 1583082284,
      "in_reply_to_id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585eW-ss",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 25,
      "pull_request_review_id" : 2028502129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583082284/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-29T13:22:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583082284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583085742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583085742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oh right, neither of these cases will do a package rbf, as the package has in-mempool ancestors.\r\n\r\nIt would have to be a scenario where the ancestor limits are set to 1, then a package RBF of size 2 replaces that single tx, which would fail prechecks?",
      "commit_id" : "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "created_at" : "2024-04-29T13:24:40Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583085742",
      "id" : 1583085742,
      "in_reply_to_id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585eW_iu",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 25,
      "pull_request_review_id" : 2028508966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583085742/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-29T13:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583085742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583113813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583113813"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmm, I think it will always be the same code path that will be hit because the parent transaction (in the cluster size 2 replacement package) will be detected as conflict with the transaction that was carved out (because it has to go through `PreChecks`), and we don't allow package RBF carveout, so the subpackage evaluation with the parent and child will not be executed?",
      "commit_id" : "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "created_at" : "2024-04-29T13:39:54Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583113813",
      "id" : 1583113813,
      "in_reply_to_id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585eXGZV",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 25,
      "pull_request_review_id" : 2028556489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583113813/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-29T13:41:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583113813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48946461?v=4",
         "events_url" : "https://api.github.com/users/ismaelsadeeq/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ismaelsadeeq/followers",
         "following_url" : "https://api.github.com/users/ismaelsadeeq/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ismaelsadeeq/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ismaelsadeeq",
         "id" : 48946461,
         "login" : "ismaelsadeeq",
         "node_id" : "MDQ6VXNlcjQ4OTQ2NDYx",
         "organizations_url" : "https://api.github.com/users/ismaelsadeeq/orgs",
         "received_events_url" : "https://api.github.com/users/ismaelsadeeq/received_events",
         "repos_url" : "https://api.github.com/users/ismaelsadeeq/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ismaelsadeeq/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ismaelsadeeq/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ismaelsadeeq"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583414798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583414798"
         }
      },
      "author_association" : "MEMBER",
      "body" : "*even if* the test would manage to hit the case where it would have considered a package rbf(this case won't), it should be caught in both PreChecks and package mempool checks separately as chain limits are being busted.",
      "commit_id" : "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "created_at" : "2024-04-29T16:55:52Z",
      "diff_hunk" : "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583414798",
      "id" : 1583414798,
      "in_reply_to_id" : 1574744045,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII585eYP4O",
      "original_commit_id" : "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "original_line" : 75,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_onemore.py",
      "position" : 25,
      "pull_request_review_id" : 2029058246,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583414798/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-04-29T16:56:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583414798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased on master due to conflict from https://github.com/bitcoin/bitcoin/pull/29906",
      "created_at" : "2024-04-30T17:45:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2086222091",
      "id" : 2086222091,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5858WTkL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2086222091/reactions"
      },
      "updated_at" : "2024-04-30T17:45:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2086222091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1586256603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586256603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should all these failures be `PCKG_POLICY`? We have individual errors which are reported as well, and now with 1P1C relay, we probably want to act on failures at p2p layer?",
      "commit_id" : "e4d2c121dfacddad9303fceceedde583a460d448",
      "created_at" : "2024-05-01T12:43:10Z",
      "diff_hunk" : "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1586256603",
      "id" : 1586256603,
      "line" : 1138,
      "node_id" : "PRRC_kwDOABII585ejFrb",
      "original_commit_id" : "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "original_line" : 1138,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 285,
      "pull_request_review_id" : 2033547087,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586256603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-01T12:43:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586256603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased to pick up 1P1C relay",
      "created_at" : "2024-05-01T12:45:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2088415179",
      "id" : 2088415179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5858eq_L",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2088415179/reactions"
      },
      "updated_at" : "2024-05-01T12:45:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2088415179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587844135"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587844135"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in d08e7a9ab6b353f415ca30f7714b12f39f84fe48, instead of `FindInPackageParents`, maybe just call `IsChildWithParents()`? Or even better, `Assume(IsChildWithParents())`?",
      "commit_id" : "b3a83ab114a147921dfaef5dc2de97bdc06242e0",
      "created_at" : "2024-05-02T15:31:54Z",
      "diff_hunk" : "@@ -1146,6 +1146,12 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         }\n     }\n \n+    // Should be parent->child topology\n+    const auto parent_result{FindInPackageParents(txns, txns.back())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587844135",
      "id" : 1587844135,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585epJQn",
      "original_commit_id" : "d08e7a9ab6b353f415ca30f7714b12f39f84fe48",
      "original_line" : 1150,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2036089555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587844135/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-02T16:09:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587844135",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587905175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587905175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh even easier than what I replaced it with, duh",
      "commit_id" : "b3a83ab114a147921dfaef5dc2de97bdc06242e0",
      "created_at" : "2024-05-02T16:13:38Z",
      "diff_hunk" : "@@ -1146,6 +1146,12 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         }\n     }\n \n+    // Should be parent->child topology\n+    const auto parent_result{FindInPackageParents(txns, txns.back())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587905175",
      "id" : 1587905175,
      "in_reply_to_id" : 1587844135,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585epYKX",
      "original_commit_id" : "d08e7a9ab6b353f415ca30f7714b12f39f84fe48",
      "original_line" : 1150,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2036216739,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587905175/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-02T16:13:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587905175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587919121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587919121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "pushed with the `Assume()` check inline with the \"making sure package is cluster size two\" check",
      "commit_id" : "b3a83ab114a147921dfaef5dc2de97bdc06242e0",
      "created_at" : "2024-05-02T16:21:15Z",
      "diff_hunk" : "@@ -1146,6 +1146,12 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         }\n     }\n \n+    // Should be parent->child topology\n+    const auto parent_result{FindInPackageParents(txns, txns.back())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587919121",
      "id" : 1587919121,
      "in_reply_to_id" : 1587844135,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585epbkR",
      "original_commit_id" : "d08e7a9ab6b353f415ca30f7714b12f39f84fe48",
      "original_line" : 1150,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2036233376,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587919121/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-02T16:21:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587919121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased due to conflict on master",
      "created_at" : "2024-05-03T14:11:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2093106374",
      "id" : 2093106374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5858wkTG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2093106374/reactions"
      },
      "updated_at" : "2024-05-03T14:11:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2093106374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24559142372</sub>",
      "created_at" : "2024-05-03T15:10:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2093215430",
      "id" : 2093215430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5858w-7G",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2093215430/reactions"
      },
      "updated_at" : "2024-05-03T15:10:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2093215430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1594188338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594188338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "update: in master we're now processing these `PCKG_POLICY` cases, so should be ok? @glozow ",
      "commit_id" : "2b16eee7b107d93f33901e9ad15b83caa73d8291",
      "created_at" : "2024-05-08T14:58:34Z",
      "diff_hunk" : "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1594188338",
      "id" : 1594188338,
      "in_reply_to_id" : 1586256603,
      "line" : 1134,
      "node_id" : "PRRC_kwDOABII585fBWIy",
      "original_commit_id" : "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "original_line" : 1134,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 274,
      "pull_request_review_id" : 2045924939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594188338/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-08T14:58:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594188338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595176618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595176618"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah, I think `PCKG_POLICY` is fine given https://github.com/bitcoin/bitcoin/pull/30012/commits/6119f76ef72c1adc55c1a384c20f8ba9e1a01206. Just need to make sure the `MempoolAcceptResult`s are correct so that we are attributing the failures correctly",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T09:00:37Z",
      "diff_hunk" : "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595176618",
      "id" : 1595176618,
      "in_reply_to_id" : 1586256603,
      "line" : 1134,
      "node_id" : "PRRC_kwDOABII585fFHaq",
      "original_commit_id" : "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "original_line" : 1134,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 274,
      "pull_request_review_id" : 2045905107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595176618/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:01:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595176618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595472969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595472969"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec\r\n\r\nThe comments + error string are a bit contradictory (\"child only paying anti-DoS\" and \"parent paying for child anti-DoS\") unless maybe I'm misunderstanding?\r\n\r\nAlso maybe error str \"package RBF failed: parent paying for child replacement\" and debug str \"package feerate is X while parent feerate is Y\" ?",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T13:43:53Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595472969",
      "id" : 1595472969,
      "line" : 1170,
      "node_id" : "PRRC_kwDOABII585fGPxJ",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1170,
      "original_position" : 106,
      "original_start_line" : 1164,
      "path" : "src/validation.cpp",
      "position" : 310,
      "pull_request_review_id" : 2045905107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595472969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1164,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:01:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595472969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595480359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595480359"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec\r\n\r\nI wonder if `PaysForRBF` and `ImprovesFeerateDiagram` should be swapped in the order of checks?\r\n\r\n`ImprovesFeerateDiagram` is a more expensive, is a superset of the rules, and a less intuitive error (I'd have an easier time guessing what went wrong with \"pays less fees\" vs \"does not improve feerate diagram\". Especially looking at the functional tests which switched out the error strings due to this check being earlier.",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T13:49:33Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595480359",
      "id" : 1595480359,
      "line" : 1176,
      "node_id" : "PRRC_kwDOABII585fGRkn",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1176,
      "original_position" : 112,
      "original_start_line" : 1172,
      "path" : "src/validation.cpp",
      "position" : 316,
      "pull_request_review_id" : 2045905107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595480359/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1172,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:01:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595480359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595484318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595484318"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\r\n```",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T13:52:51Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595484318",
      "id" : 1595484318,
      "line" : 1141,
      "node_id" : "PRRC_kwDOABII585fGSie",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1141,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 281,
      "pull_request_review_id" : 2045905107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595484318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:01:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595484318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595487038"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595487038"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe you can mention that this replaces `PaysMoreForConflicts` function from `ReplacementChecks`?",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T13:54:56Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595487038",
      "id" : 1595487038,
      "line" : 1172,
      "node_id" : "PRRC_kwDOABII585fGTM-",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1172,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 312,
      "pull_request_review_id" : 2045905107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595487038/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:01:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595487038",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595490481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595490481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it's very clear which cluster isn't size two in this str\r\n```suggestion\r\n        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\r\n```",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T13:57:39Z",
      "diff_hunk" : "@@ -1087,7 +1125,76 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595490481",
      "id" : 1595490481,
      "line" : 1134,
      "node_id" : "PRRC_kwDOABII585fGUCx",
      "original_commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "original_line" : 1134,
      "original_position" : 274,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 274,
      "pull_request_review_id" : 2045905107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595490481/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:01:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595490481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595494866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595494866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could add more detailed docs for what the rules are in package RBF?\r\n\r\n- all to-be-replaced signal (bip125 or v3)\r\n- package is 1p1c, only in clusters up to size 2\r\n- to-be-replaced all in clusters up to size 2\r\n- no more than 100 total to-be-replaced\r\n- total fees of package > all fees being replaced, at incremental relay feerate\r\n- must improve feerate diagram\r\n- parent feerate must be < package feerate",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T14:01:06Z",
      "diff_hunk" : "@@ -36,10 +36,9 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - More general package RBF may be enabled in the future.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595494866",
      "id" : 1595494866,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII585fGVHS",
      "original_commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "original_line" : 41,
      "original_position" : 9,
      "original_start_line" : 42,
      "path" : "doc/policy/packages.md",
      "position" : 9,
      "pull_request_review_id" : 2045905107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 1,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595494866/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 42,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:01:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595494866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595504866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595504866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> is a superset of the rules\r\n\r\nPaysForRBF has incremental rate on top, so `ImprovesFeerateDiagram` is not a strict superset fwiw.\r\n\r\nThat said, I don't think swapping the order is a problem and would indeed be cheaper.",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T14:09:16Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595504866",
      "id" : 1595504866,
      "in_reply_to_id" : 1595480359,
      "line" : 1176,
      "node_id" : "PRRC_kwDOABII585fGXji",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1176,
      "original_position" : 112,
      "original_start_line" : 1172,
      "path" : "src/validation.cpp",
      "position" : 316,
      "pull_request_review_id" : 2048052673,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595504866/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1172,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:09:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595504866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595508385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595508385"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIUC It will leave the \"individual failures\" in place which should be:\r\nparent: TX_RECONSIDERABLE\r\nchild: TX_MISSING_INPUTS",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T14:11:51Z",
      "diff_hunk" : "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595508385",
      "id" : 1595508385,
      "in_reply_to_id" : 1586256603,
      "line" : 1134,
      "node_id" : "PRRC_kwDOABII585fGYah",
      "original_commit_id" : "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "original_line" : 1134,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 274,
      "pull_request_review_id" : 2048058328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595508385/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T14:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595508385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595654005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595654005"
         }
      },
      "author_association" : "MEMBER",
      "body" : "True, it's only a superset of Rule 3 ð ",
      "commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at" : "2024-05-09T15:59:35Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595654005",
      "id" : 1595654005,
      "in_reply_to_id" : 1595480359,
      "line" : 1176,
      "node_id" : "PRRC_kwDOABII585fG791",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1176,
      "original_position" : 112,
      "original_start_line" : 1172,
      "path" : "src/validation.cpp",
      "position" : 316,
      "pull_request_review_id" : 2048297250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595654005/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1172,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T15:59:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595654005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845274"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@glozow pushed some more detailed docs, thanks!",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-09T18:48:27Z",
      "diff_hunk" : "@@ -36,10 +36,9 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - More general package RBF may be enabled in the future.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845274",
      "id" : 1595845274,
      "in_reply_to_id" : 1595494866,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fHqqa",
      "original_commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "original_line" : 41,
      "original_position" : 9,
      "original_start_line" : 42,
      "path" : "doc/policy/packages.md",
      "position" : null,
      "pull_request_review_id" : 2048603478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845274/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T18:48:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845274",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-09T18:48:30Z",
      "diff_hunk" : "@@ -1087,7 +1125,76 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845313",
      "id" : 1595845313,
      "in_reply_to_id" : 1595490481,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fHqrB",
      "original_commit_id" : "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "original_line" : 1134,
      "original_position" : 274,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2048603552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845313/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T18:48:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-09T18:48:31Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845340",
      "id" : 1595845340,
      "in_reply_to_id" : 1595487038,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fHqrc",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1172,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2048603603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845340/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T18:48:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845340",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-09T18:48:33Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845388",
      "id" : 1595845388,
      "in_reply_to_id" : 1595484318,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fHqsM",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1141,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2048603654,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845388/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-09T18:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845419"
         }
      },
      "author_association" : "MEMBER",
      "body" : "swapped them and updated tests accordingly",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-09T18:48:35Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845419",
      "id" : 1595845419,
      "in_reply_to_id" : 1595480359,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fHqsr",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1176,
      "original_position" : 112,
      "original_start_line" : 1172,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2048603709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845419/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T18:48:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845454"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-09T18:48:38Z",
      "diff_hunk" : "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845454",
      "id" : 1595845454,
      "in_reply_to_id" : 1595472969,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fHqtO",
      "original_commit_id" : "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "original_line" : 1170,
      "original_position" : 106,
      "original_start_line" : 1164,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2048603780,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845454/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-09T18:48:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow thanks for the review, all comments addressed",
      "created_at" : "2024-05-09T18:49:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2103229267",
      "id" : 2103229267,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5859XLtT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2103229267/reactions"
      },
      "updated_at" : "2024-05-09T18:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2103229267",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596837120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596837120"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: you change the fee in the last successful one, which is a little bit sus since fee shouldn't matter in this test\r\n\r\nMaybe create 2 constants for the parent `fee_per_output` and child fee/feerate, and use them for each round?",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-10T14:32:51Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596837120",
      "id" : 1596837120,
      "line" : 241,
      "node_id" : "PRRC_kwDOABII585fLc0A",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 241,
      "original_position" : 241,
      "original_start_line" : 216,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 241,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596837120/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 216,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596837120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596843725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596843725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't really understand what's being tested here - this doesn't have anything to do with package RBF? This isn't a topologically valid package since the transactions aren't related to each other in addition to being double spends. #30066 seems closer to what this is going for?",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-10T14:38:31Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596843725",
      "id" : 1596843725,
      "line" : 257,
      "node_id" : "PRRC_kwDOABII585fLebN",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 257,
      "original_position" : 257,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 257,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596843725/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596843725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596847344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These 2 things are contradictory. AFAICT `fee_rate` is ignored, delete?",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-10T14:41:34Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596847344",
      "id" : 1596847344,
      "line" : 284,
      "node_id" : "PRRC_kwDOABII585fLfTw",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 284,
      "original_position" : 284,
      "original_start_line" : 283,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 284,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847344/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 283,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596861606"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596861606"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: more varied fees for the packages for the `wrong_conflict_cluster_size_*` tests, could also use constant",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-10T14:54:06Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596861606",
      "id" : 1596861606,
      "line" : 465,
      "node_id" : "PRRC_kwDOABII585fLiym",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 465,
      "original_position" : 465,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 465,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596861606/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596861606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--85328a0da195eb286784d51f73fa0af9-->\n\nð§ At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24790654138</sub>",
      "created_at" : "2024-05-12T12:10:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2106225643",
      "id" : 2106225643,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5859inPr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2106225643/reactions"
      },
      "updated_at" : "2024-05-12T12:10:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2106225643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "silent merge conflict with https://github.com/bitcoin/bitcoin/pull/29939",
      "created_at" : "2024-05-12T12:30:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2106231136",
      "id" : 2106231136,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII5859iolg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2106231136/reactions"
      },
      "updated_at" : "2024-05-12T12:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2106231136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598137245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598137245"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is now in `mempool_util` (= linter complaint)",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-13T09:12:29Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598137245",
      "id" : 1598137245,
      "line" : 17,
      "node_id" : "PRRC_kwDOABII585fQaOd",
      "original_commit_id" : "497aed95d36e577a958c5353a4a633f25034e326",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 17,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598137245/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598137245",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598149576"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598149576"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: this would be easier to read and more extensible in the future\r\n```suggestion\r\n    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\r\n```",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-13T09:21:44Z",
      "diff_hunk" : "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598149576",
      "id" : 1598149576,
      "line" : 1182,
      "node_id" : "PRRC_kwDOABII585fQdPI",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 1182,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 322,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598149576/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598149576",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598153870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598153870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit; make reference not copy\r\n```suggestion\r\n    const Txid& child_hash = child_ws.m_ptx->GetHash();\r\n```",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-13T09:24:52Z",
      "diff_hunk" : "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598153870",
      "id" : 1598153870,
      "line" : 1172,
      "node_id" : "PRRC_kwDOABII585fQeSO",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 1172,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 312,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598153870/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598153870",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598170246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598170246"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry to nit my own previous suggestion, but I think \"parent paying for child replacement\" might still be too specific, since it could be that the child has nothing to replace but is lower feerate (like `package_txns6` in the functional test).\r\n\r\nMaybe\r\n```suggestion\r\n                                     \"package RBF failed: package feerate is less than parent feerate\",\r\n                                     strprintf(\"package feerate %s <= parent feerate %s\", package_feerate.ToString(), parent_feerate.ToString()));\r\n```",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-13T09:35:32Z",
      "diff_hunk" : "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child replacement\",\n+                                     strprintf(\"package feerate is %s while parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598170246",
      "id" : 1598170246,
      "line" : 1186,
      "node_id" : "PRRC_kwDOABII585fQiSG",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 1186,
      "original_position" : 326,
      "original_start_line" : 1185,
      "path" : "src/validation.cpp",
      "position" : 326,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598170246/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1185,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598170246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598211388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598211388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Given that `fee_delta` is a multiple of `DEFAULT_FEE` and you're using `fee_delta / 2` here... I think the general readability of this test would be improved if you created a constant base unit `FEE` which was equal to, say, `DEFAULT_FEE / 10` (or `104 * 10` which would give most of the transactions whole number feerates), and then used `FEE`, `2*FEE`, `8*FEE`, etc. in all the tests.",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-13T10:01:00Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598211388",
      "id" : 1598211388,
      "line" : 192,
      "node_id" : "PRRC_kwDOABII585fQsU8",
      "original_commit_id" : "497aed95d36e577a958c5353a4a633f25034e326",
      "original_line" : 192,
      "original_position" : 192,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 192,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598211388/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598211388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598246153"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598246153"
         }
      },
      "author_association" : "MEMBER",
      "body" : "with rebase\r\n```suggestion\r\n        fill_mempool(self, self.nodes[0])\r\n```",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-13T10:29:49Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_wrong_pkg_size(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: package must be 1-parent-1-child')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the feerate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        fill_mempool(self, self.nodes[0], self.wallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598246153",
      "id" : 1598246153,
      "line" : 552,
      "node_id" : "PRRC_kwDOABII585fQ00J",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 552,
      "original_position" : 552,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : 552,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598246153/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598246153",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598248191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598248191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe there should be some v3 test coverage (including nice 0fee parent package RBF)?\r\n```\r\ndiff --git a/test/functional/mempool_accept_v3.py b/test/functional/mempool_accept_v3.py\r\nindex 8285b82c19..990d36359e 100755\r\n--- a/test/functional/mempool_accept_v3.py\r\n+++ b/test/functional/mempool_accept_v3.py\r\n@@ -579,6 +579,32 @@ class MempoolAcceptV3(BitcoinTestFramework):\r\n         )\r\n         self.check_mempool([tx_with_multi_children[\"txid\"], tx_with_sibling3_rbf[\"txid\"], tx_with_sibling2[\"txid\"]])\r\n \r\n+    @cleanup(extra_args=[\"-acceptnonstdtxn=1\"])\r\n+    def test_package_rbf(self):\r\n+        self.log.info(\"Test package RBF: v3 0-fee parent + high-fee child replaces parent's conflicts\")\r\n+        node = self.nodes[0]\r\n+        # Reuse the same coins so that the transactions conflict with one another.\r\n+        parent_coin = self.wallet.get_utxo(confirmed_only=True)\r\n+\r\n+        # package1 pays default fee on both transactions\r\n+        parent1 = self.wallet.create_self_transfer(utxo_to_spend=parent_coin, version=3)\r\n+        child1 = self.wallet.create_self_transfer(utxo_to_spend=parent1[\"new_utxo\"], version=3)\r\n+        package_hex1 = [parent1[\"hex\"], child1[\"hex\"]]\r\n+        fees_package1 = parent1[\"fee\"] + child1[\"fee\"]\r\n+        submitres1 = node.submitpackage(package_hex1)\r\n+        assert_equal(submitres1[\"package_msg\"], \"success\")\r\n+        self.check_mempool([parent1[\"txid\"], child1[\"txid\"]])\r\n+\r\n+        # package2 has a 0-fee parent (conflicting with package1) and very high fee child\r\n+        parent2 = self.wallet.create_self_transfer(utxo_to_spend=parent_coin, fee=0, fee_rate=0, version=3)\r\n+        child2 = self.wallet.create_self_transfer(utxo_to_spend=parent2[\"new_utxo\"], fee=fees_package1*10, version=3)\r\n+        package_hex2 = [parent2[\"hex\"], child2[\"hex\"]]\r\n+\r\n+        submitres2 = node.submitpackage(package_hex2)\r\n+        assert_equal(submitres2[\"package_msg\"], \"success\")\r\n+        assert_equal(set(submitres2[\"replaced-transactions\"]), set([parent1[\"txid\"], child1[\"txid\"]]))\r\n+        self.check_mempool([parent2[\"txid\"], child2[\"txid\"]])\r\n+\r\n \r\n     def run_test(self):\r\n         self.log.info(\"Generate blocks to create UTXOs\")\r\n@@ -598,6 +624,7 @@ class MempoolAcceptV3(BitcoinTestFramework):\r\n         self.test_reorg_2child_rbf()\r\n         self.test_v3_sibling_eviction()\r\n         self.test_reorg_sibling_eviction_1p2c()\r\n+        self.test_package_rbf()\r\n \r\n \r\n if __name__ == \"__main__\":\r\n```",
      "commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at" : "2024-05-13T10:31:47Z",
      "diff_hunk" : "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598248191",
      "id" : 1598248191,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585fQ1T_",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 57,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 25,
      "pull_request_review_id" : 2050218566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598248191/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T10:32:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598248191",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598710812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710812"
         }
      },
      "author_association" : "MEMBER",
      "body" : "was wondering about this case, added with some modifications for test simplicity",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:58:43Z",
      "diff_hunk" : "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598710812",
      "id" : 1598710812,
      "in_reply_to_id" : 1598248191,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII585fSmQc",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 57,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 25,
      "pull_request_review_id" : 2053104115,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710812/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:58:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710812",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598710933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710933"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:58:47Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_wrong_pkg_size(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: package must be 1-parent-1-child')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the feerate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        fill_mempool(self, self.nodes[0], self.wallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598710933",
      "id" : 1598710933,
      "in_reply_to_id" : 1598246153,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmSV",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 552,
      "original_position" : 552,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2053104248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710933/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711002"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I created `DEFAULT_CHILD_FEE` and used that pretty much everywhere it made sense",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:58:50Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711002",
      "id" : 1598711002,
      "in_reply_to_id" : 1598211388,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmTa",
      "original_commit_id" : "497aed95d36e577a958c5353a4a633f25034e326",
      "original_line" : 192,
      "original_position" : 192,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2053104339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711002/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:58:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711061"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:58:53Z",
      "diff_hunk" : "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child replacement\",\n+                                     strprintf(\"package feerate is %s while parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711061",
      "id" : 1598711061,
      "in_reply_to_id" : 1598170246,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmUV",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 1186,
      "original_position" : 326,
      "original_start_line" : 1185,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2053104440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711061/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:58:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:58:55Z",
      "diff_hunk" : "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711106",
      "id" : 1598711106,
      "in_reply_to_id" : 1598153870,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmVC",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 1172,
      "original_position" : 312,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2053104521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711106/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:58:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711206"
         }
      },
      "author_association" : "MEMBER",
      "body" : "taken",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:58:59Z",
      "diff_hunk" : "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711206",
      "id" : 1598711206,
      "in_reply_to_id" : 1598149576,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmWm",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 1182,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 2053104699,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711206/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:59:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711279"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:59:02Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711279",
      "id" : 1598711279,
      "in_reply_to_id" : 1598137245,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmXv",
      "original_commit_id" : "497aed95d36e577a958c5353a4a633f25034e326",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2053104788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711279/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:59:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711331"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711331"
         }
      },
      "author_association" : "MEMBER",
      "body" : "picked a constant and used it",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:59:05Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711331",
      "id" : 1598711331,
      "in_reply_to_id" : 1596861606,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmYj",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 465,
      "original_position" : 465,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2053104886,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711331/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:59:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711398"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed a series of these ignored args",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:59:08Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711398",
      "id" : 1598711398,
      "in_reply_to_id" : 1596847344,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmZm",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 259,
      "original_position" : 284,
      "original_start_line" : 283,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2053104998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711398/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711398",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711480"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agreed, it's perhaps an older badly done version of #30066, removed",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:59:11Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711480",
      "id" : 1598711480,
      "in_reply_to_id" : 1596843725,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSma4",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 257,
      "original_position" : 257,
      "original_start_line" : null,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2053105147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711480/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:59:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711567"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711567"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I turned off maxfeerate, jacked up the child feerates, and made constants for both",
      "commit_id" : "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at" : "2024-05-13T15:59:14Z",
      "diff_hunk" : "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711567",
      "id" : 1598711567,
      "in_reply_to_id" : 1596837120,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585fSmcP",
      "original_commit_id" : "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "original_line" : 241,
      "original_position" : 241,
      "original_start_line" : 216,
      "path" : "test/functional/mempool_package_rbf.py",
      "position" : null,
      "pull_request_review_id" : 2053105311,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711567/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2024-05-13T15:59:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711567",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2024-05-15T01:36:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2111424149",
      "id" : 2111424149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII58592caV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2111424149/reactions"
      },
      "updated_at" : "2024-05-15T01:36:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2111424149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased due to conflict",
      "created_at" : "2024-05-15T12:13:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2112366413",
      "id" : 2112366413,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII58596CdN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2112366413/reactions"
      },
      "updated_at" : "2024-05-15T12:13:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2112366413",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "While I wouldn't trust myself to correctly code-review this PR, I'd be happy to work on e2e tests that would leverage this for lightning channels fee-bumping (based on [eclair](https://github.com/acinq/eclair)) if it can help validate the logic and get this PR merged.\r\n\r\nI'd like to highlight again how important this feature is for lightning (and probably for many other L2 protocols on top of bitcoin today). This is the critical step that allows us to mitigate pinning of a commitment transaction, and guarantee that we're able to set the fees of our commitment package to a value that should ensure timely confirmation.",
      "created_at" : "2024-05-15T13:47:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2112590380",
      "id" : 2112590380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585965Is",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2112590380/reactions"
      },
      "updated_at" : "2024-05-15T13:47:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2112590380",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "sorry forgot to link https://github.com/bitcoin/bitcoin/pull/30072 here, added to OP",
      "created_at" : "2024-05-16T15:14:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2115522891",
      "id" : 2115522891,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585-GFFL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115522891/reactions"
      },
      "updated_at" : "2024-05-16T15:14:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115522891",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased on latest #30072",
      "created_at" : "2024-05-20T14:36:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2120592803",
      "id" : 2120592803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
      "node_id" : "IC_kwDOABII585-Za2j",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2120592803/reactions"
      },
      "updated_at" : "2024-05-20T14:36:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2120592803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
