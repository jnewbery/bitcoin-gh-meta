[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28926).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-11-22T12:37:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28926#issuecomment-1822694513",
      "id" : 1822694513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28926",
      "node_id" : "IC_kwDOABII585spBxx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1822694513/reactions"
      },
      "updated_at" : "2023-11-22T12:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1822694513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28926#discussion_r1402168125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28926"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402168125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "All these plus the `NUM_NET_MESSAGE_TYPES` constant can be avoided if the list of all message types is turned into a `std::array`. Consider this:\r\n\r\n<details>\r\n<summary>[patch] make the list of known message types a compile time constant</summary>\r\n\r\n```diff\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex a2f80cbcf7..133abae117 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -3670,13 +3670,13 @@ CNode::CNode(NodeId idIn,\r\n       nLocalHostNonce{nLocalHostNonceIn},\r\n       m_recv_flood_size{node_opts.recv_flood_size},\r\n       m_i2p_sam_session{std::move(node_opts.i2p_sam_session)}\r\n {\r\n     if (inbound_onion) assert(conn_type_in == ConnectionType::INBOUND);\r\n \r\n-    for (const std::string &msg : getAllNetMessageTypes())\r\n+    for (const auto& msg : g_all_net_message_types)\r\n         mapRecvBytesPerMsgType[msg] = 0;\r\n     mapRecvBytesPerMsgType[NET_MESSAGE_TYPE_OTHER] = 0;\r\n \r\n     if (fLogIPs) {\r\n         LogPrint(BCLog::NET, \"Added connection to %s peer=%d\\n\", m_addr_name, id);\r\n     } else {\r\ndiff --git a/src/protocol.cpp b/src/protocol.cpp\r\nindex 27a0a2ffc1..0b22cc47aa 100644\r\n--- a/src/protocol.cpp\r\n+++ b/src/protocol.cpp\r\n@@ -46,53 +46,12 @@ const char* CFHEADERS = \"cfheaders\";\r\n const char* GETCFCHECKPT = \"getcfcheckpt\";\r\n const char* CFCHECKPT = \"cfcheckpt\";\r\n const char* WTXIDRELAY = \"wtxidrelay\";\r\n const char* SENDTXRCNCL = \"sendtxrcncl\";\r\n } // namespace NetMsgType\r\n \r\n-/** All known message types. Keep this in the same order as the list of\r\n- * messages above and in protocol.h.\r\n- */\r\n-const static std::vector<std::string> g_all_net_message_types{\r\n-    NetMsgType::VERSION,\r\n-    NetMsgType::VERACK,\r\n-    NetMsgType::ADDR,\r\n-    NetMsgType::ADDRV2,\r\n-    NetMsgType::SENDADDRV2,\r\n-    NetMsgType::INV,\r\n-    NetMsgType::GETDATA,\r\n-    NetMsgType::MERKLEBLOCK,\r\n-    NetMsgType::GETBLOCKS,\r\n-    NetMsgType::GETHEADERS,\r\n-    NetMsgType::TX,\r\n-    NetMsgType::HEADERS,\r\n-    NetMsgType::BLOCK,\r\n-    NetMsgType::GETADDR,\r\n-    NetMsgType::MEMPOOL,\r\n-    NetMsgType::PING,\r\n-    NetMsgType::PONG,\r\n-    NetMsgType::NOTFOUND,\r\n-    NetMsgType::FILTERLOAD,\r\n-    NetMsgType::FILTERADD,\r\n-    NetMsgType::FILTERCLEAR,\r\n-    NetMsgType::SENDHEADERS,\r\n-    NetMsgType::FEEFILTER,\r\n-    NetMsgType::SENDCMPCT,\r\n-    NetMsgType::CMPCTBLOCK,\r\n-    NetMsgType::GETBLOCKTXN,\r\n-    NetMsgType::BLOCKTXN,\r\n-    NetMsgType::GETCFILTERS,\r\n-    NetMsgType::CFILTER,\r\n-    NetMsgType::GETCFHEADERS,\r\n-    NetMsgType::CFHEADERS,\r\n-    NetMsgType::GETCFCHECKPT,\r\n-    NetMsgType::CFCHECKPT,\r\n-    NetMsgType::WTXIDRELAY,\r\n-    NetMsgType::SENDTXRCNCL,\r\n-};\r\n-\r\n CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\r\n     : pchMessageStart{pchMessageStartIn}\r\n {\r\n     // Copy the command name\r\n     size_t i = 0;\r\n     for (; i < COMMAND_SIZE && pszCommand[i] != 0; ++i) pchCommand[i] = pszCommand[i];\r\n@@ -175,17 +134,12 @@ std::string CInv::ToString() const\r\n         return strprintf(\"%s %s\", GetCommand(), hash.ToString());\r\n     } catch(const std::out_of_range &) {\r\n         return strprintf(\"0x%08x %s\", type, hash.ToString());\r\n     }\r\n }\r\n \r\n-const std::vector<std::string> &getAllNetMessageTypes()\r\n-{\r\n-    return g_all_net_message_types;\r\n-}\r\n-\r\n /**\r\n  * Convert a service flag (NODE_*) to a human readable string.\r\n  * It supports unknown service flags which will be returned as \"UNKNOWN[...]\".\r\n  * @param[in] bit the service flag is calculated as (1 << bit)\r\n  */\r\n static std::string serviceFlagToStr(size_t bit)\r\ndiff --git a/src/protocol.h b/src/protocol.h\r\nindex e405253632..2a6b85dea5 100644\r\n--- a/src/protocol.h\r\n+++ b/src/protocol.h\r\n@@ -264,14 +264,50 @@ extern const char* WTXIDRELAY;\r\n  * The salt is used to compute short txids needed for efficient\r\n  * txreconciliation, as described by BIP 330.\r\n  */\r\n extern const char* SENDTXRCNCL;\r\n }; // namespace NetMsgType\r\n \r\n-/* Get a vector of all valid message types (see above) */\r\n-const std::vector<std::string>& getAllNetMessageTypes();\r\n+/** All known message types (see above). Keep this in the same order as the list of messages above. */\r\n+static const std::array g_all_net_message_types{\r\n+    NetMsgType::VERSION,\r\n+    NetMsgType::VERACK,\r\n+    NetMsgType::ADDR,\r\n+    NetMsgType::ADDRV2,\r\n+    NetMsgType::SENDADDRV2,\r\n+    NetMsgType::INV,\r\n+    NetMsgType::GETDATA,\r\n+    NetMsgType::MERKLEBLOCK,\r\n+    NetMsgType::GETBLOCKS,\r\n+    NetMsgType::GETHEADERS,\r\n+    NetMsgType::TX,\r\n+    NetMsgType::HEADERS,\r\n+    NetMsgType::BLOCK,\r\n+    NetMsgType::GETADDR,\r\n+    NetMsgType::MEMPOOL,\r\n+    NetMsgType::PING,\r\n+    NetMsgType::PONG,\r\n+    NetMsgType::NOTFOUND,\r\n+    NetMsgType::FILTERLOAD,\r\n+    NetMsgType::FILTERADD,\r\n+    NetMsgType::FILTERCLEAR,\r\n+    NetMsgType::SENDHEADERS,\r\n+    NetMsgType::FEEFILTER,\r\n+    NetMsgType::SENDCMPCT,\r\n+    NetMsgType::CMPCTBLOCK,\r\n+    NetMsgType::GETBLOCKTXN,\r\n+    NetMsgType::BLOCKTXN,\r\n+    NetMsgType::GETCFILTERS,\r\n+    NetMsgType::CFILTER,\r\n+    NetMsgType::GETCFHEADERS,\r\n+    NetMsgType::CFHEADERS,\r\n+    NetMsgType::GETCFCHECKPT,\r\n+    NetMsgType::CFCHECKPT,\r\n+    NetMsgType::WTXIDRELAY,\r\n+    NetMsgType::SENDTXRCNCL,\r\n+};\r\n \r\n /** nServices flags */\r\n enum ServiceFlags : uint64_t {\r\n     // NOTE: When adding here, be sure to update serviceFlagToStr too\r\n     // Nothing\r\n     NODE_NONE = 0,\r\ndiff --git a/src/test/fuzz/p2p_transport_serialization.cpp b/src/test/fuzz/p2p_transport_serialization.cpp\r\nindex 21d8dab536..853661b4d4 100644\r\n--- a/src/test/fuzz/p2p_transport_serialization.cpp\r\n+++ b/src/test/fuzz/p2p_transport_serialization.cpp\r\n@@ -18,19 +18,18 @@\r\n #include <limits>\r\n #include <optional>\r\n #include <vector>\r\n \r\n namespace {\r\n \r\n-std::vector<std::string> g_all_messages;\r\n+auto g_all_messages = g_all_net_message_types;\r\n \r\n void initialize_p2p_transport_serialization()\r\n {\r\n     ECC_Start();\r\n     SelectParams(ChainType::REGTEST);\r\n-    g_all_messages = getAllNetMessageTypes();\r\n     std::sort(g_all_messages.begin(), g_all_messages.end());\r\n }\r\n \r\n } // namespace\r\n \r\n FUZZ_TARGET(p2p_transport_serialization, .init = initialize_p2p_transport_serialization)\r\n@@ -147,13 +146,13 @@ void SimulationTest(Transport& initiator, Transport& responder, R& rng, FuzzedDa\r\n                 if (c < ' ' || c > 0x7E) break;\r\n                 ret += c;\r\n             }\r\n             return ret;\r\n         } else {\r\n             // Otherwise, use it as index into the list of known messages.\r\n-            return g_all_messages[v % g_all_messages.size()];\r\n+            return std::string{g_all_messages[v % g_all_messages.size()]};\r\n         }\r\n     };\r\n \r\n     // Function to construct a CSerializedNetMsg to send.\r\n     auto make_msg_fn = [&](bool first) {\r\n         CSerializedNetMsg msg;\r\ndiff --git a/src/test/fuzz/process_message.cpp b/src/test/fuzz/process_message.cpp\r\nindex d38d1bb40e..24c711f421 100644\r\n--- a/src/test/fuzz/process_message.cpp\r\n+++ b/src/test/fuzz/process_message.cpp\r\n@@ -42,13 +42,13 @@ std::string_view LIMIT_TO_MESSAGE_TYPE{};\r\n } // namespace\r\n \r\n void initialize_process_message()\r\n {\r\n     if (const auto val{std::getenv(\"LIMIT_TO_MESSAGE_TYPE\")}) {\r\n         LIMIT_TO_MESSAGE_TYPE = val;\r\n-        Assert(std::count(getAllNetMessageTypes().begin(), getAllNetMessageTypes().end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\r\n+        Assert(std::count(g_all_net_message_types.begin(), g_all_net_message_types.end(), LIMIT_TO_MESSAGE_TYPE)); // Unknown message type passed\r\n     }\r\n \r\n     static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(\r\n             /*chain_type=*/ChainType::REGTEST,\r\n             /*extra_args=*/{\"-txreconciliation\"});\r\n     g_setup = testing_setup.get();\r\n```\r\n</details>",
      "commit_id" : "0341129ed1023576f04786d863a74682b187fc06",
      "created_at" : "2023-11-22T14:40:22Z",
      "diff_hunk" : "@@ -90,6 +92,10 @@ const static std::vector<std::string> g_all_net_message_types{\n     NetMsgType::SENDTXRCNCL,\n };\n \n+static_assert(NUM_NET_MESSAGE_TYPES == sizeof(allNetMessageTypes) / sizeof(allNetMessageTypes[0]), \"Please update NUM_NET_MESSAGE_TYPES\");\n+\n+const static std::vector<std::string> allNetMessageTypesVec(std::begin(allNetMessageTypes), std::end(allNetMessageTypes));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28926#discussion_r1402168125",
      "id" : 1402168125,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII585Tk2M9",
      "original_commit_id" : "0341129ed1023576f04786d863a74682b187fc06",
      "original_line" : 97,
      "original_position" : 20,
      "original_start_line" : 95,
      "path" : "src/protocol.cpp",
      "position" : 20,
      "pull_request_review_id" : 1744577141,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28926",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402168125/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 95,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-11-22T14:45:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402168125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
