[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [ajtowns](https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1647790432) |\n| Stale ACK | [brunoerg](https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1644458046), [stratospher](https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1650820049), [amitiuttarwar](https://github.com/bitcoin/bitcoin/pull/28523#pullrequestreview-1651208768) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n",
      "created_at" : "2023-09-23T17:48:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1732374516",
      "id" : 1732374516,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28523",
      "node_id" : "IC_kwDOABII585nQe_0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732374516/reactions"
      },
      "updated_at" : "2023-09-29T22:03:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732374516",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "concept ACK. I think it makes sense to expose more info about the addrman internals to allow for better observations & tooling ",
      "created_at" : "2023-09-23T19:10:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1732390179",
      "id" : 1732390179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28523",
      "node_id" : "IC_kwDOABII585nQi0j",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732390179/reactions"
      },
      "updated_at" : "2023-09-23T19:10:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732390179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2023-09-24T09:43:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1732532598",
      "id" : 1732532598,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28523",
      "node_id" : "IC_kwDOABII585nRFl2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732532598/reactions"
      },
      "updated_at" : "2023-09-24T09:43:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1732532598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1335156026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335156026"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\n    const int bucket_count = from_tried ? ADDRMAN_TRIED_BUCKET_COUNT : ADDRMAN_NEW_BUCKET_COUNT;\r\n```",
      "commit_id" : "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "created_at" : "2023-09-24T10:06:28Z",
      "diff_hunk" : "@@ -838,6 +838,25 @@ std::vector<CAddress> AddrManImpl::GetAddr_(size_t max_addresses, size_t max_pct\n     return addresses;\n }\n \n+std::vector<std::tuple<int, int, AddrInfo>> AddrManImpl::GetEntries_(bool from_tried) const\n+{\n+    AssertLockHeld(cs);\n+\n+    const int bucket_count = (from_tried) ? ADDRMAN_TRIED_BUCKET_COUNT : ADDRMAN_NEW_BUCKET_COUNT;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1335156026",
      "id" : 1335156026,
      "line" : 845,
      "node_id" : "PRRC_kwDOABII585PlN06",
      "original_commit_id" : "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "original_line" : 845,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : 8,
      "pull_request_review_id" : 1641031644,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335156026/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-24T10:06:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335156026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1335166553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335166553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\r\n```",
      "commit_id" : "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "created_at" : "2023-09-24T11:41:37Z",
      "diff_hunk" : "@@ -1014,52 +1015,105 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in a address manager table ( new_table, tried_table )\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1335166553",
      "id" : 1335166553,
      "line" : 1054,
      "node_id" : "PRRC_kwDOABII585PlQZZ",
      "original_commit_id" : "48dfc81e7e1e6ecdccb4a165a292bb4c8cf96fbd",
      "original_line" : 1054,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 91,
      "pull_request_review_id" : 1641040890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335166553/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-24T11:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1335166553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "- addressed @brunoerg's review\r\n- included  https://github.com/bitcoin/bitcoin/pull/27511#discussion_r1335084087 as I'm touching the line anyway\r\n\r\n\r\nI've also been hacking on a tool that visualizes addrman tables from the getaddrmaninfo verbose output in the browser. A wip version is on https://0xb10c.github.io/addrman-observer ([github.com/0xB10C/addrman-observer](https://github.com/0xB10C/addrman-observer)). You can load dumps produced with `bitcoin-cli getaddrmaninfo true > getaddrmaninfo.json` (all processing happens locally).\r\n\r\n",
      "created_at" : "2023-09-25T12:24:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1733608639",
      "id" : 1733608639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28523",
      "node_id" : "IC_kwDOABII585nVMS_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1733608639/reactions"
      },
      "updated_at" : "2023-09-25T12:24:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1733608639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1337253953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337253953"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 56adcf42805b3007b66396754a9e5dcd0968d027: We could add the 'verbose' example for the RPC.\r\n```suggestion\r\n            + HelpExampleRpc(\"getaddrmaninfo\", \"\")},\r\n            + HelpExampleRpc(\"getaddrmaninfo\", \"true\")}\r\n```",
      "commit_id" : "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "created_at" : "2023-09-26T13:55:01Z",
      "diff_hunk" : "@@ -1014,52 +1015,105 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1337253953",
      "id" : 1337253953,
      "line" : 1071,
      "node_id" : "PRRC_kwDOABII585PtOBB",
      "original_commit_id" : "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "original_line" : 1071,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 108,
      "pull_request_review_id" : 1644341592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337253953/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-26T13:55:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337253953",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1337326653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337326653"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In da44fd3e499ca53242332ef9cb2907ec31fce1e3: I think we could addresses from other networks (e.g tor) to test it as well.",
      "commit_id" : "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "created_at" : "2023-09-26T14:39:12Z",
      "diff_hunk" : "@@ -386,5 +391,70 @@ def test_getaddrmaninfo(self):\n             assert_equal(res[net][\"tried\"], 0)\n             assert_equal(res[net][\"total\"], 0)\n \n+        self.log.debug(\n+            \"Test that verbose keys are not in the default getaddrmaninfo\")\n+        assert \"new_table\" not in res\n+        assert \"tried_table\" not in res\n+\n+        self.log.info(\"Test getaddrmaninfo verbose = True\")\n+        res = node.getaddrmaninfo(verbose=True)\n+\n+        # we expect one addrman new table entry added in a previous test\n+        assert_equal(len(res[\"new_table\"]), 1)\n+        assert_equal(len(res[\"new_table\"]), res[\"all_networks\"][\"new\"])\n+        assert_equal(res[\"new_table\"][0][\"address\"], \"2.0.0.0:8333\")\n+        assert_equal(res[\"new_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"new_table\"][0][\"source\"], \"2.0.0.0\")\n+        assert 0 <= res[\"new_table\"][0][\"bucket\"] < ADDRMAN_NEW_BUCKET_COUNT\n+        assert 0 <= res[\"new_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        # we expect one addrman tried table entry added in a previous test\n+        assert_equal(len(res[\"tried_table\"]), 1)\n+        assert_equal(len(res[\"tried_table\"]), res[\"all_networks\"][\"tried\"])\n+        assert_equal(res[\"tried_table\"][0][\"address\"], \"1.2.3.4:8333\")\n+        assert_equal(res[\"tried_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"tried_table\"][0][\"source\"], \"1.2.3.4\")\n+        assert 0 <= res[\"tried_table\"][0][\"bucket\"] < ADDRMAN_TRIED_BUCKET_COUNT\n+        assert 0 <= res[\"tried_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        self.log.debug(\"Add one new address to each addrman table\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1337326653",
      "id" : 1337326653,
      "line" : 420,
      "node_id" : "PRRC_kwDOABII585Ptfw9",
      "original_commit_id" : "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "original_line" : 420,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/rpc_net.py",
      "position" : 42,
      "pull_request_review_id" : 1644463026,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337326653/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-26T14:39:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1337326653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1338934464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338934464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done!",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-27T17:03:52Z",
      "diff_hunk" : "@@ -1014,52 +1015,105 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1338934464",
      "id" : 1338934464,
      "in_reply_to_id" : 1337253953,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585PzoTA",
      "original_commit_id" : "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "original_line" : 1071,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1647192779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338934464/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-27T17:03:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338934464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1338939771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338939771"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "will do if I re-touch the tests",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-27T17:08:25Z",
      "diff_hunk" : "@@ -386,5 +391,70 @@ def test_getaddrmaninfo(self):\n             assert_equal(res[net][\"tried\"], 0)\n             assert_equal(res[net][\"total\"], 0)\n \n+        self.log.debug(\n+            \"Test that verbose keys are not in the default getaddrmaninfo\")\n+        assert \"new_table\" not in res\n+        assert \"tried_table\" not in res\n+\n+        self.log.info(\"Test getaddrmaninfo verbose = True\")\n+        res = node.getaddrmaninfo(verbose=True)\n+\n+        # we expect one addrman new table entry added in a previous test\n+        assert_equal(len(res[\"new_table\"]), 1)\n+        assert_equal(len(res[\"new_table\"]), res[\"all_networks\"][\"new\"])\n+        assert_equal(res[\"new_table\"][0][\"address\"], \"2.0.0.0:8333\")\n+        assert_equal(res[\"new_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"new_table\"][0][\"source\"], \"2.0.0.0\")\n+        assert 0 <= res[\"new_table\"][0][\"bucket\"] < ADDRMAN_NEW_BUCKET_COUNT\n+        assert 0 <= res[\"new_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        # we expect one addrman tried table entry added in a previous test\n+        assert_equal(len(res[\"tried_table\"]), 1)\n+        assert_equal(len(res[\"tried_table\"]), res[\"all_networks\"][\"tried\"])\n+        assert_equal(res[\"tried_table\"][0][\"address\"], \"1.2.3.4:8333\")\n+        assert_equal(res[\"tried_table\"][0][\"services\"], 9)\n+        assert_equal(res[\"tried_table\"][0][\"source\"], \"1.2.3.4\")\n+        assert 0 <= res[\"tried_table\"][0][\"bucket\"] < ADDRMAN_TRIED_BUCKET_COUNT\n+        assert 0 <= res[\"tried_table\"][0][\"position\"] < ADDRMAN_BUCKET_SIZE\n+\n+        self.log.debug(\"Add one new address to each addrman table\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1338939771",
      "id" : 1338939771,
      "in_reply_to_id" : 1337326653,
      "line" : 420,
      "node_id" : "PRRC_kwDOABII585Pzpl7",
      "original_commit_id" : "da44fd3e499ca53242332ef9cb2907ec31fce1e3",
      "original_line" : 420,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/rpc_net.py",
      "position" : 42,
      "pull_request_review_id" : 1647199802,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338939771/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-27T17:08:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1338939771",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339430595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339430595"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`getnodeaddresses` separates this into `address` and `port`; does it make sense to be different here?\r\n\r\n`getnodeaddresses` also includes the last seen time which seems like it might be useful?",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T02:09:31Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339430595",
      "id" : 1339430595,
      "line" : 1057,
      "node_id" : "PRRC_kwDOABII585P1hbD",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1057,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 94,
      "pull_request_review_id" : 1647790432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339430595/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T02:52:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339430595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339444441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339444441"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could substantially reduce the size of the json output (by about 20%) by changing this to:\r\n\r\n```json\r\n{\r\n  \"new_table\": {\r\n    \"0/2\": {\r\n      \"address\": \"89.78.111.197:8333\",\r\n      \"services\": 1037,\r\n      \"source\": \"34.126.67.135\"\r\n    },\r\n    \"0/5\": {\r\n      \"address\": \"13.228.211.83:8333\",\r\n      \"services\": 1033,\r\n      \"source\": \"34.126.67.135\"\r\n    }\r\n}\r\n```",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T02:33:38Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339444441",
      "id" : 1339444441,
      "line" : 1060,
      "node_id" : "PRRC_kwDOABII585P1kzZ",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1060,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 97,
      "pull_request_review_id" : 1647790432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339444441/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T02:52:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339444441",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339450561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339450561"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Add\r\n\r\n```c++\r\nTMPL_INST(CheckRequiredOrDefault, bool, CHECK_NONFATAL(maybe_arg)->get_bool(););\r\n```\r\n\r\nin rpc/util.cpp and this becomes `const bool verbose = self.Arg<bool>(0);`  (see #28230)",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T02:44:32Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            NodeContext& node = EnsureAnyNodeContext(request.context);\n+            if (!node.addrman) {\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n+            }\n+\n+            bool verbose = false;\n+            if (!request.params[0].isNull()) {\n+                verbose = request.params[0].get_bool();\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339450561",
      "id" : 1339450561,
      "line" : 1083,
      "node_id" : "PRRC_kwDOABII585P1mTB",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1083,
      "original_position" : 120,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 120,
      "pull_request_review_id" : 1647790432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339450561/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T02:52:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339450561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339454178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339454178"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We have `getmempoolinfo` that gives statistics about the mempool and `getrawmempool` that gives the contents of the mempool; wouldn't it make more sense to mirror that arrangement and have two separate RPCs here as well?",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T02:50:50Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            NodeContext& node = EnsureAnyNodeContext(request.context);\n+            if (!node.addrman) {\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n+            }\n+\n+            bool verbose = false;\n+            if (!request.params[0].isNull()) {\n+                verbose = request.params[0].get_bool();\n+            }\n+\n+            UniValue ret(UniValue::VOBJ);\n+            for (int n = 0; n < NET_MAX; ++n) {\n+                enum Network network = static_cast<enum Network>(n);\n+                if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n+                UniValue obj(UniValue::VOBJ);\n+                obj.pushKV(\"new\", node.addrman->Size(network, true));\n+                obj.pushKV(\"tried\", node.addrman->Size(network, false));\n+                obj.pushKV(\"total\", node.addrman->Size(network));\n+                ret.pushKV(GetNetworkName(network), obj);\n+            }\n+            UniValue obj(UniValue::VOBJ);\n+            obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n+            obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n+            obj.pushKV(\"total\", node.addrman->Size());\n+            ret.pushKV(\"all_networks\", obj);\n+\n+            if (verbose) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339454178",
      "id" : 1339454178,
      "line" : 1101,
      "node_id" : "PRRC_kwDOABII585P1nLi",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1101,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 138,
      "pull_request_review_id" : 1647790432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339454178/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T02:52:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339454178",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339867604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339867604"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not a fan of representing two integers as string in JSON key and having downstream figure out how to parse it. However, why not do\r\n\r\n```\r\n\"table\": {\r\n  bucket: {\r\n    position: {\r\n      \"address\": \"13.228.211.83:8333\",\r\n      \"services\": 1033,\r\n      \"source\": \"34.126.67.135\"\r\n    },\r\n  }\r\n}\r\n```\r\nwhere `bucket` and `position` are integer keys.\r\n\r\n ",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T10:06:59Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339867604",
      "id" : 1339867604,
      "in_reply_to_id" : 1339444441,
      "line" : 1060,
      "node_id" : "PRRC_kwDOABII585P3MHU",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1060,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 97,
      "pull_request_review_id" : 1648384145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339867604/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T10:06:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339867604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339908447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339908447"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it'd be nice to have some sort of named struct instead of using `std::vector<std::tuple<int, int, AddrInfo>>` several times, including from the callers. Especially since having two `int` fields means it's easy for callers to mix up. \r\n\r\nI wonder if it could make sense to use the `AddressPosition` struct defined in `addrman.h`. It's not a perfect mapping, but it's currently only used in the tests, and it seems fine to add the additional info from `AddrInfo` to it to pass to the RPC. that could generally be cleaner, but might be overkill. \r\n\r\nAlternatively just the bucket & position could be pulled out into a small struct (similar to `NewTriedCount`), and that can be used in this tuple. ",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T10:39:25Z",
      "diff_hunk" : "@@ -1199,6 +1218,15 @@ std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct,\n     return addresses;\n }\n \n+std::vector<std::tuple<int, int, AddrInfo>> AddrManImpl::GetEntries(bool from_tried) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339908447",
      "id" : 1339908447,
      "line" : 1221,
      "node_id" : "PRRC_kwDOABII585P3WFf",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1221,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : 30,
      "pull_request_review_id" : 1648439139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339908447/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T10:39:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1339908447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1340008020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340008020"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "TIL UniValue doesn't support integer keys - only string keys. Still going with this as it's about a 15% size reduction with somewhat empty addrman tables. I assume even more space savings on a full addrman tables, as the `getaddrmaninfo verbose` output would contain more `bucket` keys.\r\n\r\n```\r\n$ ll getrawaddrman.json getaddrmaninfo_verbose.json -h\r\n-rw-r--r-- 1 user group 761K Sep 28 13:37 getrawaddrman.json\r\n-rw-r--r-- 1 user group 881K Sep 28 13:37 getaddrmaninfo_verbose.json\r\n```\r\n",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T11:53:49Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1340008020",
      "id" : 1340008020,
      "in_reply_to_id" : 1339444441,
      "line" : 1060,
      "node_id" : "PRRC_kwDOABII585P3uZU",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1060,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 97,
      "pull_request_review_id" : 1648607970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340008020/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T11:54:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340008020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1340186430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340186430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "JSON in general  doesn't support integer keys.\r\n\r\nNot a strong opinion, but there's two advantages of `\"0/5\":` vs `\"0\": {\"5\":` -- one is that if you don't care about the bucket/position, you can just skip through the values directly (`x.values()` vs `sum(x2.values() for x2 in x.values())`), the other is that bucket+position are pretty internal arrangements; if we end up with a different layout in the future, we can just map that to a different string template (eg \"0/5/2\") and only the people who care about the internals have to even notice the change.",
      "commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "created_at" : "2023-09-28T13:47:42Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1340186430",
      "id" : 1340186430,
      "in_reply_to_id" : 1339444441,
      "line" : 1060,
      "node_id" : "PRRC_kwDOABII585P4Z8-",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1060,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : 97,
      "pull_request_review_id" : 1648919768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340186430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-28T13:47:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1340186430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the helpful review comments @brunoerg @ajtowns @amitiuttarwar. I think I have addressed them all in the most recent push:\r\n\r\n- https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1337326653: I'm now adding an `onion` and an `ipv6` address (instead of two `ipv4`) to the addrman tables. There are already two IPv4 addresses in the addrman during the test.\r\n- https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339430595: Inspired by `getnodeaddresses` I added a `time`, `port`, `network`, and `source_network` field. This increases the response size. However, this is highly compressible if someone wants to store or serve it.\r\n- https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339444441: adopted the `<bucket>/<position>` key. I've implemented both discussed approaches and found `<bucket>/<position>` to be better. See commit message for details.\r\n- https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339454178: moved this out of `getaddrmaninfo verbose` and into a separate, hidden `getrawaddrman` RPC. This also means https://github.com/bitcoin/bitcoin/pull/27511#discussion_r1335084087 is not included anymore.\r\n- https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339908447: using `AddressPosition` in a `std::pair<AddrInfo, AddressPosition>` now. This should be easier to reason about than a `std::tuple<int, int, AddrInfo>`.\r\n\r\nI've also updated OP and the tool on https://0xb10c.github.io/addrman-observer.\r\n",
      "created_at" : "2023-09-29T09:56:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1740626821",
      "id" : 1740626821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28523",
      "node_id" : "IC_kwDOABII585nv9uF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740626821/reactions"
      },
      "updated_at" : "2023-09-29T09:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740626821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1341159511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341159511"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I choose to move to `getrawaddrman` instead of extending `getaddrmaninfo` with a verbose flag. https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1339454178. Resolving this as there's no need for it anymore.",
      "commit_id" : "45a84d19dec4953a71a744de0c1aac4a3a51c685",
      "created_at" : "2023-09-29T09:59:43Z",
      "diff_hunk" : "@@ -1014,52 +1015,107 @@ static RPCHelpMan sendmsgtopeer()\n     };\n }\n \n+UniValue AddrmanEntryToJSON(unsigned int bucket, unsigned int position, const AddrInfo& info)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"address\", info.ToStringAddrPort());\n+    ret.pushKV(\"services\", (uint64_t)info.nServices);\n+    ret.pushKV(\"bucket\", bucket);\n+    ret.pushKV(\"position\", position);\n+    ret.pushKV(\"source\", info.source.ToStringAddr());\n+    return ret;\n+}\n+\n static RPCHelpMan getaddrmaninfo()\n {\n     return RPCHelpMan{\"getaddrmaninfo\",\n-                      \"\\nProvides information about the node's address manager by returning the number of \"\n-                      \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n-                      \"This RPC is for testing only.\\n\",\n-                      {},\n-                      RPCResult{\n-                              RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n-                              {\n-                                      {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \")\",\n-                                       {\n-                                               {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n-                                               {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n-                                               {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n-                                       }},\n-                              }\n-                      },\n-                      RPCExamples{\n-                              HelpExampleCli(\"getaddrmaninfo\", \"\")\n-                              + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n-                      },\n-                      [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-                      {\n-                          NodeContext& node = EnsureAnyNodeContext(request.context);\n-                          if (!node.addrman) {\n-                              throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n-                          }\n-\n-                          UniValue ret(UniValue::VOBJ);\n-                          for (int n = 0; n < NET_MAX; ++n) {\n-                              enum Network network = static_cast<enum Network>(n);\n-                              if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-                              UniValue obj(UniValue::VOBJ);\n-                              obj.pushKV(\"new\", node.addrman->Size(network, true));\n-                              obj.pushKV(\"tried\", node.addrman->Size(network, false));\n-                              obj.pushKV(\"total\", node.addrman->Size(network));\n-                              ret.pushKV(GetNetworkName(network), obj);\n-                          }\n-                          UniValue obj(UniValue::VOBJ);\n-                          obj.pushKV(\"new\", node.addrman->Size(std::nullopt, true));\n-                          obj.pushKV(\"tried\", node.addrman->Size(std::nullopt, false));\n-                          obj.pushKV(\"total\", node.addrman->Size());\n-                          ret.pushKV(\"all_networks\", obj);\n-                          return ret;\n-                      },\n+        \"\\nProvides information about the node's address manager by returning the number of \"\n+        \"addresses in the `new` and `tried` tables and their sum for all networks.\\n\"\n+        \"When setting the verbose flag, the address manager entries for the new \"\n+        \"and tried table are also returned.\\n\"\n+        \"This RPC is for testing only.\\n\",\n+        {\n+            {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"True for a list of address manager entries by table, false for address counts only\"},\n+        },\n+        {\n+            RPCResult{\"for verbose = false\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type as keys\",\n+                {\n+                    {RPCResult::Type::OBJ, \"network\", \"the network (\" + Join(GetNetworkNames(), \", \") + \", all_networks )\", {\n+                        {RPCResult::Type::NUM, \"new\", \"number of addresses in the new table, which represent potential peers the node has discovered but hasn't yet successfully connected to.\"},\n+                        {RPCResult::Type::NUM, \"tried\", \"number of addresses in the tried table, which represent peers the node has successfully connected to in the past.\"},\n+                        {RPCResult::Type::NUM, \"total\", \"total number of addresses in both new/tried tables\"},\n+                    }},\n+                },\n+            },\n+            RPCResult{\"for verbose = true\", RPCResult::Type::OBJ_DYN, \"\", \"json object with network type, new_table and tried_table as keys\",\n+                {\n+                    {RPCResult::Type::ELISION, \"\", \"The same output as verbose = false\"},\n+                    {\n+                        RPCResult::Type::ARR, \"table\", \"list of addresses in the address manager table ( new_table, tried_table )\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"an address manager table entry\", {\n+                                {RPCResult::Type::STR, \"address\", \"the address\"},\n+                                {RPCResult::Type::NUM, \"services\", \"the services the node might support\"},\n+                                {RPCResult::Type::NUM, \"bucket\", \"the address manager bucket the address is placed in\"},\n+                                {RPCResult::Type::NUM, \"position\", \"the bucket position the address is placed in\"},\n+                                {RPCResult::Type::STR, \"source\", \"the address that relayed the address to us\"},\n+                            }},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getaddrmaninfo\", \"\")\n+            + HelpExampleCli(\"getaddrmaninfo\", \"true\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"\")\n+            + HelpExampleRpc(\"getaddrmaninfo\", \"true\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            NodeContext& node = EnsureAnyNodeContext(request.context);\n+            if (!node.addrman) {\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n+            }\n+\n+            bool verbose = false;\n+            if (!request.params[0].isNull()) {\n+                verbose = request.params[0].get_bool();\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1341159511",
      "id" : 1341159511,
      "in_reply_to_id" : 1339450561,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585P8HhX",
      "original_commit_id" : "4307c8c90b5deb282ffa1b8f899f7638b1a9c989",
      "original_line" : 1083,
      "original_position" : 120,
      "original_start_line" : null,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 1650463340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341159511/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T09:59:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341159511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1341389523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341389523"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "b7407bb: micro style nit, only if you retouch this commit for some reason - `s/position++/++position`\r\n",
      "commit_id" : "45a84d19dec4953a71a744de0c1aac4a3a51c685",
      "created_at" : "2023-09-29T13:48:53Z",
      "diff_hunk" : "@@ -838,6 +838,30 @@ std::vector<CAddress> AddrManImpl::GetAddr_(size_t max_addresses, size_t max_pct\n     return addresses;\n }\n \n+std::vector<std::pair<AddrInfo, AddressPosition>> AddrManImpl::GetEntries_(bool from_tried) const\n+{\n+    AssertLockHeld(cs);\n+\n+    const int bucket_count = from_tried ? ADDRMAN_TRIED_BUCKET_COUNT : ADDRMAN_NEW_BUCKET_COUNT;\n+    std::vector<std::pair<AddrInfo, AddressPosition>> infos;\n+    for (int bucket = 0; bucket < bucket_count; ++bucket) {\n+        for (int position = 0; position < ADDRMAN_BUCKET_SIZE; position++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1341389523",
      "id" : 1341389523,
      "line" : 848,
      "node_id" : "PRRC_kwDOABII585P8_rT",
      "original_commit_id" : "b7407bb7758089dea32acc9e94f31562b936e4e7",
      "original_line" : 848,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : 11,
      "pull_request_review_id" : 1650820049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341389523/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T15:30:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341389523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1341443044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341443044"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "45a84d1:\r\n```suggestion\r\n            \"\"\"Utility to compare a getrawaddrman result entry with an expected entry\"\"\"\r\n```\r\nsame suggestion for [L416](https://github.com/bitcoin/bitcoin/blob/45a84d19dec4953a71a744de0c1aac4a3a51c685/test/functional/rpc_net.py#L416) too.",
      "commit_id" : "45a84d19dec4953a71a744de0c1aac4a3a51c685",
      "created_at" : "2023-09-29T14:33:15Z",
      "diff_hunk" : "@@ -386,5 +392,115 @@ def test_getaddrmaninfo(self):\n             assert_equal(res[net][\"tried\"], 0)\n             assert_equal(res[net][\"total\"], 0)\n \n+    def test_getrawaddrman(self):\n+        self.log.info(\"Test getrawaddrman\")\n+        node = self.nodes[1]\n+\n+        self.log.debug(\"Test that getrawaddrman is a hidden RPC\")\n+        # It is hidden from general help, but its detailed help may be called directly.\n+        assert \"getrawaddrman\" not in node.help()\n+        assert \"getrawaddrman\" in node.help(\"getrawaddrman\")\n+\n+        def check_addr_information(result, expected):\n+            \"\"\"Utillity to compare an getrawaddrman result entry to a expected entry\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1341443044",
      "id" : 1341443044,
      "line" : 405,
      "node_id" : "PRRC_kwDOABII585P9Mvk",
      "original_commit_id" : "45a84d19dec4953a71a744de0c1aac4a3a51c685",
      "original_line" : 405,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "test/functional/rpc_net.py",
      "position" : 34,
      "pull_request_review_id" : 1650820049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28523",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341443044/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-29T15:30:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1341443044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addresses the comments and nits. Thanks @amitiuttarwar, @stratospher, and @ajtowns.",
      "created_at" : "2023-09-29T22:04:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28523#issuecomment-1741533993",
      "id" : 1741533993,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28523",
      "node_id" : "IC_kwDOABII585nzbMp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741533993/reactions"
      },
      "updated_at" : "2023-09-29T22:04:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741533993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   }
]
