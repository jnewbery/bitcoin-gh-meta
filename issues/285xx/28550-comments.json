[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#28528](https://github.com/bitcoin/bitcoin/pull/28528) (test: Use test framework utils in functional tests by osagie98)\n* [#28400](https://github.com/bitcoin/bitcoin/pull/28400) (Make provably unsignable standard P2PK and P2MS outpoints unspendable. by russeree)\n* [#28334](https://github.com/bitcoin/bitcoin/pull/28334) (policy: Allow non-standard scripts with -acceptnonstdtxn=1 by ajtowns)\n* [#27255](https://github.com/bitcoin/bitcoin/pull/27255) (MiniTapscript: port Miniscript to Tapscript by darosior)\n* [#26840](https://github.com/bitcoin/bitcoin/pull/26840) (refactor: importpubkey, importprivkey, importaddress, importmulti, and importdescriptors rpc by KolbyML)\n* [#26762](https://github.com/bitcoin/bitcoin/pull/26762) (bugfix: Make `CCheckQueue` RAII-styled (attempt 2) by hebasto)\n* [#26711](https://github.com/bitcoin/bitcoin/pull/26711) (validate package transactions with their in-package ancestor sets by glozow)\n* [#26201](https://github.com/bitcoin/bitcoin/pull/26201) (Remove Taproot activation height by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-09-28T18:42:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1739834384",
      "id" : 1739834384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585ns8QQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1739834384/reactions"
      },
      "updated_at" : "2023-09-29T21:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1739834384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> [vaults](https://bitcoinops.org/en/topics/vaults/) (reactive custodial security),\r\n> [LN-Symmetry](https://bitcoinops.org/en/topics/eltoo/),\r\n> efficient implementations of [DLCs](https://bitcoinops.org/en/topics/discreet-log-contracts/),\r\n> [non-interactive channel openings](https://utxos.org/uses/non-interactive-channels/),\r\n> [congestion control](https://utxos.org/uses/scaling/),\r\n> decentralized mining pools (via [CTV compression in coinbase payouts](https://utxos.org/uses/miningpools/)),\r\n> various [Lightning efficiency improvements](https://twitter.com/roasbeef/status/1692589689939579259),\r\n> using [covenant based timeout-trees](https://bitcoinops.org/en/newsletters/2023/09/27/) to scale Lightning, and more generally enabling [channel factories](https://bitcoinops.org/en/topics/channel-factories/).\r\n\r\nIf we can have an end-to-end proof-of-concept implementation of each use-case brought as a justification to the proposed soft-forked opcodes. Otherwise itâs quite impossible to provide a sound technical review of the primitives robustness and trade-offs and state what they enable exactly. And it sounds weâre good to repeat the loop of the last 3 or 4 years of covenants discussions.\r\n\r\nAs a reminder, just to take the last example of channel factories, most of the folks who have done *real* research on the subject still disagree on the security model and fundamental trade-off of the proposed design of channel factories.\r\n\r\nAs one of my technical peer challenged on the [mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html) few months ago:\r\n\r\n\"So I think that means that part of the \"evaluation phase\" should involve\r\nimplementing real systems on top of the proposed change, so that you\r\ncan demonstrate real value from the change. It's easy to say that\r\n\"CTV can enable vaults\" or \"CTV can make opening a lightning channel\r\nnon-interactive\" -- but it's harder to go from saying something\r\nis possible to actually making it happen, so, at least to me, it\r\nseems reasonable to be skeptical of people claiming benefits without\r\ndemonstrating they're achievable in practice.â\r\n\r\nIâm fully sharing this opinion.",
      "created_at" : "2023-09-29T00:18:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1740149971",
      "id" : 1740149971,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nuJTT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 2,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740149971/reactions"
      },
      "updated_at" : "2023-09-29T00:18:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740149971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> If we can have an end-to-end proof-of-concept implementation of each use-case brought as a justification to the proposed soft-forked opcodes. Otherwise itâs quite impossible to provide a sound technical review of the primitives robustness and trade-offs and state what they enable exactly.\r\n\r\nHaving some code that works in proof-of-concept mode is not proof that it works in the real world at all. A theoretical description of a use case that contemplates all scenarios is worth a million times more.\r\n\r\nAlso it's a weird inverted criteria to say that a proposal that enables 20+ use cases is considered _worse_ because it only has ~5 actually implemented (because that's only 25%) while some a proposal that has (say) 1 use case is considered better just because it has that single use case implemented (100%). It should be the opposite. By that rationale every new use case someone comes up with for a proposal now counts negatively against that proposal?",
      "created_at" : "2023-09-29T12:44:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1740840515",
      "id" : 1740840515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nwx5D",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 4,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 2,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 6,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740840515/reactions"
      },
      "updated_at" : "2023-09-29T12:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740840515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1653275?v=4",
         "events_url" : "https://api.github.com/users/fiatjaf/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fiatjaf/followers",
         "following_url" : "https://api.github.com/users/fiatjaf/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fiatjaf/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fiatjaf",
         "id" : 1653275,
         "login" : "fiatjaf",
         "node_id" : "MDQ6VXNlcjE2NTMyNzU=",
         "organizations_url" : "https://api.github.com/users/fiatjaf/orgs",
         "received_events_url" : "https://api.github.com/users/fiatjaf/received_events",
         "repos_url" : "https://api.github.com/users/fiatjaf/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fiatjaf/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fiatjaf/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fiatjaf"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it would be worth moving most conceptual discussion to the [Delving Bitcoin thread](https://delvingbitcoin.org/t/covenant-tools-softfork/98) to avoid blasting the already-burdened Github notifications of contributors here.",
      "created_at" : "2023-09-29T13:26:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1740896155",
      "id" : 1740896155,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nw_eb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740896155/reactions"
      },
      "updated_at" : "2023-09-29T13:26:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1740896155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Having some code that works in proof-of-concept mode is not proof that it works in the real world at all. A theoretical description of a use case that contemplates all scenarios is worth a million times more.\r\n\r\nNo, politely I think your statement is a non-sense. There is no common criteria which is accepted among the bitcoin developers, neither the community on what constitute a valid âtheoretical descriptionâ. For some a sufficient description will be a mathematical formalization of the game-theory of the use-case (e.g the [chapter 11 âcalculations of the original bitcoin paper on miner incentives](https://bitcoin.org/bitcoin.pdf)). For others a proof-of-concept of code is the âtheoreticalâ description in itself (e.g bitcoin core libbitcoinkernel is _a_ definition of consensus rules). For few more people a theoretical description wonât be complete without a security proof as understood under some assumption (e.g the DL assumption) or models. E.g Taproot has a security proof: https://github.com/apoelstra/taproot\r\n\r\nIn fact I think theyâre all âvalidâ description and completing each other, i.e describing more accurately a use-case. Proof-of-concepts, experiments and formalized or logical description have hundreds of years of successful tracks records in the field of civil, mechanical and software engineering.\r\n\r\nAs a reminder, Bitcoin is a $500B ecosystem relied on as a critical infrastructure in the daily life of people in emerging countries or war zones. As a technical community, if we have a sincere wish to see this system survives on decades-long perspectives, and being kept relied on, we should bind to the highest engineering standards, or at the least do not downgrade on development standards which have been setup in the past, e.g with the taproot design, review & implementation process.\r\n\r\nIâm still stunned when I see some parts of the community and even experienced developers falling back to shamanism, twitter pow-wow and seed-startup-pitch-deck as a design process in matters of advances in consensus changes.\r\n\r\n> Also it's a weird inverted criteria to say that a proposal that enables 20+ use cases is considered worse because it only has > ~5 actually implemented (because that's only 25%) while some a proposal that has (say) 1 use case is considered better\r\n> just because it has that single use case implemented (100%). It should be the opposite. By that rationale every new use\r\n> case someone comes up with for a proposal now counts negatively against that proposal?\r\n\r\nMy thanks if you can propose a demonstration that proposal XYZ _is_ enabling the said-so 20+ use cases, without scalability bottleneck or cheap to exploit security issue. As a reminder, the original designer or team of designers of Bitcoin introduces the infamous [OP_VER](https://bitcoin.stackexchange.com/questions/97258/given-op-ver-was-never-used-is-disabled-and-not-considered-useful-can-its-meani) opcode in the early versions of the client, without understanding it could provoke consensus partitioning between network agents. I believe we should stay very humble that we understand Bitcoin or Lightning _that_ good.\r\n\r\nAny use-case can introduce a coupling between layers and this is quite documented by the IETF (see [RFC 3439](https://www.rfc-editor.org/rfc/rfc3439#section-2.2.2)). As a matter of personal experience, one of the reason to disregard the original stakes certificates (cf. [2020 lightning mail list](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-November/002884.html) was the concern of introducing unpredictable and spurious network mempools congestion spikes, as a solution to channel jamming. There is no free lunch.\r\n\r\nPersonally, Iâm fine if we donât have covenants soft-forks during the next 10 year, despite the personal interest in numerous use-cases brought or enhanced by covenant primitives. Itâs not like weâre lacking of heavy changes to harden Bitcoin, lower the computational costs for full-nodes or make it more usable to the end-user.\r\n\r\nAll Bitcoin needs to do to succeed on the long term is _just_ to survive and itâs already ambitious. No more. Consensus fundamentals are okay.",
      "created_at" : "2023-09-29T22:16:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1741542233",
      "id" : 1741542233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nzdNZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741542233/reactions"
      },
      "updated_at" : "2023-09-29T22:16:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741542233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think it would be worth moving most conceptual discussion to the [Delving Bitcoin thread](https://delvingbitcoin.org/t/covenant-tools-softfork/98) to avoid blasting the already-burdened Github notifications of contributors here.\r\n\r\nAnswering here as Iâll figure out later how to do the connect.\r\n\r\n> Vaults\r\n> opvault-demo: [GitHub - jamesob/opvault-demo: An example wallet using OP_VAULT](https://github.com/jamesob/opvault-> demo/)\r\n> simple-ctv-vault: [GitHub - jamesob/simple-ctv-vault: A simple vault structure using OP_CTV]\r\n> (https://github.com/jamesob/simple-ctv-vault)\r\n\r\nVaults can be done today with pre-signed transactions, even if the trade-offs are different itâs a practical construction. I still have the huge concern than âprocess fatigueâ and operational complexity of vaults are too high, even to be swallowed by professional self-custody teams with $1B+ under management.\r\n\r\nIf the wish is to improve self-custody of the Bitcoin end-users in the near-term, highest yielding fruit sounds things like n-of-m frost and taproot timelocked backup branches. The later already introducing difficulty of fee-bumping management for wallets.\r\n\r\n> LN-symmetry\r\n\r\nI think the state of the discussion about lightning eltoo was this one https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-December/003788.html. I donât know if a clear comparative analysis of all the eltoo designs (ln-symmetry, daric, original eltoo) has been done, especially on the question of watchtower.\r\n\r\n> DLC efficiency improvements ([spec](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019808.html)), are so straightforward that a demo implementation doesnât seem prerequisite to seeing the value of CTV as a primitive.\r\n\r\nFalse, this is space-time trade-off as you have know to bear extended witness space cost as a routing node (taproot logarithm perf), if the DLC goes on-chain, and as such the level of fee-bumping you have to maintain.\r\n\r\nIf we care about as a community about covenants and advanced contracting protocols, I really think we should put on the table the great consensus cleanup: https://github.com/bitcoin/bitcoin/pull/15482 and clean current consensus tech debt. You donât wanna miners launch timewarp attacks to pwn your $$$ vaults in a post-subsidy world. I wonât champion it in the near future, though more willing spend review time on a great consensus cleanup softfork.",
      "created_at" : "2023-09-29T22:38:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1741554330",
      "id" : 1741554330,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28550",
      "node_id" : "IC_kwDOABII585nzgKa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741554330/reactions"
      },
      "updated_at" : "2023-09-29T22:47:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1741554330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
