[
   {
      "author_association" : "MEMBER",
      "body" : "> The way I would like range checking to work in the future would be to rely more on C++ types and `std::numeric_limits`.\r\n\r\nConcept ACK.",
      "created_at" : "2021-09-25T12:32:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-927114728",
      "id" : 927114728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
      "node_id" : "IC_kwDOABII5843QqXo",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-25T12:32:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927114728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Possibly related: https://github.com/bitcoin/bitcoin/issues/23843",
      "created_at" : "2022-01-03T14:38:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1004136876",
      "id" : 1004136876,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
      "node_id" : "IC_kwDOABII58472ems",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004136876/reactions"
      },
      "updated_at" : "2022-01-03T14:38:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004136876",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Had a go at revisiting this with #26177 in mind. Here's a branch, https://github.com/ajtowns/bitcoin/commits/202209-chainstate-argsman-types and here's [an example](https://github.com/ajtowns/bitcoin/blob/08ebff304747ff9386cd4c6048fc4fc9a9301877/src/chainparams.cpp#L94) of what it might look like:\r\n\r\n```c++\r\nclass SigNetOptionsRegistration\r\n{\r\npublic:\r\n    using T = CChainParams::SigNetOptions;\r\n\r\n    static inline void GetChallenge(std::vector<uint8_t>& challenge, const std::string& hex)\r\n    {\r\n        challenge = ParseHex(hex);\r\n    }\r\n\r\n    template<typename C, typename Op>\r\n    static inline void Register(Op& op)\r\n    {\r\n        return C::Do(op,\r\n            C::Defn(&T::challenge, GetChallenge, \"-signetchallenge\", \"\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS),\r\n            C::Defn(&T::seeds, \"-signetseednode\", \"\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS)\r\n        );\r\n    }\r\n};\r\n...\r\nvoid RegisterChainParamsOptions(ArgsManager& args)\r\n{\r\n    SettingsRegister<SigNetOptionsRegistration>::Register(args);\r\n    SettingsRegister<RegTestOptionsRegistration>::Register(args);\r\n}\r\n\r\nCChainParams::SigNetOptions GetSigNetOptions(const ArgsManager& args)\r\n{\r\n    return SettingsRegister<SigNetOptionsRegistration>::Get(args);\r\n}\r\n```\r\n\r\nIdea is you make a container for the options (`T = SigNetOptions`), provide a `Register` function that associates the options with the field in that structure (and a conversion function like `GetChallenge` if needed), then use `SettingsRegister<>::Register(args)` to register the args, then parse them, then get the results with `SettingsRegister<>::Get(args)`, and you're done.\r\n",
      "created_at" : "2022-09-28T02:33:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1260310040",
      "id" : 1260310040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
      "node_id" : "IC_kwDOABII585LHs4Y",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260310040/reactions"
      },
      "updated_at" : "2022-09-28T02:33:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260310040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Had a go at revisiting this with #26177 in mind. Here's a branch, https://github.com/ajtowns/bitcoin/commits/202209-chainstate-argsman-types and here's [an example](https://github.com/ajtowns/bitcoin/blob/08ebff304747ff9386cd4c6048fc4fc9a9301877/src/chainparams.cpp#L94) of what it might look like:\r\n\r\n@ryanofsky I've updated this (and switched it to the `UpdateFooOpts(args, options)` style instead of `options = GetFooOpts(args)`) in https://github.com/ajtowns/bitcoin/pull/8 if you (or anyone else) are interested in bikeshedding it towards a concept/approach ack?\r\n",
      "created_at" : "2023-08-23T09:27:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1689609240",
      "id" : 1689609240,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
      "node_id" : "IC_kwDOABII585ktWQY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1689609240/reactions"
      },
      "updated_at" : "2023-08-23T09:27:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1689609240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ryanofsky I've updated this (and switched it to the `UpdateFooOpts(args, options)` style instead of `options = GetFooOpts(args)`) in [ajtowns#8](https://github.com/ajtowns/bitcoin/pull/8) if you (or anyone else) are interested in bikeshedding it towards a concept/approach ack?\r\n\r\nLooks nice. It seems similar to your NetSettings example above, https://github.com/bitcoin/bitcoin/issues/22978#issue-996573480, but much better now because it now works on plain options structs like DBOptions, CoinsViewOptions, wallet::DatabaseOptions, and no longer requires the structs to contain argument parsing code (if I understand the commented out example from 7cb67a694e82c52b71ec86d23cb574465f9aad22 correctly). \r\n\r\nI'm still not sure I like the idea of encouraging all options to be stored in separate structs. I think that idea makes most sense for options that are used once at initialization time, since they can be parsed into the `ArgsManager::m_settings` map, then copied into the struct, and we never have to care about what happens after that. But if we added an RPC or GUI interface for changing settings at runtime and validating them and applying them and storing them in `settings.json` then it would be probably be simpler without the structs, because `ArgsManager::m_settings` would be the canonical place where settings are stored, and there wouldn't be external structs that need to be updated.\r\n\r\nIn any case, I think your idea makes an improvement over the status quo by adding compile time checks. And it could probably be generalized latter to support an API more similar to the description https://github.com/bitcoin/bitcoin/issues/22978#issue-996573480 where settings can be retrieved in a type-safe way agnostic to how they are stored.",
      "created_at" : "2023-08-24T16:45:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1692058109",
      "id" : 1692058109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
      "node_id" : "IC_kwDOABII585k2sH9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1692058109/reactions"
      },
      "updated_at" : "2023-08-24T16:45:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1692058109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> (if I understand the commented out example from https://github.com/bitcoin/bitcoin/commit/7cb67a694e82c52b71ec86d23cb574465f9aad22 correctly).\r\n\r\nI think you do; the `-fastprune` option in https://github.com/ajtowns/bitcoin/pull/8/commits/dddfbead90fc7b121b3a6870d546e9881eb5278a is a non-commented-out example where parsing isn't needed, if that helps?\r\n\r\n> I'm still not sure I like the idea of encouraging all options to be stored in separate structs.\r\n\r\nI'm thinking of that more as \"we want our code to be modular, and to avoid globals, so we should have our options in structs (to avoid globals), and there should be separate ones per module (to be, well, modular)\". ie, I'm not really thinking about it as \"where they're stored\" but more as syntax to keep things tidier?\r\n\r\n> But if we added an RPC or GUI interface for changing settings at runtime and validating them and applying them and storing them in `settings.json` then it would be probably be simpler without the structs, because `ArgsManager::m_settings` would be the canonical place where settings are stored, and there wouldn't be external structs that need to be updated.\r\n\r\nI think external structs with \"native\" types are desirable where we either care about performance (no need to lock argsmanager and do string parsing all the time) or want to have the code be independent of our argument parsing (ie libkernel, but maybe also unit/fuzz tests?). For cases like that, even if we want to be able to update the options at runtime, just calling `ReadFooArgs(argsman, fooman.options)` when argsman has been updated seems feasible?\r\n\r\nFor cases where you can talk to `argsman` directly, then I guess the idea would be to replace `bool b = argsman.GetBool(\"-disablewallet\")` with something like `bool b = WalletSettings(argsman).disablewallet.Get()`, where `WalletSettings` is some magic to let us define args per-module, which gives something that has members named after the option names, that then have typesafe getter/setters, with the setter updating settings.json...\r\n\r\nMaybe something like:\r\n\r\n```c++\r\nclass Magic { public: ArgsManager& argsman; ... };\r\n\r\ntemplate<typename T>\r\nclass MagicOption {\r\nprivate:\r\n    ArgsManager& argsman;\r\n    const std::string name;\r\npublic:\r\n    MagicOption(ArgsManager& argsman, std::string name, std::string desc) : argsman{argsman}, name{name} {\r\n        argsman.AddTypedArg<T>(name, desc);\r\n    }\r\n    T Get() { return argsman.Get<T>(name); }\r\n    void Set(T value) { argsman.Set<T>(name, value); }\r\n};\r\n\r\nclass WalletArgs : public Magic\r\n{\r\n    explicit WalletArgsMan(ArgsManager& argsman) : Magic{argsman} { }\r\n    MagicOption<bool> disablewallet{argsman, \"-disablewallet\", \"Do not load the wal...\"}; // maybe add the settings.json key\r\n};\r\n\r\nWalletArgs walletargs{argsman}; // calls `AddArg<bool>` via `MagicOption` initialisation\r\n\r\nargsman.ParseParameters(...); // read the config file so that accessing the options is meaningful\r\n\r\nif (walletargs.disablewallet.Get()) { ... }\r\nwalletargs.disablewallet.Set(false);\r\n```\r\n\r\ncould be made to work, eg?\r\n\r\n(In this scenario maybe you also want to be able to register callbacks so that `Set(...)` triggered by RPC causes UI elements to be updated?)\r\n\r\nSo to me that looks like a mostly independent problem that we could/should address independently or at least afterwards?\r\n\r\nThough, that said, having two different, complicated, ways of doing essentially the same things does annoy me...\r\n\r\nAnother approach to think about could be to go all-in on storing the settings natively, ie have just one place to store the settings data during runtime, but change that to being `bool WalletOptions::disablewallet;` not `argsman.GetBool(\"-disablewallet\")`. In that case we'd have functions like `UpdateWalletOptions(walletopts, argsman)` to read args, but could also have `SaveWalletOptions(walletopts, argsman)` to update settings.json. Then perhaps you'd just register `SaveWalletOptions` as a callback, and call those callbacks as part of `WriteSettingsFile()` ? Once you have callbacks, perhaps you could also have a `UpdateRuntimeWalletOptions(walletopts, argsman)` callback that allows you to reload `settings.json` at runtime.\r\n\r\n(The settings.json api confuses me -- we read/write it as a blob in ArgsManager, but the actual logic to get at values is in `node/interfaces.cpp`, and afaics there's no registration/documentation of what things can go in settings.json, and everything's done via `UniValue` so you have to manually type check when you access anyway)\r\n\r\n> In any case, I think your idea makes an improvement over the status quo by adding compile time checks.\r\n\r\nCool. I'm going to add some bikesheddy thoughts to the PR in a moment, if you have any to add feel free. I'll keep waiting on a 'concept ack' or similar there before opening a PR here though.",
      "created_at" : "2023-08-25T05:00:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22978#issuecomment-1692760425",
      "id" : 1692760425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22978",
      "node_id" : "IC_kwDOABII585k5Xlp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1692760425/reactions"
      },
      "updated_at" : "2023-08-25T05:00:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1692760425",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   }
]
