[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/28488#pullrequestreview-1635005891) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27837](https://github.com/bitcoin/bitcoin/pull/27837) (net: introduce block tracker to retry to download blocks after failure by furszy)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-09-15T09:28:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#issuecomment-1720966365",
      "id" : 1720966365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28488",
      "node_id" : "IC_kwDOABII585mk9zd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1720966365/reactions"
      },
      "updated_at" : "2023-09-20T08:41:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1720966365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1327103636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327103636"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This will always give you 1sat/vB (or whatever the static min relay feerate is). I assume you want the dynamic one?\r\n```suggestion\r\n    const auto our_min_feerate = m_mempool.GetMinFee();\r\n```",
      "commit_id" : "c3353c6aa3b546eaa153a03e99252ff9767a0c94",
      "created_at" : "2023-09-15T10:24:19Z",
      "diff_hunk" : "@@ -5194,6 +5197,65 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.m_min_relay_feerate.GetFeePerK());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1327103636",
      "id" : 1327103636,
      "line" : 5217,
      "node_id" : "PRRC_kwDOABII585PGf6U",
      "original_commit_id" : "c3353c6aa3b546eaa153a03e99252ff9767a0c94",
      "original_line" : 5217,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 38,
      "pull_request_review_id" : 1628658002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327103636/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-15T10:25:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327103636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1327169760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327169760"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It looks like this is backward? It seems you want to be disconnecting from peers with fee filters larger than our, but you are doing the opposite: disconnecting from the peer with the smallest fee filter (and therefore most likely the largest mempool).\r\n\r\nAnyways, i don't think we should base this on the value of the fee filter but rather on the guesstimated size of the peer's mempool.",
      "commit_id" : "c3353c6aa3b546eaa153a03e99252ff9767a0c94",
      "created_at" : "2023-09-15T11:37:48Z",
      "diff_hunk" : "@@ -5194,6 +5197,65 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.m_min_relay_feerate.GetFeePerK());\n+\n+    if (our_min_feerate == 0) return;\n+\n+    std::vector<std::pair<CNode*, CAmount>> peer_fee_filters;\n+\n+    size_t above_our_80_percent_fee_filter = 0;\n+\n+    m_connman.ForEachNode([&](CNode* pnode) {\n+        if (!pnode->IsFullOutboundConn() || pnode->fDisconnect) return;\n+        auto peer = GetPeerRef(pnode->GetId());\n+\n+        if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+            if (tx_relay->m_fee_filter_received) {\n+                peer_fee_filters.push_back(std::make_pair(pnode, tx_relay->m_fee_filter_received.load()));\n+            } else {\n+                ++above_our_80_percent_fee_filter;\n+            }\n+        }\n+    });\n+\n+    LogPrint(BCLog::NET, \"Filters? %i\\n\", peer_fee_filters.size() );\n+\n+    if (peer_fee_filters.size() == 0) return;\n+\n+    std::sort(peer_fee_filters.begin(), peer_fee_filters.end());\n+\n+    for (auto [node_id, fee_filter] : peer_fee_filters) {\n+        if (fee_filter == 0) ++above_our_80_percent_fee_filter;\n+        if (fee_filter >= our_min_feerate * 0.8) ++above_our_80_percent_fee_filter;;\n+    }\n+\n+    if (above_our_80_percent_fee_filter < 4) {\n+        // Drop one peer at a time to preserve a sufficient total\n+        // number of connections, and to avoid network DoS.\n+        // TODO add randomness chosing among low-feerate candidates.\n+        peer_fee_filters[0].first->fDisconnect = true;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1327169760",
      "id" : 1327169760,
      "line" : 5254,
      "node_id" : "PRRC_kwDOABII585PGwDg",
      "original_commit_id" : "c3353c6aa3b546eaa153a03e99252ff9767a0c94",
      "original_line" : 5254,
      "original_position" : 75,
      "original_start_line" : 5249,
      "path" : "src/net_processing.cpp",
      "position" : 75,
      "pull_request_review_id" : 1628762677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327169760/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 5249,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-09-15T11:39:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1327169760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@darosior `m_total_fee / totalTxSize` (instead of GetMinFee()) would kinda solve the example you point out, but it's not perfect either. I agree that what you suggest is ideal. I just haven't found a way to apply other peer's minfeerate to our mempool in a reasonable way.\r\nMaybe this:\r\n\r\nEvery time we consider evicting (say every hour), traverse through our mempool and apply the peer's minfeerate, then see how many transactions are dropped. (A slightly optimized way would be to use a binary search to find at what exact feerate we're at 80% of mempool size âÂ that would be faster, and also will better apply across peers).\r\n\r\nIs that roughly what you're thinking about?",
      "created_at" : "2023-09-18T07:21:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#issuecomment-1722871879",
      "id" : 1722871879,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28488",
      "node_id" : "IC_kwDOABII585msPBH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1722871879/reactions"
      },
      "updated_at" : "2023-09-18T07:21:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1722871879",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If that's not true, we should evict some high-minFeeRate outbound peers to make room for a new peer with hopefully broader limits.\r\n\r\nI think this is coming with the downside of dropping outbound peers, which might be otherwise stable and fast block-relay peers. If an adversary is able to discover our 8 full-relay peers and drop high-feerate _conflicting_  transactions in their mempools, weâll evict those peers, potentially opening new outbound slots to puppets controlled by the adversary.\r\n\r\nI donât know if a better direction would be to announce the local `maxmempool` at p2p connection, sounds this is less prone to manipulation by external peers flowing high-feerate transactions in a targeted fashion.",
      "created_at" : "2023-09-18T15:26:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#issuecomment-1723705521",
      "id" : 1723705521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28488",
      "node_id" : "IC_kwDOABII585mvaix",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1723705521/reactions"
      },
      "updated_at" : "2023-09-18T15:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1723705521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard \r\n>If an adversary is able to discover our 8 full-relay peers and drop high-feerate conflicting transactions in their mempools, weâll evict those peers, potentially opening new outbound slots to puppets controlled by the adversary.\r\n\r\nI'm not convinced this is a problem yet. If you assume an attacker can easily take `new outbound slots`, then our peers might belong to an attacker in the first place... Outbound peer eviction should not be too cheap (say, an attacker should not be able to roll a hundred of peers in a day), but for that I think algorithm can be tuned.\r\n\r\nI'm not 100% sure I understand your precise attack scenario. Let's say mempools are equal-size and half empty. What it will take for your attack to force at least one eviction? In fees and capital locked, I guess (dropping the spying effort for now).\r\n\r\n----------------\r\n\r\n>I donât know if a better direction would be to announce the local maxmempool at p2p connection, sounds this is less prone to manipulation by external peers flowing high-feerate transactions in a targeted fashion.\r\n\r\nDoesn't it have a similar risk? Feed those peers with high-feerate conflicts and they won't be able to accept txs from my mempool, even though everything seems fine? They won't be dropped, but the relay won't work, at the same cost.",
      "created_at" : "2023-09-19T06:33:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#issuecomment-1724907328",
      "id" : 1724907328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28488",
      "node_id" : "IC_kwDOABII585mz_9A",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1724907328/reactions"
      },
      "updated_at" : "2023-09-19T06:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1724907328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Outbound peer eviction should not be too cheap (say, an attacker should not be able to roll a hundred of peers in a day), but for that I think algorithm can be tuned.\r\n\r\nI think this is where in my mind this PR is affecting the reliability of our outbound peers topology, as `CheckForLimitedMempoolAndEvictPeers()` will kick out outbound peers with high-feerate every 60s so at max 1440 outbound peers per day. Assuming we have 50k reachable nodes in the network, it will take a month to browse the whole outbound peers space. If an adversary can control a minimal number of peers in this 50k set, it sounds after a bit more than a month our whole outbound peer topology could be controlled. I agree the algorithm can be fine tuned to slow down the peers worst-case roll up.\r\n\r\n> What it will take for your attack to force at least one eviction?\r\n\r\nWe assume 1 MB of max mempool size, both locally and for our outbound peers. The adversary broadcasts \"set A\" 500 parents at 1 sat/vb of size 100 KB (0.5 MB) in our outbound peers mempools, and then simulatenously broadcasts \"set Bâ 500 parents at 1 sat/vb of size 100 KB (0.5 MB), the 500 parents A conflicting with the 500 parents B. Then the adversary broadcast a \"set C\" of 500 child at 3 sat/vb of size 100  KB (0.5 MB) in our outbound peers mempools, and then simultaneously a \"set D\" of 500 child at 1 sat/vb of size 100 KB (0.5 MB).\r\n\r\nWhen the adversary broadcast one more transaction at 1 sat sat/vb, our outbound peers mempool min fee should jump to 2 sat/vb (descendant score of set A txn) and our local mempool min fee should jump to 1 sat/vb (`TrimToSize()`), our outbound peers will be disconnected due to high minFeeRate. Fees cost for the adfversary is in the order of 0.02 BTC if my maths are correct.\r\n\r\nI agree the cost for the adversary is significant if you assume outbound peers are using default setting (300 MB so 6 BTC), and might not be opportun unless you're eclipsing a high-loaded Lightning node's chain view. Still the interdependency if added, doesn't sounds great.\r\n\r\n> Doesn't it have a similar risk? Feed those peers with high-feerate conflicts and they won't be able to accept txs from my mempool, even though everything seems fine? \r\n\r\nWith this direction, you would only disconnect based on the `maxmempool` announced, not the seen fee filters. Of course, there is similar risk of transaction propagation issue interference, though at least you're not loosing full-relay peers that are good for the honesty of your chain view, I think.",
      "created_at" : "2023-09-19T14:40:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#issuecomment-1725781165",
      "id" : 1725781165,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28488",
      "node_id" : "IC_kwDOABII585m3VSt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1725781165/reactions"
      },
      "updated_at" : "2023-09-19T14:40:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1725781165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331221040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331221040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't get it why it is better to compare mempool sizes.\r\n\r\n* If the peer's minfee is larger than the tx fee, then the tx will be dropped by that peer (irrelevant of their mempool size)\r\n* If the peer's minfee is smaller than the tx fee, then the tx will be accepted by that peer (irrelevant of their mempool size).\r\n\r\nNo? I see how the mempool size affects minfee, but is it not minfee what we care about?",
      "commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "created_at" : "2023-09-20T08:25:32Z",
      "diff_hunk" : "@@ -5194,6 +5197,62 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.GetMinFee());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331221040",
      "id" : 1331221040,
      "line" : 5217,
      "node_id" : "PRRC_kwDOABII585PWNIw",
      "original_commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "original_line" : 5217,
      "original_position" : 38,
      "original_start_line" : 5214,
      "path" : "src/net_processing.cpp",
      "position" : 38,
      "pull_request_review_id" : 1635005891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331221040/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 5214,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-09-20T08:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331221040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331247152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331247152"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This looks like a boolean and got me confused \"if fee filter has been received\". It is actually an integer. When dealing with atomics it is better to read once into a local variable and later refer the local variable to avoid the value changing in the meantime.\r\n\r\n```suggestion\r\n            const auto minfee = tx_relay->m_fee_filter_received.load();\r\n            if (minfee > 0) {\r\n                peer_fee_filters.push_back(std::make_pair(pnode, minfee));\r\n```\r\n\r\n",
      "commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "created_at" : "2023-09-20T08:35:26Z",
      "diff_hunk" : "@@ -5194,6 +5197,62 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.GetMinFee());\n+\n+    std::vector<std::pair<CNode*, CAmount>> peer_fee_filters;\n+\n+    size_t around_our_percent_fee_filter = 0;\n+\n+    m_connman.ForEachNode([&](CNode* pnode) {\n+        if (!pnode->IsFullOutboundConn() || pnode->fDisconnect) return;\n+        auto peer = GetPeerRef(pnode->GetId());\n+\n+        if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+            if (tx_relay->m_fee_filter_received) {\n+                peer_fee_filters.push_back(std::make_pair(pnode, tx_relay->m_fee_filter_received.load()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331247152",
      "id" : 1331247152,
      "line" : 5229,
      "node_id" : "PRRC_kwDOABII585PWTgw",
      "original_commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "original_line" : 5229,
      "original_position" : 50,
      "original_start_line" : 5228,
      "path" : "src/net_processing.cpp",
      "position" : 50,
      "pull_request_review_id" : 1635005891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331247152/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 5228,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-09-20T08:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331247152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331253962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331253962"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this sorting by the `CNode*` pointers instead of the fees? https://en.cppreference.com/w/cpp/utility/pair/operator_cmp\r\nLooks like it would only compare the fees if the pointers are equal.\r\n\r\nIf `std::map<CAmount, CNode*>` is used, then this `std::sort` can be dropped.",
      "commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "created_at" : "2023-09-20T08:40:44Z",
      "diff_hunk" : "@@ -5194,6 +5197,62 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.GetMinFee());\n+\n+    std::vector<std::pair<CNode*, CAmount>> peer_fee_filters;\n+\n+    size_t around_our_percent_fee_filter = 0;\n+\n+    m_connman.ForEachNode([&](CNode* pnode) {\n+        if (!pnode->IsFullOutboundConn() || pnode->fDisconnect) return;\n+        auto peer = GetPeerRef(pnode->GetId());\n+\n+        if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+            if (tx_relay->m_fee_filter_received) {\n+                peer_fee_filters.push_back(std::make_pair(pnode, tx_relay->m_fee_filter_received.load()));\n+            } else {\n+                ++around_our_percent_fee_filter;\n+            }\n+        }\n+    });\n+\n+    if (peer_fee_filters.size() == 0) return;\n+\n+    std::sort(peer_fee_filters.begin(), peer_fee_filters.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331253962",
      "id" : 1331253962,
      "line" : 5238,
      "node_id" : "PRRC_kwDOABII585PWVLK",
      "original_commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "original_line" : 5238,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 59,
      "pull_request_review_id" : 1635005891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331253962/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-20T08:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331253962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331255189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331255189"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This line can be dropped, only elements with != are added to `peer_fee_filter`.",
      "commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "created_at" : "2023-09-20T08:41:37Z",
      "diff_hunk" : "@@ -5194,6 +5197,62 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.GetMinFee());\n+\n+    std::vector<std::pair<CNode*, CAmount>> peer_fee_filters;\n+\n+    size_t around_our_percent_fee_filter = 0;\n+\n+    m_connman.ForEachNode([&](CNode* pnode) {\n+        if (!pnode->IsFullOutboundConn() || pnode->fDisconnect) return;\n+        auto peer = GetPeerRef(pnode->GetId());\n+\n+        if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+            if (tx_relay->m_fee_filter_received) {\n+                peer_fee_filters.push_back(std::make_pair(pnode, tx_relay->m_fee_filter_received.load()));\n+            } else {\n+                ++around_our_percent_fee_filter;\n+            }\n+        }\n+    });\n+\n+    if (peer_fee_filters.size() == 0) return;\n+\n+    std::sort(peer_fee_filters.begin(), peer_fee_filters.end());\n+\n+    for (auto [node_id, fee_filter] : peer_fee_filters) {\n+        if (fee_filter == 0) ++around_our_percent_fee_filter;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1331255189",
      "id" : 1331255189,
      "line" : 5241,
      "node_id" : "PRRC_kwDOABII585PWVeV",
      "original_commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "original_line" : 5241,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 62,
      "pull_request_review_id" : 1635005891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331255189/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-09-20T08:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1331255189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Maybe we want to look at peers that aren't announcing a lot of INV relative to other peers of the same type and use it as some sort of apples-to-apples tie breaker? I'd be extremely careful of self-partitioning if we've already found what we believe to be useful outbound peers for blocks.",
      "created_at" : "2023-09-20T17:29:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#issuecomment-1728160675",
      "id" : 1728160675,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28488",
      "node_id" : "IC_kwDOABII585nAaOj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728160675/reactions"
      },
      "updated_at" : "2023-09-20T17:29:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1728160675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1332698510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1332698510"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now I realize that the assumption here is that we don't have yet a problematic low-fee local tx that we cannot broadcast. In that case, yes, I agree that the best approach is to compare the sizes of the mempools.",
      "commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "created_at" : "2023-09-21T08:41:58Z",
      "diff_hunk" : "@@ -5194,6 +5197,62 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.GetMinFee());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1332698510",
      "id" : 1332698510,
      "in_reply_to_id" : 1331221040,
      "line" : 5217,
      "node_id" : "PRRC_kwDOABII585Pb12O",
      "original_commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "original_line" : 5217,
      "original_position" : 38,
      "original_start_line" : 5214,
      "path" : "src/net_processing.cpp",
      "position" : 38,
      "pull_request_review_id" : 1637262009,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1332698510/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 5214,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-09-21T08:41:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1332698510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard \r\n\r\n>With this direction, you would only disconnect based on the maxmempool announced, not the seen fee filters. Of course, there is a similar risk of transaction propagation issue interference, though at least you're not losing full-relay peers that are good for the honesty of your chain view.\r\n\r\nMy point was that even though you continue to receive blocks, the same exact cost (6 BTC or whatever) would apply to censoring transactions (through spamming peer's mempool) seamlessly. However, with my patch, an attacker *has to repeat it* until all outbound connections are occupied. With your patch, it's a one-time cost (assuming no other fix is applied). Right?\r\nI agree we should continue comparing these two solutions.\r\n\r\n---------------\r\n\r\n@vasild\r\n\r\n>What about triggering this only if it is needed - if we have such a low-fee transaction\r\n\r\nWith time-sensitive transactions, I think you don't want to deal with it at the last moment. Although you're right, we should be careful with adding structure to the network. That's why my initial policy was *4 peers should have a similar mempool*, but I'm open to discussing it.\r\n\r\n--------------------\r\n\r\n@instagibbs \r\n\r\nThat would be partitioning based on latency instead of just mempool size... Is it any better?",
      "created_at" : "2023-09-21T13:14:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#issuecomment-1729562824",
      "id" : 1729562824,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28488",
      "node_id" : "IC_kwDOABII585nFwjI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729562824/reactions"
      },
      "updated_at" : "2023-09-21T13:14:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729562824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1344422474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344422474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Currently we have at max 2 block-relay-only connections (`MAX_BLOCK_RELAY_ONLY_CONNECTIONS`) and 8 full-relay connections, whatever of the eviction frequency and fee differential that can be adopted as parameters to known when to severe an outbound connection, I think it would be good to have more than 2 outbound block-relay peers strictly protected.\r\n\r\nOne protection heuristic I believe can be to pick-up randomly 2 more `IsFullOutboundConn()` on their sockets and mark them as protected from `CheckForLimitedMempoolAndEvictPeers`.",
      "commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "created_at" : "2023-10-03T16:43:11Z",
      "diff_hunk" : "@@ -5194,6 +5197,62 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n+void PeerManagerImpl::CheckForLimitedMempoolAndEvictPeers()\n+{\n+    LOCK(cs_main);\n+    // It only makes sense once we're out of IBD, because otherwise our mempool\n+    // is not a good source for fee estimation anyway.\n+    // TODO: assumeUTXO?\n+    if (!CanDirectFetch()) return;\n+\n+    // Don't bother if we are still seeking for outbound peers: eviction\n+    // instead will reduce our chances to get blocks and transactions from\n+    // them.\n+    // TODO this could be more nuanced.\n+    if (m_connman.GetExtraFullOutboundCount() < 0) return;\n+\n+    // Ideally we want to compare mempool sizes, not fee filters.\n+    // Otherwise we easily get confused: e.g. at empty mempools this is less\n+    // critical, but that'd be impossible to account for.\n+    const auto our_min_feerate = WITH_LOCK(m_mempool.cs, return m_mempool.GetMinFee());\n+\n+    std::vector<std::pair<CNode*, CAmount>> peer_fee_filters;\n+\n+    size_t around_our_percent_fee_filter = 0;\n+\n+    m_connman.ForEachNode([&](CNode* pnode) {\n+        if (!pnode->IsFullOutboundConn() || pnode->fDisconnect) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28488#discussion_r1344422474",
      "id" : 1344422474,
      "line" : 5224,
      "node_id" : "PRRC_kwDOABII585QIkJK",
      "original_commit_id" : "6b4c4aeaf2f9625f03eb8ccc68cf6a96158ac099",
      "original_line" : 5224,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 45,
      "pull_request_review_id" : 1655682641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28488",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344422474/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-10-03T17:10:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1344422474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
