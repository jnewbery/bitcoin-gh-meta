[
   {
      "author_association" : "MEMBER",
      "body" : "Wouldn't checking the instructions be more of a security-check instead of a symbol-check?\r\n\r\nAssigning myself as I'm interested on working on this.",
      "created_at" : "2024-04-11T10:32:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/28413#issuecomment-2049395693",
      "id" : 2049395693,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28413",
      "node_id" : "IC_kwDOABII5856J0vt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2049395693/reactions"
      },
      "updated_at" : "2024-04-11T10:32:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2049395693",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is introducing a dependency on the python `capstone` binding acceptable here? It's not possible to do this check without a disassembler of some kind, we don't want to rely on calling out to `objdump`, and i'm not sure we want our own x86 mini-disassembler (hard to review, slow in pure python). Capstone is great for this and might help in future instruction security checks as well. But it's another build-time dep.",
      "created_at" : "2024-04-14T20:53:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/28413#issuecomment-2054181503",
      "id" : 2054181503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28413",
      "node_id" : "IC_kwDOABII5856cFJ_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2054181503/reactions"
      },
      "updated_at" : "2024-04-14T20:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2054181503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For reference, with capstone this check is as simple as:\r\n```python3\r\n# IntelÂ® 64 and IA-32 Architectures Software Developerâs Manual:\r\n#   chapter 14.9, table 14-22. Instructions Requiring Explicitly Aligned Memory\r\n#   chapter 15.7, Table 15-6. SIMD Instructions Requiring Explicitly Aligned Memory\r\n#\r\n# This amounts to the following instructions:\r\n#\r\n# instruction                  chapter 4.3 section\r\n# ---------------------------  ---------------------------------\r\n# (V)MOVDQA xmm, mBBB          MOVDQA,VMOVDQA32/64âMove Aligned Packed Integer Values\r\n# (V)MOVDQA mBBB, xmm          MOVDQA,VMOVDQA32/64âMove Aligned Packed Integer Values\r\n# (V)MOVAPS xmm, mBBB          MOVAPSâMove Aligned Packed Single Precision Floating-Point Values\r\n# (V)MOVAPS mBBB, xmm          MOVAPSâMove Aligned Packed Single Precision Floating-Point Values\r\n# (V)MOVAPD xmm, mBBB          MOVAPDâMove Aligned Packed Double Precision Floating-Point Values\r\n# (V)MOVAPD mBBB, xmm          MOVAPDâMove Aligned Packed Double Precision Floating-Point Values\r\n# (V)MOVNTPS mBBB, xmm         MOVNTPSâStore Packed Single Precision Floating-Point Values Using Non-Temporal Hint\r\n# (V)MOVNTPD mBBB, xmm         MOVNTPDâStore Packed Double Precision Floating-Point Values Using Non-Temporal Hint\r\n# (V)MOVNTDQ mBBB, xmm         MOVNTDQâStore Packed Integers Using Non-Temporal Hint\r\n# (V)MOVNTDQA xmm, mBBB        MOVNTDQAâLoad Double Quadword Non-Temporal Aligned Hint\r\n#\r\n# BBB is the bit size, which can be 128, 256 or 512.\r\n#\r\nFORBIDDEN_VMOVA = {\r\n    capstone.x86.X86_INS_MOVDQA,    capstone.x86.X86_INS_VMOVDQA,   capstone.x86.X86_INS_VMOVDQA32, capstone.x86.X86_INS_VMOVDQA64,\r\n    capstone.x86.X86_INS_MOVAPS,    capstone.x86.X86_INS_VMOVAPS,\r\n    capstone.x86.X86_INS_MOVAPD,    capstone.x86.X86_INS_VMOVAPD,\r\n    capstone.x86.X86_INS_MOVNTPS,   capstone.x86.X86_INS_VMOVNTPS,\r\n    capstone.x86.X86_INS_MOVNTPD,   capstone.x86.X86_INS_VMOVNTPD,\r\n    capstone.x86.X86_INS_MOVNTDQ,   capstone.x86.X86_INS_VMOVNTDQ,\r\n    capstone.x86.X86_INS_MOVNTDQA,  capstone.x86.X86_INS_VMOVNTDQA,\r\n}\r\n\r\ndef check_ELF_no_vmova(binary) -> bool:\r\n    '''\r\n    Check for vmov instructions that require alignment.\r\n    These are a potential problem due to a stack alignment bug in GCC on Windows.\r\n    See https://github.com/bitcoin/bitcoin/issues/28413 for specifics.\r\n    '''\r\n    cs = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_64)\r\n\r\n    found_forbidden = False\r\n    for segment in binary.segments:\r\n        # Find loaded, executable segments\r\n        if segment.type == lief.ELF.SEGMENT_TYPES.LOAD and (segment.flags & lief.ELF.SEGMENT_FLAGS.X) != 0:\r\n            # disassemble segment, check every instruction\r\n            for i in cs.disasm(segment.content, segment.virtual_address): # -> CsInsn\r\n                if i.id in FORBIDDEN_VMOVA:\r\n                    found_forbidden = True\r\n\r\n    return not found_forbidden\r\n```\r\nStill need to port this to PE.\r\n\r\nAnd figure out what the exceptions are in the current release, and how to either get rid of them, or identify them.\r\n",
      "created_at" : "2024-04-15T03:51:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/28413#issuecomment-2054821617",
      "id" : 2054821617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28413",
      "node_id" : "IC_kwDOABII5856ehbx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2054821617/reactions"
      },
      "updated_at" : "2024-04-15T03:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2054821617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
